# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby26 < Parser::Base


  def version
    26
  end

  def default_encoding
    Encoding::UTF_8
  end
##### State transition tables begin ###

clist = [
'-485,212,213,212,213,220,-102,-485,-485,-485,111,579,-485,-485,-485',
'218,-485,274,222,620,260,261,267,579,-485,622,-485,-485,-485,274,592',
'274,-499,124,593,-103,-485,-485,579,-485,-485,-485,-485,-485,579,579',
'-102,-103,-110,-110,-88,-109,-101,811,-109,586,259,258,274,223,-74,209',
'-110,210,819,-105,-485,-485,-485,-485,-485,-485,-485,-485,-485,-485',
'-485,-485,-485,-485,219,269,-485,-485,-485,619,-485,-485,725,-102,-485',
'621,-107,-485,-485,223,-485,223,-485,211,-485,214,-485,-485,273,-485',
'-485,-485,-485,-485,-105,-485,-488,-485,-107,-93,273,-104,273,-488,-488',
'-488,269,-106,-488,-488,-488,-485,-488,115,-485,-485,-485,-485,114,-485',
'-488,-485,-488,-488,-488,115,-485,-485,-94,273,114,-96,-488,-488,-108',
'-488,-488,-488,-488,-488,115,-104,-101,845,-100,114,115,115,-102,-103',
'-110,114,114,-102,-103,-110,-109,818,-96,-106,799,-109,-488,-488,-488',
'-488,-488,-488,-488,-488,-488,-488,-488,-488,-488,-488,115,263,-488',
'-488,-488,114,-488,-488,-582,-98,-488,322,-98,-488,-488,323,-488,-108',
'-488,798,-488,-96,-488,-488,223,-488,-488,-488,-488,-488,-298,-488,394',
'-488,-95,-583,-105,-298,-298,-298,-107,-105,799,-298,-298,-107,-298',
'-488,-582,-106,-488,-488,-488,-488,-106,-488,407,-488,212,213,-500,-96',
'-488,-488,-96,456,-298,-298,-95,-298,-298,-298,-298,-298,-96,458,-108',
'798,-98,-485,-97,-108,-583,-104,212,213,-485,559,-104,556,555,554,-97',
'557,212,213,-298,-298,-298,-298,-298,-298,-298,-298,-298,-298,-298,-298',
'-298,-298,459,457,-298,-298,-298,-488,645,-103,-98,-499,-298,-98,-488',
'-298,93,94,-99,607,-298,222,-298,-98,-298,-298,-95,-298,-298,-298,-298',
'-298,-495,-298,-586,-298,-485,-582,-97,-495,404,-586,-586,-586,223,406',
'405,-586,-586,-298,-586,115,-298,-298,487,-99,114,-298,-93,-586,-110',
'838,212,213,-298,-108,-95,-579,-102,-95,-586,-586,-488,-586,-586,-586',
'-586,-586,-97,-95,115,-97,496,609,608,114,559,607,556,555,554,-97,557',
'757,95,96,498,-495,607,220,-586,-586,-586,-586,-586,-586,-586,-586,-586',
'-586,-586,-586,-586,-586,525,500,-586,-586,-586,-485,646,93,94,607,-586',
'115,-485,-586,115,785,114,-579,-586,114,-586,-485,-586,-586,-500,-586',
'-586,-586,-586,-586,786,-586,-586,-586,607,124,-494,609,608,605,-579',
'607,-110,-494,-73,-580,607,-586,609,608,-586,-586,-586,-97,956,-586',
'223,-109,759,-586,-586,-586,-586,-106,-586,-586,-586,511,-586,512,-485',
'-94,-105,609,608,605,-496,-586,-586,-586,-586,-103,519,-496,278,95,96',
'-107,-586,-586,673,-586,-586,-586,-586,-586,525,-488,609,608,610,-494',
'607,223,-488,609,608,612,607,-580,609,608,614,-488,538,575,574,537,-586',
'-586,-586,-586,-586,-586,-586,-586,-586,-586,-586,-586,-586,-586,-580',
'269,-586,-586,-586,522,787,-586,218,-496,-586,-100,-493,-586,-586,217',
'-586,526,-586,-493,-586,-109,-586,-586,215,-586,-586,-586,-586,-586',
'-488,-586,-586,-586,609,608,618,-490,-335,-491,609,608,623,243,-490',
'-335,-491,-586,243,640,-586,-586,-586,-586,-335,-586,640,-586,-298,641',
'864,641,-586,-106,115,-298,-298,-298,223,114,-298,-298,-298,219,-298',
'240,541,-493,542,242,241,-492,218,243,-298,-298,-298,538,-492,267,540',
'500,772,772,-298,-298,-96,-298,-298,-298,-298,-298,-490,-335,-491,218',
'-105,-497,-98,842,811,586,454,-105,-497,240,-107,-104,-107,242,241,455',
'396,-497,-298,-298,-298,-298,-298,-298,-298,-298,-298,-298,-298,-298',
'-298,-298,115,-95,-298,-298,-298,114,788,-298,-492,219,-298,-104,-104',
'-298,-298,590,-298,591,-298,599,-298,538,-298,-298,540,-298,-298,-298',
'-298,-298,-298,-298,219,-298,-497,842,811,-298,-298,-298,624,627,538',
'-298,-298,540,-298,-298,243,-271,-298,-298,-298,-298,629,-298,81,-298',
'-586,630,634,223,-298,-108,253,254,-298,-298,82,-298,-298,-298,-298',
'-298,223,-498,638,986,83,218,240,639,-498,269,242,241,518,238,239,650',
'243,-498,243,243,243,516,-298,-298,-298,-298,-298,-298,-298,-298,-298',
'-298,-298,-298,-298,-298,-586,-289,-298,-298,-298,223,645,-586,-289',
'223,-298,223,-582,-298,-88,676,-586,-289,-298,223,-298,531,-298,-298',
'687,-298,-298,-298,-298,-298,-498,-298,-586,-298,219,-586,692,693,223',
'-586,-586,-586,564,695,699,-586,-586,-298,-586,702,-298,-298,567,-298',
'218,-298,703,-586,705,707,709,528,-298,-108,717,-586,-289,718,-586,-586',
'455,-586,-586,-586,-586,-586,559,218,556,555,554,719,557,721,589,575',
'574,726,727,586,568,751,752,587,729,753,109,110,-586,-586,-586,-586',
'-586,-586,-586,-586,-586,-586,-586,-586,-586,-586,746,711,-586,-586',
'-586,218,646,219,218,756,-586,760,595,-586,761,633,-272,773,-586,487',
'-586,597,-586,-586,631,-586,-586,-586,-586,-586,219,-586,-586,-586,559',
'487,556,555,554,564,557,-299,118,119,120,121,122,-586,-299,567,-586',
'-586,-415,-586,223,-586,790,-299,791,-415,-415,-415,-586,-106,-415,-415',
'-415,263,-415,796,219,562,801,219,498,243,500,-415,-415,-415,572,571',
'575,574,687,223,269,568,-415,-415,269,-415,-415,-415,-415,-415,559,687',
'556,555,554,-299,557,243,811,223,-299,240,-299,836,223,242,241,223,238',
'239,811,-299,-415,-415,-415,-415,-415,-415,-415,-415,-415,-415,-415',
'-415,-415,-415,844,711,-415,-415,-415,223,223,-415,853,269,-415,-273',
'223,-415,-415,863,-415,867,-415,687,-415,883,-415,-415,-271,-415,-415',
'-415,-415,-415,-305,-415,-415,-415,-299,887,891,-305,-305,-305,892,702',
'-305,-305,-305,218,-305,-415,894,896,-415,-415,976,-415,898,-415,-305',
'-305,900,900,223,597,-415,906,908,910,-305,-305,913,-305,-305,-305,-305',
'-305,914,917,223,-298,921,-298,-274,923,702,926,-298,928,-298,930,932',
'-583,223,-583,934,-298,958,-298,-305,-305,-305,-305,-305,-305,-305,-305',
'-305,-305,-305,-305,-305,-305,219,963,-305,-305,-305,746,974,-305,977',
'278,-305,982,983,-305,-305,984,-305,987,-305,900,-305,900,-305,-305',
'900,-305,-305,-305,-305,-305,-290,-305,-298,-305,-298,992,958,-290,-290',
'-290,702,997,-290,-290,-290,218,-290,-305,999,1001,-305,-305,981,-305',
'1003,-305,-290,-290,-290,1003,692,979,-305,958,1018,-583,-290,-290,-582',
'-290,-290,-290,-290,-290,949,218,556,555,554,223,557,559,976,556,555',
'554,949,557,556,555,554,597,557,900,958,1025,-290,-290,-290,-290,-290',
'-290,-290,-290,-290,-290,-290,-290,-290,-290,219,564,-290,-290,-290',
'1003,1003,-290,711,1003,-290,567,1003,-290,-290,,-290,714,-290,,-290',
',-290,-290,,-290,-290,-290,-290,-290,219,-290,,-290,559,,556,555,554',
',557,,,,575,574,,-290,,568,-290,-290,-290,-290,,-290,-254,-290,,,,,-290',
'-254,-254,-254,,,-254,-254,-254,711,-254,559,,556,555,554,,557,714,-254',
'-254,-254,559,,556,555,554,,557,,-254,-254,,-254,-254,-254,-254,-254',
'559,,556,555,554,559,557,556,555,554,711,557,118,119,120,121,122,,,905',
',711,-254,-254,-254,-254,-254,-254,-254,-254,-254,-254,-254,-254,-254',
'-254,,711,-254,-254,-254,,711,-254,,269,-254,,,-254,-254,,-254,,-254',
',-254,,-254,-254,,-254,-254,-254,-254,-254,,-254,-254,-254,559,,556',
'555,554,564,557,118,119,120,121,122,,-254,,567,-254,-254,-587,-254,',
'-254,,,,-587,-587,-587,-254,,-587,-587,-587,,-587,243,,562,118,119,120',
'121,122,-587,-587,-587,-587,,575,574,,253,254,568,-587,-587,,-587,-587',
'-587,-587,-587,,,,,,240,,246,,242,241,,238,239,,,244,,245,,,,-587,-587',
'-587,-587,-587,-587,-587,-587,-587,-587,-587,-587,-587,-587,,,-587,-587',
'-587,243,,-587,,,-587,,,-587,-587,,-587,,-587,,-587,,-587,-587,,-587',
'-587,-587,-587,-587,,-587,-587,-587,,,,240,,,,242,241,,238,239,,-587',
',,-587,-587,-587,-587,,-587,-588,-587,,,,,-587,-588,-588,-588,,,-588',
'-588,-588,243,-588,,,,,,,,,-588,-588,-588,-588,,,253,254,,,,-588,-588',
',-588,-588,-588,-588,-588,,,,240,,246,,242,241,,238,239,,,244,,245,',
',,,,-588,-588,-588,-588,-588,-588,-588,-588,-588,-588,-588,-588,-588',
'-588,,,-588,-588,-588,,,-588,,,-588,,,-588,-588,,-588,,-588,,-588,,-588',
'-588,,-588,-588,-588,-588,-588,,-588,-588,-588,,,,,,,,,,,,,,-588,,,-588',
'-588,-588,-588,,-588,-254,-588,,,,,-588,-254,-254,-254,,,-254,-254,-254',
'243,-254,,,,,,,,,-254,-254,,,,,253,254,,,,-254,-254,,-254,-254,-254',
'-254,-254,,,,240,,246,,242,241,,238,239,,,,243,247,248,249,250,260,261',
'255,256,251,252,,236,237,,,253,254,-254,,,,,,,-254,,,,,269,-254,240',
',246,,242,241,,238,239,259,258,244,,245,,,,,,,,-254,-254,,,,,,,,,,,257',
',,-254,,,-254,,,,,-254,5,70,71,72,9,58,-254,,,64,65,,,,68,,66,67,69',
'30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,635,8,46,7,10,107',
'106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,243,247,248,249',
'250,260,261,255,256,251,252,,236,237,,,253,254,,40,,,33,,,59,60,,,61',
',35,240,,246,45,242,241,,238,239,259,258,244,20,245,,,,91,81,84,85,',
'86,88,87,89,,,,,82,90,,257,,-246,,,63,,83,95,96,296,70,71,72,9,58,,',
',64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19',
',,,,635,8,46,298,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94',
'42,43,41,243,247,248,249,250,260,261,255,256,251,252,,236,237,,,253',
'254,,40,,,300,,,59,60,,,61,,35,240,,246,45,242,241,,238,239,259,258',
'244,20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,257,,,,,63,,83,95',
'96,5,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27',
'103,102,104,105,,,19,,,,,,8,46,7,10,107,106,108,97,57,99,98,100,,101',
'109,110,,93,94,42,43,41,243,247,248,249,250,260,261,255,256,251,252',
',236,237,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242,241,,238',
'239,259,258,244,20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,257,,',
',,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74',
',,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57',
'99,98,100,,101,109,110,,93,94,42,43,41,243,247,248,249,250,260,261,255',
'256,251,252,,236,237,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246,45',
'242,241,,238,239,259,258,244,20,245,,,,91,81,84,85,,86,88,87,89,,,,',
'82,90,223,257,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66',
'67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10',
'107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,243,247,248',
'249,250,260,261,255,256,251,252,,236,237,,,253,254,,40,,,33,,,59,60',
',,61,,35,240,,246,45,242,241,,238,239,259,258,244,20,245,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,257,,,,,63,,83,95,96,296,70,71,72,9,58,,',
',64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19',
',,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42',
'43,41,243,247,248,249,250,260,261,255,256,251,252,,236,237,,,253,254',
',40,,,300,,,59,60,,,61,,35,240,,246,45,242,241,,238,239,259,258,244',
'20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,257,,,,,63,,83,95,96,296',
'70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103',
'102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109',
'110,,93,94,42,43,41,243,247,248,249,250,260,261,255,256,251,252,,236',
'237,,,253,254,,40,,,300,,,59,60,,,61,,35,240,,246,45,242,241,,238,239',
'259,258,244,20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,257,,,,,63',
',83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,',
',,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99',
'98,100,,101,109,110,,93,94,42,43,41,243,247,248,249,250,260,261,255',
'256,251,252,,-607,-607,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246',
'45,242,241,,238,239,259,258,244,20,245,,,,91,81,84,85,,86,88,87,89,',
',,,82,90,,,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67',
'69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107',
'106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,243,247,248,249',
'250,260,261,255,256,251,252,,-607,-607,,,253,254,,40,,,33,,,59,60,,',
'61,,35,240,,246,45,242,241,,238,239,259,258,244,20,245,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65',
',,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,',
'8,46,298,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41',
'243,-607,-607,-607,-607,260,261,,,-607,-607,,,,,,253,254,,40,,,33,,',
'59,60,,,61,,35,240,,246,45,242,241,,238,239,259,258,244,20,245,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,296,70,71,72,9,58',
',,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,',
',19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94',
'42,43,41,243,-607,-607,-607,-607,260,261,,,-607,-607,,,,,,253,254,,40',
',,33,,,59,60,,,61,,35,240,,246,45,242,241,,238,239,259,258,244,20,245',
',,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,296,70,71,72',
'9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104',
'105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109,110,',
'93,94,42,43,41,243,-607,-607,-607,-607,260,261,,,-607,-607,,,,,,253',
'254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242,241,,238,239,259,258,244',
'20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,296',
'70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103',
'102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109',
'110,,93,94,42,43,41,243,-607,-607,-607,-607,260,261,,,-607,-607,,,,',
',253,254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242,241,,238,239,259',
'258,244,20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95',
'96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28',
'27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100',
',101,109,110,,93,94,42,43,41,243,-607,-607,-607,-607,260,261,,,-607',
'-607,,,,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242,241,,238',
'239,259,258,244,20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63',
',83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,',
',,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99',
'98,100,,101,109,110,,93,94,42,43,41,243,-607,-607,-607,-607,260,261',
',,-607,-607,,,,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242,241',
',238,239,259,258,244,20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,',
',,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73',
'74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97',
'57,99,98,100,,101,109,110,,93,94,42,43,41,243,247,248,249,250,260,261',
',,251,252,,,,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242,241',
',238,239,259,258,244,20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,',
',,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73',
'74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97',
'57,99,98,100,,101,109,110,,93,94,42,43,41,243,247,248,249,250,260,261',
'255,,251,252,,,,,,253,254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242',
'241,,238,239,259,258,244,20,245,,,,91,81,84,85,,86,88,87,89,,,,,82,90',
',,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31',
'73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108',
'97,57,99,98,100,,101,109,110,,93,94,42,43,41,243,,,,,,,,,,,,,,,,253',
'254,,40,,,33,,,59,60,,,61,,35,240,,246,45,242,241,,238,239,,,,20,,,',
',91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,296,70,71,72',
'9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104',
'105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109,110,',
'93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,',
',,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,296',
'70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103',
'102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109',
'110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45',
',,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96',
'296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27',
'103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101',
'109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35',
',,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83',
'95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75',
'28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57,99,98',
'100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60',
',,61,,35,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,',
',,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73',
'74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97',
'57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33',
',,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30',
'31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106',
'108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,',
'40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,,,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,,68,,66',
'67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10',
'107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,',
',,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86',
'88,87,89,,,,,82,90,,,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64,65,,,',
'68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46',
'298,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,',
',,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,296,70,71,72,9,58,,,,64',
'65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,',
',,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,',
'91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,296,70,71,72,9',
'58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105',
',,19,,,,,,8,46,298,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,70,71,72,9',
'58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105',
',,19,,,,,,8,46,7,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64',
'65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,',
',,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,',
',,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,',
'68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46',
',,107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41,,,,,,',
',,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233,,,',
',91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65',
',,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,',
',,46,,,107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41,',
',,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233',
',,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64',
'65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,',
',,,,,46,,,107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41',
',,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233',
',,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64',
'65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235',
',,,,,,313,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,,,319,,',
',,,,,,,,,,,,,,,,,309,,,305,,,59,60,,,61,,304,,,,,,,,,,,,,,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68',
',66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,',
'313,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,,,319,,,,,,,,',
',,,,,,,,,,,309,,,234,,,59,60,,,61,,,559,,556,555,554,564,557,,,,,,,',
',567,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,321,,562,63,,83,95,96,70',
'71,72,,58,575,574,,64,65,568,,,68,,66,67,69,315,316,73,74,,,,,,75,312',
'318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101',
'109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,',
',,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72',
'63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103',
'102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110',
',93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,',
',,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83',
'95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104',
'105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,70,71,72,9',
'58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105',
',,19,,,,,,8,46,,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42',
'43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,',
',,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64',
'65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235',
',,,,,,46,,,107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,,,45,,,291,,,,,,233',
',,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64',
'65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235',
',,,,,,46,,,107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,291,,,,,,233',
',,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64',
'65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,',
',,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,',
',,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68',
',66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,,46,,',
'107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,',
',,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86',
'88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69',
'30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,,46,,,107,106,108',
'97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228',
',,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,',
',,,82,90,115,,,,,114,63,,83,95,96,70,71,72,,58,,,,64,65,,,,68,,66,67',
'69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,313,,,107',
'106,108,97,57,99,98,100,,101,109,110,,93,94,,,319,,,,,,,,,,,,,,,,,,',
',356,,,33,,,59,60,,,61,,35,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89',
',,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73',
'74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,313,,,107,106,108,361',
'57,99,98,362,,101,109,110,,93,94,,,319,,,,,,,,,,,,,,,,,368,,,363,,,234',
',,59,60,,,61,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,',
',,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75',
'312,318,103,102,104,105,,,235,,,,,,,313,,,107,106,108,361,57,99,98,362',
',101,109,110,,93,94,,,319,,,,,,,,,,,,,,,,,,,,363,,,234,,,59,60,,,61',
',,559,,556,555,554,564,557,,,,,,,,,567,,91,81,84,85,,86,88,87,89,,,',
',82,90,,,,,,562,63,,83,95,96,70,71,72,9,58,575,574,,64,65,568,,,68,',
'66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,7',
'10,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,',
',,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,,,396,63,,83,95,96,70,71,72,,58,,,,64,65,',
',,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,',
'46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,',
',,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66',
'67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,,46,,,107',
'106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30',
'31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,,46,,,107,106,108,97',
'57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234',
',,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,',
',75,28,27,103,102,104,105,,,19,,,,,,,46,,,107,106,108,97,57,99,98,100',
',101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,',
'61,,,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63',
',83,95,96,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75',
'28,27,103,102,104,105,,,19,,,,,,8,46,,10,107,106,108,97,57,99,98,100',
',101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61',
',35,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71',
'72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103',
'102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110',
',93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,412,,,,45',
',,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58',
'83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104',
'105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,412,,,,45,,,,,,',
',,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95',
'96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,',
',19,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,',
'91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65',
',,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,',
',46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,',
',,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66',
'67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,,,107',
'106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30',
'31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,,,107,106,108',
'97,57,99,98,100,290,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228',
',,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233,,,,,91,288,84,85,,86',
'88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69',
'30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,,,107,106,108',
'97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228',
',,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89',
',,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73',
'74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,,46,,,107,106,108,97,57,99',
'98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59',
'60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,',
',70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28',
'27,103,102,104,105,,,19,,,,,,,46,,,107,106,108,97,57,99,98,100,,101',
'109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,',
',,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,223,,,70,71',
'72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318',
'103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109',
'110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45',
',,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58',
'83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102',
'104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93',
'94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,',
',,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95',
'96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105',
',,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42',
'43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64',
'65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235',
',,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41',
',,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,',
'68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,',
',,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,',
',,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68',
',66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,',
'46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,',
',,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66',
'67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,',
',107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,',
',,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67',
'69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107',
'106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315',
'316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108',
'97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228',
',,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89',
',,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73',
'74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57',
'99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234',
',,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,',
',,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99',
'98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59',
'60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,',
',,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75',
'312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100',
',101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,',
'61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70',
'71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312',
'318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101',
'109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,',
',,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72',
'63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103',
'102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110',
',93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,',
',,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83',
'95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104',
'105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64',
'65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235',
',,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41',
',,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,',
'68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,',
',,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,',
',,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68',
',66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,',
'46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,',
',,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66',
'67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,',
',107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,',
',,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67',
'69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107',
'106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315',
'316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108',
'97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228',
',,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89',
',,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73',
'74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57',
'99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234',
',,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,',
',,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99',
'98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59',
'60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,',
',,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75',
'312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100',
',101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,',
'61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70',
'71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27',
'103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,290,101',
'109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287',
',285,,45,,,291,,,,,,233,,,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70',
'71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27',
'103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,290,101',
'109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287',
',285,,45,,,291,,,,,,233,,,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70',
'71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27',
'103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,290,101',
'109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287',
',285,,45,,,291,,,,,,233,,,,,91,288,84,85,,86,88,87,89,,,,,82,90,223',
',,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75',
'312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100',
',101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,',
'61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70',
'71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312',
'318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101',
'109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,',
',,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72',
'63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103',
'102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110',
',93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,',
',,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83',
'95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104',
'105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,70,71,72,9',
'58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105',
',,19,,,,,,8,46,,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42',
'43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,',
',,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64',
'65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235',
',,,,,,313,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,,,319,,',
',,,,,,,,,,,,,,,,,309,,,234,,,59,60,,,61,,,559,,556,555,554,564,557,',
',,,,,,,567,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,514,,562,63,,83,95',
'96,70,71,72,,58,575,574,,64,65,568,,,68,,66,67,69,315,316,73,74,,,,',
',75,312,318,103,102,104,105,,,235,,,,,,,313,,,107,106,108,97,57,99,98',
'100,,101,109,110,,93,94,,,319,,,,,,,,,,,,,,,,,,,,309,,,305,,,59,60,',
',61,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72',
'63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103',
'102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110',
',93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,',
',,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83',
'95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104',
'105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,531,,59,60,,,61,,,,,,45,,,,,,',
',,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95',
'96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,',
',19,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,',
'91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65',
',,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,',
',46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,',
',,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66',
'67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,,46,,,107',
'106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315',
'316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108',
'97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228',
',,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89',
',,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73',
'74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57',
'99,98,100,290,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234',
',,59,60,,,61,,287,,285,,45,,,291,,,,,,233,,,,,91,288,84,85,,86,88,87',
'89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316',
'73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97',
'57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234',
',,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,',
',,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99',
'98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59',
'60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,',
',,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75',
'312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100',
',101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,',
'61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70',
'71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312',
'318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,290',
'101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61',
',670,,285,,45,,,291,,,,,,233,,,,,91,288,84,85,,86,88,87,89,,,,,82,90',
',,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,',
'75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98',
'100,290,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59',
'60,,,61,,,,285,,45,,,291,,,,,,233,,,,,91,288,84,85,,86,88,87,89,,,,',
'82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74',
',,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99',
'98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59',
'60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,',
',,,,,63,,83,95,96,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74',
',,,,,75,28,27,103,102,104,105,,,19,,,,,,8,46,298,10,107,106,108,97,57',
'99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,',
'59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,,,,,396,63,,83,95,96,70,71,72,,58,,,,64,65,,,,68,,66,67,69,315,316',
'73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,313,,,107,106,108',
'97,57,99,98,100,,101,109,110,,93,94,,,319,,,,,,,,,,,,,,,,,,,,309,,,305',
',,59,60,,,61,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,',
',,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75',
'28,27,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,290',
'101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61',
',287,,285,,45,,,291,,,,,,233,,,,,91,288,84,85,,86,88,87,89,,,,,82,90',
',,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,',
'75,312,318,103,102,104,105,,,235,,,,,,,313,,,107,106,108,97,57,99,98',
'100,,101,109,110,,93,94,,,319,,,,,,,,,,,,,,,,,,,,309,,,305,,,59,60,',
',61,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72',
'63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103',
'102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110',
',93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,',
',,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83',
'95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104',
'105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64',
'65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,',
',,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,',
',,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68',
',66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,',
'46,,,107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41,,,',
',,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,670,,,,45,,,291,,,,,,233,,,',
',91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65',
',,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235',
',,,,,,46,,,107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,291,,,,,,233',
',,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64',
'65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235',
',,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41',
',,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,',
'68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,',
',,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,',
',,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,,,45,,,,,,,,,233,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,',
'68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46',
',,107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41,,,,,,',
',,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233,,,',
',91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65',
',,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,',
',,46,,,107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41,',
',,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233',
',,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64',
'65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235',
',,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41',
',,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,764,,,,45,,,,,,,,,233,,,',
',91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65',
',,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,',
',,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,',
',,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68',
',66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,',
',107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41,,,,,,,',
',,,,,,,,,,,,228,,,234,,,59,60,,,61,,287,,285,,45,,,291,,,,,,233,,,,',
'91,288,84,85,,86,88,87,89,,,,,82,90,,,,,,,63,,83,95,96,70,71,72,9,58',
',,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,',
',19,,,,,,8,46,,10,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42',
'43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,',
',,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64',
'65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235',
',,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41',
',,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,',
'68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,',
',,,46,,,107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41',
',,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,670,,285,,45,,,291,,,,,,233',
',,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64',
'65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235',
',,,,,,46,,,107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,285,,45,,,291,,,,,,233',
',,,,91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64',
'65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,',
',,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,',
',,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,',
'68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46',
',,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,',
',,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67',
'69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,,,107,106',
'108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,',
'228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31',
'73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97',
'57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234',
',,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,',
',,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99',
'98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59',
'60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,',
',,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75',
'312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100',
',101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,',
'61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70',
'71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312',
'318,103,102,104,105,,,235,,,,,,,313,,,107,106,108,97,57,99,98,100,,101',
'109,110,,93,94,,,319,,,,,,,,,,,,,,,,,,,,309,,,305,,,59,60,,,61,,,,,',
',,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83',
'95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104',
'105,,,235,,,,,,,313,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94',
',,319,,,,,,,,,,,,,,,,,,,,309,,,305,,,59,60,,,61,,,,,,,,,,,,,,,,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,',
'68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,',
',,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,',
',,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,412,,,,45,,,,,,,,,233,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,',
'68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,',
',,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,',
',,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68',
',66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,,,,,,46,,',
'107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,',
',,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81,84,85,,86',
'88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69',
'315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106',
'108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,',
'228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31',
'73,74,,,,,,75,28,27,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97',
'57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234',
',,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,',
',,,75,312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99',
'98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59',
'60,,,61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,',
',,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75',
'312,318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100',
',101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,',
'61,,,,,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70',
'71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312',
'318,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101',
'109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,',
',,,45,,,,,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72',
'63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103',
'102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110',
',93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,',
',,,,,,233,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83',
'95,96,64,65,,,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104',
'105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64',
'65,,,,68,,66,67,69,30,31,73,74,,,,,,75,28,27,103,102,104,105,,,19,,',
',,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,',
',,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68',
',66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,',
'46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,',
',,,,,,,,,,,,,228,,,234,,,59,60,,,61,,670,,,,45,,,,,,,,,233,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68',
',66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,',
'46,,,107,106,108,97,57,99,98,100,290,101,109,110,,93,94,42,43,41,,,',
',,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,285,,45,,,291,,,,,,233,,,',
',91,288,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65',
',,,68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235',
',,,,,,46,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,42,43,41',
',,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61,,,,,,45,,,,,,,,,233,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,',
'68,,66,67,69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,',
',,,313,,,107,106,108,97,57,99,98,100,,101,109,110,,93,94,,,319,,,,,',
',,,,,,,,,,,,,,936,,,234,,,59,60,,,61,,,,,,,,,,,,,,,,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67',
'69,315,316,73,74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,313,,,107',
'106,108,97,57,99,98,100,,101,109,110,,93,94,,,319,,,,,,,,,,,,,,,,,,',
',942,,,234,,,59,60,,,61,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89',
',,,,82,90,,,,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,315,316,73',
'74,,,,,,75,312,318,103,102,104,105,,,235,,,,,,,313,,,107,106,108,97',
'57,99,98,100,,101,109,110,,93,94,,,319,,,,,,,,,,,,,,,,,,,,936,,,234',
',,59,60,,,61,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,',
',,70,71,72,63,58,83,95,96,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,75',
'28,27,103,102,104,105,,,235,,,,,,,46,,,107,106,108,97,57,99,98,100,290',
'101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,228,,,234,,,59,60,,,61',
',287,,285,,45,,,291,,,,,,233,,,,,91,288,84,85,,86,88,87,89,,,,,82,90',
',,,,,,63,,83,95,96,176,187,177,200,173,193,183,182,203,204,198,181,180',
'175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189,199',
'184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129,126,,128,,',
',,,,,160,161,,157,139,140,141,148,145,147,,,142,143,,,,162,163,149,150',
',,,,,,,,,,,,,154,153,,138,159,156,155,164,151,152,146,144,136,158,137',
',,165,91,,,,,,,,,,,,,,90,176,187,177,200,173,193,183,182,203,204,198',
'181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196',
'189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129,,,128',
',,,,,,,160,161,,157,139,140,141,148,145,147,,,142,143,,,,162,163,149',
'150,,,,,,,,,,,,,,154,153,,138,159,156,155,164,151,152,146,144,136,158',
'137,,,165,91,,,,,,,,,,,,,,90,176,187,177,200,173,193,183,182,203,204',
'198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197',
'196,189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129',
',,128,,,,,,,,160,161,,157,139,140,141,148,145,147,,,142,143,,,,162,163',
'149,150,,,,,,,,,,,,,,154,153,,138,159,156,155,164,151,152,146,144,136',
'158,137,,,165,91,,,,,,,,,,,,,,90,176,187,177,200,173,193,183,182,203',
'204,198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202',
'197,196,189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127',
'129,,,128,,,,,,,,160,161,,157,139,140,141,148,145,147,,,142,143,,,,162',
'163,149,150,,,,,,,,,,,,,,154,153,,138,159,156,155,164,151,152,146,144',
'136,158,137,,,165,91,,,,,,,,,,,,,,90,176,187,177,200,173,193,183,182',
'203,204,198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195',
'202,197,379,378,380,377,172,191,190,,,,,,171,178,169,170,374,375,376',
'372,129,99,98,373,,101,,,,,,160,161,,157,139,140,141,148,145,147,,,142',
'143,,,,162,163,149,150,,,,,,384,,,,,,,,154,153,,138,159,156,155,164',
'151,152,146,144,136,158,137,,,165,176,187,177,200,173,193,183,182,203',
'204,198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202',
'197,196,189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127',
'129,,,128,,,,,,,,160,161,,157,139,140,141,148,145,147,,,142,143,,,,162',
'163,149,150,,,,,,,,,,,,,,154,153,,138,159,156,155,164,151,152,146,144',
'136,158,137,434,438,165,,435,,,,,,,,160,161,,157,139,140,141,148,145',
'147,,,142,143,,,,162,163,149,150,,,,,,269,,,,,,,,154,153,,138,159,156',
'155,164,151,152,146,144,136,158,137,441,445,165,,440,,,,,,,,160,161',
',157,139,140,141,148,145,147,,,142,143,,,,162,163,149,150,,,,,,269,',
',,,,,,154,153,,138,159,156,155,164,151,152,146,144,136,158,137,485,438',
'165,,486,,,,,,,,160,161,,157,139,140,141,148,145,147,,,142,143,,,,162',
'163,149,150,,,,,,,,,,,,,,154,153,,138,159,156,155,164,151,152,146,144',
'136,158,137,651,438,165,,652,,,,,,,,160,161,,157,139,140,141,148,145',
'147,,,142,143,,,,162,163,149,150,,,,,,269,,,,,,,,154,153,,138,159,156',
'155,164,151,152,146,144,136,158,137,653,445,165,,654,,,,,,,,160,161',
',157,139,140,141,148,145,147,,,142,143,,,,162,163,149,150,,,,,,269,',
',,,,,,154,153,,138,159,156,155,164,151,152,146,144,136,158,137,680,438',
'165,,681,,,,,,,,160,161,,157,139,140,141,148,145,147,,,142,143,,,,162',
'163,149,150,,,,,,269,,,,,,,,154,153,,138,159,156,155,164,151,152,146',
'144,136,158,137,683,445,165,,684,,,,,,,,160,161,,157,139,140,141,148',
'145,147,,,142,143,,,,162,163,149,150,,,,,,269,,,,,,,,154,153,,138,159',
'156,155,164,151,152,146,144,136,158,137,651,438,165,,652,,,,,,,,160',
'161,,157,139,140,141,148,145,147,,,142,143,,,,162,163,149,150,,,,,,269',
',,,,,,,154,153,,138,159,156,155,164,151,152,146,144,136,158,137,653',
'445,165,,654,,,,,,,,160,161,,157,139,140,141,148,145,147,,,142,143,',
',,162,163,149,150,,,,,,269,,,,,,,,154,153,,138,159,156,155,164,151,152',
'146,144,136,158,137,732,438,165,,733,,,,,,,,160,161,,157,139,140,141',
'148,145,147,,,142,143,,,,162,163,149,150,,,,,,269,,,,,,,,154,153,,138',
'159,156,155,164,151,152,146,144,136,158,137,734,445,165,,735,,,,,,,',
'160,161,,157,139,140,141,148,145,147,,,142,143,,,,162,163,149,150,,',
',,,269,,,,,,,,154,153,,138,159,156,155,164,151,152,146,144,136,158,137',
'737,445,165,,738,,,,,,,,160,161,,157,139,140,141,148,145,147,,,142,143',
',,,162,163,149,150,,,,,,269,,,,,,,,154,153,,138,159,156,155,164,151',
'152,146,144,136,158,137,485,438,165,,486,,,,,,,,160,161,,157,139,140',
'141,148,145,147,,,142,143,,,,162,163,149,150,,,,,,269,,,,,,,,154,153',
',138,159,156,155,164,151,152,146,144,136,158,137,766,438,165,,767,,',
',,,,,160,161,,157,139,140,141,148,145,147,,,142,143,,,,162,163,149,150',
',,,,,269,,,,,,,,154,153,,138,159,156,155,164,151,152,146,144,136,158',
'137,769,445,165,,768,,,,,,,,160,161,,157,139,140,141,148,145,147,,,142',
'143,,,,162,163,149,150,,,,,,269,,,,,,,,154,153,,138,159,156,155,164',
'151,152,146,144,136,158,137,1007,445,165,,1006,,,,,,,,160,161,,157,139',
'140,141,148,145,147,,,142,143,,,,162,163,149,150,,,,,,269,,,,,,,,154',
'153,,138,159,156,155,164,151,152,146,144,136,158,137,1010,438,165,,1011',
',,,,,,,160,161,,157,139,140,141,148,145,147,,,142,143,,,,162,163,149',
'150,,,,,,269,,,,,,,,154,153,,138,159,156,155,164,151,152,146,144,136',
'158,137,1012,445,165,,1013,,,,,,,,160,161,,157,139,140,141,148,145,147',
',,142,143,,,,162,163,149,150,,,,,,269,,,,,,,,154,153,,138,159,156,155',
'164,151,152,146,144,136,158,137,,559,165,556,555,554,564,557,,559,,556',
'555,554,564,557,567,,,,,,,,567,,559,,556,555,554,564,557,,,,,,562,545',
',567,,,,,562,572,571,575,574,,,,568,572,571,575,574,,,,568,562,,559',
',556,555,554,564,557,572,571,575,574,,,,568,567,,559,,556,555,554,564',
'557,,559,,556,555,554,564,557,567,,,,,562,,,567,,,,,,572,571,575,574',
',,,568,562,,,,,,,,562,572,571,575,574,,,,568,572,571,575,574,,,559,568',
'556,555,554,564,557,,559,,556,555,554,564,557,567,,,,,,,,567,,559,,556',
'555,554,564,557,,,,,,562,,,567,,,,,562,572,571,575,574,,,,568,572,571',
'575,574,,,,568,562,,559,,556,555,554,564,557,572,571,575,574,,,,568',
'567,,559,,556,555,554,564,557,,559,,556,555,554,564,557,567,,,,,562',
',,567,,,,,,,,575,574,,,,568,562,,,,,,,,562,,,575,574,,,,568,572,571',
'575,574,,,559,568,556,555,554,564,557,559,,556,555,554,564,557,559,567',
'556,555,554,564,557,559,567,556,555,554,564,557,,567,,,,,,,567,562,',
',,,,,562,,,,575,574,,562,,568,,575,574,,562,,568,,575,574,,,,568,,575',
'574,,,,568' ]
        racc_action_table = arr = ::Array.new(24698, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'97,450,450,604,604,17,353,97,97,97,1,345,97,97,97,24,97,26,19,391,44',
'44,24,346,97,392,97,97,97,62,363,660,226,7,363,354,97,97,730,97,97,97',
'97,97,886,909,939,940,943,357,675,590,17,912,982,912,44,44,314,19,675',
'10,17,12,697,732,97,97,97,97,97,97,97,97,97,97,97,97,97,97,24,26,97',
'97,97,391,97,97,581,226,97,392,733,97,97,450,97,604,97,13,97,15,97,97',
'26,97,97,97,97,97,1010,97,100,97,1011,353,62,847,660,100,100,100,314',
'1012,100,100,100,97,100,345,97,97,97,97,345,97,100,97,100,100,100,346',
'97,97,354,314,346,680,100,100,1013,100,100,100,100,100,730,1023,357',
'730,590,730,886,909,939,940,943,886,909,939,940,943,982,697,732,734',
'664,982,100,100,100,100,100,100,100,100,100,100,100,100,100,100,581',
'22,100,100,100,581,100,100,1012,733,100,37,681,100,100,40,100,735,100',
'664,100,680,100,100,46,100,100,100,100,100,440,100,111,100,847,1013',
'1010,440,440,440,1011,1010,792,440,440,1011,440,100,734,1012,100,100',
'100,100,1012,100,207,100,690,690,227,680,100,100,680,228,440,440,806',
'440,440,440,440,440,680,230,1013,792,681,372,683,1013,735,1023,14,14',
'372,714,1023,714,714,714,734,714,600,600,440,440,440,440,440,440,440',
'440,440,440,440,440,440,440,231,229,440,440,440,373,440,227,681,38,440',
'681,373,440,41,41,735,615,440,235,440,681,440,440,806,440,440,440,440',
'440,374,440,441,440,372,683,683,374,126,441,441,441,690,126,126,441',
'441,440,441,3,440,440,268,440,3,440,38,441,229,714,344,344,440,440,806',
'361,38,806,441,441,373,441,441,441,441,441,683,806,600,683,282,615,615',
'600,905,386,905,905,905,683,905,615,41,41,283,374,617,419,441,441,441',
'441,441,441,441,441,441,441,441,441,441,441,456,286,441,441,441,361',
'441,319,319,502,441,294,361,441,350,651,294,361,441,350,441,361,441',
'441,39,441,441,441,441,441,652,441,441,441,387,298,375,386,386,386,361',
'388,419,375,299,362,389,441,617,617,441,441,653,441,905,441,301,456',
'617,653,653,653,441,441,653,653,653,302,653,303,361,39,651,502,502,502',
'376,653,653,653,653,39,309,376,312,319,319,652,653,653,502,653,653,653',
'653,653,323,362,387,387,387,375,390,313,362,388,388,388,393,362,389',
'389,389,362,335,702,702,335,653,653,653,653,653,653,653,653,653,653',
'653,653,653,653,362,318,653,653,653,320,653,653,16,376,653,323,377,653',
'653,16,653,324,653,377,653,323,653,653,16,653,653,653,653,653,362,653',
'653,653,390,390,390,378,47,379,393,393,393,462,378,47,379,653,327,434',
'653,653,653,653,47,653,766,653,654,767,789,435,653,653,851,654,654,654',
'333,851,654,654,654,16,654,462,337,377,338,462,462,380,382,463,654,654',
'654,336,380,382,336,340,636,860,654,654,434,654,654,654,654,654,378',
'47,379,225,434,306,435,720,720,351,225,766,306,463,767,789,435,463,463',
'225,352,306,654,654,654,654,654,654,654,654,654,654,654,654,654,654',
'856,636,654,654,654,856,654,654,380,382,654,636,860,654,654,356,654',
'358,654,367,654,339,654,654,339,654,654,654,654,654,768,654,225,654',
'306,994,994,768,768,768,402,408,696,768,768,696,768,654,470,411,654',
'654,654,654,413,654,79,654,737,416,420,430,654,654,470,470,768,768,79',
'768,768,768,768,768,947,307,432,947,79,308,470,433,307,442,470,470,308',
'470,470,452,464,307,465,466,467,308,768,768,768,768,768,768,768,768',
'768,768,768,768,768,768,737,310,768,768,768,489,768,737,310,493,768',
'509,737,768,510,513,737,310,768,515,768,520,768,768,523,768,768,768',
'768,768,307,768,769,768,308,737,532,533,534,769,769,769,699,535,547',
'769,769,768,769,548,768,768,699,768,325,768,550,769,551,552,561,325',
'768,768,569,737,310,573,769,769,325,769,769,769,769,769,838,355,838',
'838,838,576,838,578,355,699,699,582,583,584,699,608,608,355,585,608',
'608,608,769,769,769,769,769,769,769,769,769,769,769,769,769,769,602',
'838,769,769,769,365,769,325,418,612,769,620,365,769,622,418,628,637',
'769,642,769,365,769,769,418,769,769,769,769,769,355,769,769,769,798',
'647,798,798,798,798,798,519,6,6,6,6,6,769,519,798,769,769,27,769,655',
'769,656,519,657,27,27,27,769,769,27,27,27,659,27,663,365,798,665,418',
'667,477,669,27,27,27,798,798,798,798,677,679,682,798,27,27,685,27,27',
'27,27,27,906,686,906,906,906,593,906,689,691,698,519,477,593,713,715',
'477,477,798,477,477,722,593,27,27,27,27,27,27,27,27,27,27,27,27,27,27',
'728,906,27,27,27,731,740,27,744,27,27,763,765,27,27,774,27,795,27,805',
'27,809,27,27,812,27,27,27,27,27,28,27,27,27,593,813,820,28,28,28,821',
'822,28,28,28,935,28,27,826,827,27,27,935,27,829,27,28,28,830,832,835',
'935,27,837,840,843,28,28,848,28,28,28,28,28,850,854,855,684,858,738',
'859,868,869,871,684,872,738,873,875,684,876,738,877,684,907,738,28,28',
'28,28,28,28,28,28,28,28,28,28,28,28,935,916,28,28,28,920,933,28,936',
'28,28,942,945,28,28,946,28,951,28,952,28,953,28,28,954,28,28,28,28,28',
'57,28,684,28,738,955,957,57,57,57,965,968,57,57,57,941,57,28,969,970',
'28,28,941,28,971,28,57,57,57,973,978,941,28,993,995,1006,57,57,1007',
'57,57,57,57,57,891,975,891,891,891,1009,891,562,975,562,562,562,986',
'562,986,986,986,975,986,1015,1016,1019,57,57,57,57,57,57,57,57,57,57',
'57,57,57,57,941,923,57,57,57,1020,1021,57,562,1022,57,923,1030,57,57',
',57,562,57,,57,,57,57,,57,57,57,57,57,975,57,,57,711,,711,711,711,,711',
',,,923,923,,57,,923,57,57,57,57,,57,436,57,,,,,57,436,436,436,,,436',
'436,436,711,436,836,,836,836,836,,836,711,436,436,436,956,,956,956,956',
',956,,436,436,,436,436,436,436,436,958,,958,958,958,992,958,992,992',
'992,836,992,297,297,297,297,297,,,836,,956,436,436,436,436,436,436,436',
'436,436,436,436,436,436,436,,958,436,436,436,,992,436,,436,436,,,436',
'436,,436,,436,,436,,436,436,,436,436,436,436,436,,436,436,436,707,,707',
'707,707,707,707,332,332,332,332,332,,436,,707,436,436,445,436,,436,',
',,445,445,445,436,,445,445,445,,445,482,,707,507,507,507,507,507,445',
'445,445,445,,707,707,,482,482,707,445,445,,445,445,445,445,445,,,,,',
'482,,482,,482,482,,482,482,,,482,,482,,,,445,445,445,445,445,445,445',
'445,445,445,445,445,445,445,,,445,445,445,478,,445,,,445,,,445,445,',
'445,,445,,445,,445,445,,445,445,445,445,445,,445,445,445,,,,478,,,,478',
'478,,478,478,,445,,,445,445,445,445,,445,446,445,,,,,445,446,446,446',
',,446,446,446,529,446,,,,,,,,,446,446,446,446,,,529,529,,,,446,446,',
'446,446,446,446,446,,,,529,,529,,529,529,,529,529,,,529,,529,,,,,,446',
'446,446,446,446,446,446,446,446,446,446,446,446,446,,,446,446,446,,',
'446,,,446,,,446,446,,446,,446,,446,,446,446,,446,446,446,446,446,,446',
'446,446,,,,,,,,,,,,,,446,,,446,446,446,446,,446,484,446,,,,,446,484',
'484,484,,,484,484,484,468,484,,,,,,,,,484,484,,,,,468,468,,,,484,484',
',484,484,484,484,484,,,,468,,468,,468,468,,468,468,,,,21,21,21,21,21',
'21,21,21,21,21,21,,21,21,,,21,21,484,,,,,,,484,,,,,484,484,21,,21,,21',
'21,,21,21,21,21,21,,21,,,,,,,,484,484,,,,,,,,,,,21,,,484,,,484,,,,,484',
'0,0,0,0,0,0,484,,,0,0,,,,0,,0,0,0,0,0,0,0,,,,,,0,0,0,0,0,0,0,,,0,,,',
',423,0,0,0,0,0,0,0,0,0,0,0,0,,0,0,0,,0,0,0,0,0,423,423,423,423,423,423',
'423,423,423,423,423,,423,423,,,423,423,,0,,,0,,,0,0,,,0,,0,423,,423',
'0,423,423,,423,423,423,423,423,0,423,,,,0,0,0,0,,0,0,0,0,,,,,0,0,,423',
',423,,,0,,0,0,0,33,33,33,33,33,33,,,,33,33,,,,33,,33,33,33,33,33,33',
'33,,,,,,33,33,33,33,33,33,33,,,33,,,,,429,33,33,33,33,33,33,33,33,33',
'33,33,33,,33,33,33,,33,33,33,33,33,429,429,429,429,429,429,429,429,429',
'429,429,,429,429,,,429,429,,33,,,33,,,33,33,,,33,,33,429,,429,33,429',
'429,,429,429,429,429,429,33,429,,,,33,33,33,33,,33,33,33,33,,,,,33,33',
',429,,,,,33,,33,33,33,124,124,124,124,124,124,,,,124,124,,,,124,,124',
'124,124,124,124,124,124,,,,,,124,124,124,124,124,124,124,,,124,,,,,',
'124,124,124,124,124,124,124,124,124,124,124,124,,124,124,124,,124,124',
'124,124,124,280,280,280,280,280,280,280,280,280,280,280,,280,280,,,280',
'280,,124,,,124,,,124,124,,,124,,124,280,,280,124,280,280,,280,280,280',
'280,280,124,280,,,,124,124,124,124,,124,124,124,124,,,,,124,124,,280',
',,,,124,,124,124,124,209,209,209,209,209,209,,,,209,209,,,,209,,209',
'209,209,209,209,209,209,,,,,,209,209,209,209,209,209,209,,,209,,,,,',
'209,209,209,209,209,209,209,209,209,209,209,209,,209,209,209,,209,209',
'209,209,209,481,481,481,481,481,481,481,481,481,481,481,,481,481,,,481',
'481,,209,,,209,,,209,209,,,209,,209,481,,481,209,481,481,,481,481,481',
'481,481,209,481,,,,209,209,209,209,,209,209,209,209,,,,,209,209,481',
'481,,,,,209,,209,209,209,234,234,234,234,234,234,,,,234,234,,,,234,',
'234,234,234,234,234,234,234,,,,,,234,234,234,234,234,234,234,,,234,',
',,,,234,234,234,234,234,234,234,234,234,234,234,234,,234,234,234,,234',
'234,234,234,234,530,530,530,530,530,530,530,530,530,530,530,,530,530',
',,530,530,,234,,,234,,,234,234,,,234,,234,530,,530,234,530,530,,530',
'530,530,530,530,234,530,,,,234,234,234,234,,234,234,234,234,,,,,234',
'234,,530,,,,,234,,234,234,234,300,300,300,300,300,300,,,,300,300,,,',
'300,,300,300,300,300,300,300,300,,,,,,300,300,300,300,300,300,300,,',
'300,,,,,,300,300,300,300,300,300,300,300,300,300,300,300,,300,300,300',
',300,300,300,300,300,771,771,771,771,771,771,771,771,771,771,771,,771',
'771,,,771,771,,300,,,300,,,300,300,,,300,,300,771,,771,300,771,771,',
'771,771,771,771,771,300,771,,,,300,300,300,300,,300,300,300,300,,,,',
'300,300,,771,,,,,300,,300,300,300,305,305,305,305,305,305,,,,305,305',
',,,305,,305,305,305,305,305,305,305,,,,,,305,305,305,305,305,305,305',
',,305,,,,,,305,305,305,305,305,305,305,305,305,305,305,305,,305,305',
'305,,305,305,305,305,305,865,865,865,865,865,865,865,865,865,865,865',
',865,865,,,865,865,,305,,,305,,,305,305,,,305,,305,865,,865,305,865',
'865,,865,865,865,865,865,305,865,,,,305,305,305,305,,305,305,305,305',
',,,,305,305,,865,,,,,305,,305,305,305,331,331,331,331,331,331,,,,331',
'331,,,,331,,331,331,331,331,331,331,331,,,,,,331,331,331,331,331,331',
'331,,,331,,,,,,331,331,331,331,331,331,331,331,331,331,331,331,,331',
'331,331,,331,331,331,331,331,460,460,460,460,460,460,460,460,460,460',
'460,,460,460,,,460,460,,331,,,331,,,331,331,,,331,,331,460,,460,331',
'460,460,,460,460,460,460,460,331,460,,,,331,331,331,331,,331,331,331',
'331,,,,,331,331,,,,,,,331,,331,331,331,348,348,348,348,348,348,,,,348',
'348,,,,348,,348,348,348,348,348,348,348,,,,,,348,348,348,348,348,348',
'348,,,348,,,,,,348,348,348,348,348,348,348,348,348,348,348,348,,348',
'348,348,,348,348,348,348,348,461,461,461,461,461,461,461,461,461,461',
'461,,461,461,,,461,461,,348,,,348,,,348,348,,,348,,348,461,,461,348',
'461,461,,461,461,461,461,461,348,461,,,,348,348,348,348,,348,348,348',
'348,,,,,348,348,,,,,,,348,,348,348,348,349,349,349,349,349,349,,,,349',
'349,,,,349,,349,349,349,349,349,349,349,,,,,,349,349,349,349,349,349',
'349,,,349,,,,,,349,349,349,349,349,349,349,349,349,349,349,349,,349',
'349,349,,349,349,349,349,349,471,471,471,471,471,471,471,,,471,471,',
',,,,471,471,,349,,,349,,,349,349,,,349,,349,471,,471,349,471,471,,471',
'471,471,471,471,349,471,,,,349,349,349,349,,349,349,349,349,,,,,349',
'349,,,,,,,349,,349,349,349,577,577,577,577,577,577,,,,577,577,,,,577',
',577,577,577,577,577,577,577,,,,,,577,577,577,577,577,577,577,,,577',
',,,,,577,577,577,577,577,577,577,577,577,577,577,577,,577,577,577,,577',
'577,577,577,577,472,472,472,472,472,472,472,,,472,472,,,,,,472,472,',
'577,,,577,,,577,577,,,577,,577,472,,472,577,472,472,,472,472,472,472',
'472,577,472,,,,577,577,577,577,,577,577,577,577,,,,,577,577,,,,,,,577',
',577,577,577,580,580,580,580,580,580,,,,580,580,,,,580,,580,580,580',
'580,580,580,580,,,,,,580,580,580,580,580,580,580,,,580,,,,,,580,580',
'580,580,580,580,580,580,580,580,580,580,,580,580,580,,580,580,580,580',
'580,473,473,473,473,473,473,473,,,473,473,,,,,,473,473,,580,,,580,,',
'580,580,,,580,,580,473,,473,580,473,473,,473,473,473,473,473,580,473',
',,,580,580,580,580,,580,580,580,580,,,,,580,580,,,,,,,580,,580,580,580',
'601,601,601,601,601,601,,,,601,601,,,,601,,601,601,601,601,601,601,601',
',,,,,601,601,601,601,601,601,601,,,601,,,,,,601,601,601,601,601,601',
'601,601,601,601,601,601,,601,601,601,,601,601,601,601,601,474,474,474',
'474,474,474,474,,,474,474,,,,,,474,474,,601,,,601,,,601,601,,,601,,601',
'474,,474,601,474,474,,474,474,474,474,474,601,474,,,,601,601,601,601',
',601,601,601,601,,,,,601,601,,,,,,,601,,601,601,601,736,736,736,736',
'736,736,,,,736,736,,,,736,,736,736,736,736,736,736,736,,,,,,736,736',
'736,736,736,736,736,,,736,,,,,,736,736,736,736,736,736,736,736,736,736',
'736,736,,736,736,736,,736,736,736,736,736,475,475,475,475,475,475,475',
',,475,475,,,,,,475,475,,736,,,736,,,736,736,,,736,,736,475,,475,736',
'475,475,,475,475,475,475,475,736,475,,,,736,736,736,736,,736,736,736',
'736,,,,,736,736,,,,,,,736,,736,736,736,741,741,741,741,741,741,,,,741',
'741,,,,741,,741,741,741,741,741,741,741,,,,,,741,741,741,741,741,741',
'741,,,741,,,,,,741,741,741,741,741,741,741,741,741,741,741,741,,741',
'741,741,,741,741,741,741,741,476,476,476,476,476,476,476,,,476,476,',
',,,,476,476,,741,,,741,,,741,741,,,741,,741,476,,476,741,476,476,,476',
'476,476,476,476,741,476,,,,741,741,741,741,,741,741,741,741,,,,,741',
'741,,,,,,,741,,741,741,741,745,745,745,745,745,745,,,,745,745,,,,745',
',745,745,745,745,745,745,745,,,,,,745,745,745,745,745,745,745,,,745',
',,,,,745,745,745,745,745,745,745,745,745,745,745,745,,745,745,745,,745',
'745,745,745,745,479,479,479,479,479,479,479,,,479,479,,,,,,479,479,',
'745,,,745,,,745,745,,,745,,745,479,,479,745,479,479,,479,479,479,479',
'479,745,479,,,,745,745,745,745,,745,745,745,745,,,,,745,745,,,,,,,745',
',745,745,745,755,755,755,755,755,755,,,,755,755,,,,755,,755,755,755',
'755,755,755,755,,,,,,755,755,755,755,755,755,755,,,755,,,,,,755,755',
'755,755,755,755,755,755,755,755,755,755,,755,755,755,,755,755,755,755',
'755,480,480,480,480,480,480,480,480,,480,480,,,,,,480,480,,755,,,755',
',,755,755,,,755,,755,480,,480,755,480,480,,480,480,480,480,480,755,480',
',,,755,755,755,755,,755,755,755,755,,,,,755,755,,,,,,,755,,755,755,755',
'800,800,800,800,800,800,,,,800,800,,,,800,,800,800,800,800,800,800,800',
',,,,,800,800,800,800,800,800,800,,,800,,,,,,800,800,800,800,800,800',
'800,800,800,800,800,800,,800,800,800,,800,800,800,800,800,469,,,,,,',
',,,,,,,,,469,469,,800,,,800,,,800,800,,,800,,800,469,,469,800,469,469',
',469,469,,,,800,,,,,800,800,800,800,,800,800,800,800,,,,,800,800,,,',
',,,800,,800,800,800,811,811,811,811,811,811,,,,811,811,,,,811,,811,811',
'811,811,811,811,811,,,,,,811,811,811,811,811,811,811,,,811,,,,,,811',
'811,811,811,811,811,811,811,811,811,811,811,,811,811,811,,811,811,811',
'811,811,,,,,,,,,,,,,,,,,,,,811,,,811,,,811,811,,,811,,811,,,,811,,,',
',,,,,811,,,,,811,811,811,811,,811,811,811,811,,,,,811,811,,,,,,,811',
',811,811,811,846,846,846,846,846,846,,,,846,846,,,,846,,846,846,846',
'846,846,846,846,,,,,,846,846,846,846,846,846,846,,,846,,,,,,846,846',
'846,846,846,846,846,846,846,846,846,846,,846,846,846,,846,846,846,846',
'846,,,,,,,,,,,,,,,,,,,,846,,,846,,,846,846,,,846,,846,,,,846,,,,,,,',
',846,,,,,846,846,846,846,,846,846,846,846,,,,,846,846,,,,,,,846,,846',
'846,846,852,852,852,852,852,852,,,,852,852,,,,852,,852,852,852,852,852',
'852,852,,,,,,852,852,852,852,852,852,852,,,852,,,,,,852,852,852,852',
'852,852,852,852,852,852,852,852,,852,852,852,,852,852,852,852,852,,',
',,,,,,,,,,,,,,,,,852,,,852,,,852,852,,,852,,852,,,,852,,,,,,,,,852,',
',,,852,852,852,852,,852,852,852,852,,,,,852,852,,,,,,,852,,852,852,852',
'866,866,866,866,866,866,,,,866,866,,,,866,,866,866,866,866,866,866,866',
',,,,,866,866,866,866,866,866,866,,,866,,,,,,866,866,866,866,866,866',
'866,866,866,866,866,866,,866,866,866,,866,866,866,866,866,,,,,,,,,,',
',,,,,,,,,866,,,866,,,866,866,,,866,,866,,,,866,,,,,,,,,866,,,,,866,866',
'866,866,,866,866,866,866,,,,,866,866,,,,,,,866,,866,866,866,883,883',
'883,883,883,883,,,,883,883,,,,883,,883,883,883,883,883,883,883,,,,,',
'883,883,883,883,883,883,883,,,883,,,,,,883,883,883,883,883,883,883,883',
'883,883,883,883,,883,883,883,,883,883,883,883,883,,,,,,,,,,,,,,,,,,',
',883,,,883,,,883,883,,,883,,883,,,,883,,,,,,,,,883,,,,,883,883,883,883',
',883,883,883,883,,,,,883,883,,,,,,,883,,883,883,883,889,889,889,889',
'889,889,,,,889,889,,,,889,,889,889,889,889,889,889,889,,,,,,889,889',
'889,889,889,889,889,,,889,,,,,,889,889,889,889,889,889,889,889,889,889',
'889,889,,889,889,889,,889,889,889,889,889,,,,,,,,,,,,,,,,,,,,889,,,889',
',,889,889,,,889,,889,,,,889,,,,,,,,,889,,,,,889,889,889,889,,889,889',
'889,889,,,,,889,889,,,,,,,889,,889,889,889,890,890,890,890,890,890,',
',,890,890,,,,890,,890,890,890,890,890,890,890,,,,,,890,890,890,890,890',
'890,890,,,890,,,,,,890,890,890,890,890,890,890,890,890,890,890,890,',
'890,890,890,,890,890,890,890,890,,,,,,,,,,,,,,,,,,,,890,,,890,,,890',
'890,,,890,,890,,,,890,,,,,,,,,890,,,,,890,890,890,890,,890,890,890,890',
',,,,890,890,,,,,,,890,,890,890,890,938,938,938,938,938,938,,,,938,938',
',,,938,,938,938,938,938,938,938,938,,,,,,938,938,938,938,938,938,938',
',,938,,,,,,938,938,938,938,938,938,938,938,938,938,938,938,,938,938',
'938,,938,938,938,938,938,,,,,,,,,,,,,,,,,,,,938,,,938,,,938,938,,,938',
',938,,,,938,,,,,,,,,938,,,,,938,938,938,938,,938,938,938,938,,,,,938',
'938,,,,,,,938,,938,938,938,959,959,959,959,959,959,,,,959,959,,,,959',
',959,959,959,959,959,959,959,,,,,,959,959,959,959,959,959,959,,,959',
',,,,,959,959,959,959,959,959,959,959,959,959,959,959,,959,959,959,,959',
'959,959,959,959,,,,,,,,,,,,,,,,,,,,959,,,959,,,959,959,,,959,,959,,',
',959,,,,,,,,,959,,,,,959,959,959,959,,959,959,959,959,,,,,959,959,,',
',,,,959,,959,959,959,964,964,964,964,964,964,,,,964,964,,,,964,,964',
'964,964,964,964,964,964,,,,,,964,964,964,964,964,964,964,,,964,,,,,',
'964,964,964,964,964,964,964,964,964,964,964,964,,964,964,964,,964,964',
'964,964,964,,,,,,,,,,,,,,,,,,,,964,,,964,,,964,964,,,964,,964,,,,964',
',,,,,,,,964,,,,,964,964,964,964,,964,964,964,964,,,,,964,964,,,,,,,964',
',964,964,964,5,5,5,5,5,,,,5,5,,,,5,,5,5,5,5,5,5,5,,,,,,5,5,5,5,5,5,5',
',,5,,,,,,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5,5,5,5,,,,,,,,,,,,,,,,,',
',,5,,,5,,,5,5,,,5,,5,,,,5,,,,,,,,,5,,,,,5,5,5,5,,5,5,5,5,,,,,5,5,,,',
'20,20,20,5,20,5,5,5,20,20,,,,20,,20,20,20,20,20,20,20,,,,,,20,20,20',
'20,20,20,20,,,20,,,,,,,20,,,20,20,20,20,20,20,20,20,,20,20,20,,20,20',
'20,20,20,,,,,,,,,,,,,,,,,,,,20,,,20,,,20,20,,,20,,,,,,20,,,,,,,,,20',
',,,,20,20,20,20,,20,20,20,20,,,,,20,20,,,,29,29,29,20,29,20,20,20,29',
'29,,,,29,,29,29,29,29,29,29,29,,,,,,29,29,29,29,29,29,29,,,29,,,,,,',
'29,,,29,29,29,29,29,29,29,29,29,29,29,29,,29,29,29,29,29,,,,,,,,,,,',
',,,,,,,,29,,,29,,,29,29,,,29,,29,,29,,29,,,29,,,,,,29,,,,,29,29,29,29',
',29,29,29,29,,,,,29,29,,,,30,30,30,29,30,29,29,29,30,30,,,,30,,30,30',
'30,30,30,30,30,,,,,,30,30,30,30,30,30,30,,,30,,,,,,,30,,,30,30,30,30',
'30,30,30,30,30,30,30,30,,30,30,30,30,30,,,,,,,,,,,,,,,,,,,,30,,,30,',
',30,30,,,30,,30,,30,,30,,,30,,,,,,30,,,,,30,30,30,30,,30,30,30,30,,',
',,30,30,,,,31,31,31,30,31,30,30,30,31,31,,,,31,,31,31,31,31,31,31,31',
',,,,,31,31,31,31,31,31,31,,,31,,,,,,,31,,,31,31,31,31,31,31,31,31,31',
'31,31,31,,31,31,31,31,31,,,,,,,,,,,,,,,,,,,,31,,,31,,,31,31,,,31,,31',
',31,,31,,,31,,,,,,31,,,,,31,31,31,31,,31,31,31,31,,,,,31,31,,,,34,34',
'34,31,34,31,31,31,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34',
'34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,,34,34,34,,34,34,,',
'34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,,,,,,,,,,,,,,,,,34,34',
'34,34,,34,34,34,34,,,,,34,34,,,,35,35,35,34,35,34,34,34,35,35,,,,35',
',35,35,35,35,35,35,35,,,,,,35,35,35,35,35,35,35,,,35,,,,,,,35,,,35,35',
'35,35,35,35,35,35,,35,35,35,,35,35,,,35,,,,,,,,,,,,,,,,,,,,35,,,35,',
',35,35,,,35,,,896,,896,896,896,896,896,,,,,,,,,896,,35,35,35,35,,35',
'35,35,35,,,,,35,35,,,,35,,896,35,,35,35,35,42,42,42,,42,896,896,,42',
'42,896,,,42,,42,42,42,42,42,42,42,,,,,,42,42,42,42,42,42,42,,,42,,,',
',,,42,,,42,42,42,42,42,42,42,42,,42,42,42,,42,42,42,42,42,,,,,,,,,,',
',,,,,,,,,42,,,42,,,42,42,,,42,,,,,,42,,,,,,,,,42,,,,,42,42,42,42,,42',
'42,42,42,,,,,42,42,,,,43,43,43,42,43,42,42,42,43,43,,,,43,,43,43,43',
'43,43,43,43,,,,,,43,43,43,43,43,43,43,,,43,,,,,,,43,,,43,43,43,43,43',
'43,43,43,,43,43,43,,43,43,43,43,43,,,,,,,,,,,,,,,,,,,,43,,,43,,,43,43',
',,43,,,,,,43,,,,,,,,,43,,,,,43,43,43,43,,43,43,43,43,,,,,43,43,,,,45',
'45,45,43,45,43,43,43,45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45,45',
'45,45,45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45,45,,45,45,45,,45,45',
'45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,,45',
',,,,45,45,45,45,,45,45,45,45,,,,,45,45,,,,,,,45,,45,45,45,59,59,59,59',
'59,,,,59,59,,,,59,,59,59,59,59,59,59,59,,,,,,59,59,59,59,59,59,59,,',
'59,,,,,,59,59,,59,59,59,59,59,59,59,59,59,,59,59,59,,59,59,59,59,59',
',,,,,,,,,,,,,,,,,,,59,,,59,,,59,59,,,59,,59,,,,59,,,,,,,,,59,,,,,59',
'59,59,59,,59,59,59,59,,,,,59,59,,,,60,60,60,59,60,59,59,59,60,60,,,',
'60,,60,60,60,60,60,60,60,,,,,,60,60,60,60,60,60,60,,,60,,,,,,,60,,,60',
'60,60,60,60,60,60,60,60,60,60,60,,60,60,60,60,60,,,,,,,,,,,,,,,,,,,',
'60,,,60,,,60,60,,,60,,60,,,,60,,,60,,,,,,60,,,,,60,60,60,60,,60,60,60',
'60,,,,,60,60,,,,61,61,61,60,61,60,60,60,61,61,,,,61,,61,61,61,61,61',
'61,61,,,,,,61,61,61,61,61,61,61,,,61,,,,,,,61,,,61,61,61,61,61,61,61',
'61,61,61,61,61,,61,61,61,61,61,,,,,,,,,,,,,,,,,,,,61,,,61,,,61,61,,',
'61,,,,,,61,,,61,,,,,,61,,,,,61,61,61,61,,61,61,61,61,,,,,61,61,,,,64',
'64,64,61,64,61,61,61,64,64,,,,64,,64,64,64,64,64,64,64,,,,,,64,64,64',
'64,64,64,64,,,64,,,,,,,64,,,64,64,64,64,64,64,64,64,,64,64,64,,64,64',
'64,64,64,,,,,,,,,,,,,,,,,,,,64,,,64,,,64,64,,,64,,,,,,64,,,,,,,,,64',
',,,,64,64,64,64,,64,64,64,64,,,,,64,64,,,,65,65,65,64,65,64,64,64,65',
'65,,,,65,,65,65,65,65,65,65,65,,,,,,65,65,65,65,65,65,65,,,65,,,,,,',
'65,,,65,65,65,65,65,65,65,65,,65,65,65,,65,65,65,65,65,,,,,,,,,,,,,',
',,,,,,65,,,65,,,65,65,,,65,,,,,,65,,,,,,,,,65,,,,,65,65,65,65,,65,65',
'65,65,,,,,65,65,,,,68,68,68,65,68,65,65,65,68,68,,,,68,,68,68,68,68',
'68,68,68,,,,,,68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68,68,68,68,68',
'68,68,,68,68,68,,68,68,68,68,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,',
',68,,,,,,68,,,,,,,,,68,,,,,68,68,68,68,,68,68,68,68,,,,,68,68,68,,,',
',68,68,,68,68,68,69,69,69,,69,,,,69,69,,,,69,,69,69,69,69,69,69,69,',
',,,,69,69,69,69,69,69,69,,,69,,,,,,,69,,,69,69,69,69,69,69,69,69,,69',
'69,69,,69,69,,,69,,,,,,,,,,,,,,,,,,,,69,,,69,,,69,69,,,69,,69,,,,,,',
',,,,,,,,,,,69,69,69,69,,69,69,69,69,,,,,69,69,,,,70,70,70,69,70,69,69',
'69,70,70,,,,70,,70,70,70,70,70,70,70,,,,,,70,70,70,70,70,70,70,,,70',
',,,,,,70,,,70,70,70,70,70,70,70,70,,70,70,70,,70,70,,,70,,,,,,,,,,,',
',,,,,70,,,70,,,70,,,70,70,,,70,,,,,,,,,,,,,,,,,,,,70,70,70,70,,70,70',
'70,70,,,,,70,70,,,,71,71,71,70,71,70,70,70,71,71,,,,71,,71,71,71,71',
'71,71,71,,,,,,71,71,71,71,71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71',
'71,71,,71,71,71,,71,71,,,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71',
',,898,,898,898,898,898,898,,,,,,,,,898,,71,71,71,71,,71,71,71,71,,,',
',71,71,,,,,,898,71,,71,71,71,113,113,113,113,113,898,898,,113,113,898',
',,113,,113,113,113,113,113,113,113,,,,,,113,113,113,113,113,113,113',
',,113,,,,,,113,113,113,113,113,113,113,113,113,113,113,113,,113,113',
'113,,113,113,113,113,113,,,,,,,,,,,,,,,,,,,,113,,,113,,,113,113,,,113',
',113,,,,113,,,,,,,,,113,,,,,113,113,113,113,,113,113,113,113,,,,,113',
'113,,,,,,113,113,,113,113,113,118,118,118,,118,,,,118,118,,,,118,,118',
'118,118,118,118,118,118,,,,,,118,118,118,118,118,118,118,,,118,,,,,',
',118,,,118,118,118,118,118,118,118,118,,118,118,118,,118,118,118,118',
'118,,,,,,,,,,,,,,,,,,,,118,,,118,,,118,118,,,118,,,,,,118,,,,,,,,,118',
',,,,118,118,118,118,,118,118,118,118,,,,,118,118,,,,119,119,119,118',
'119,118,118,118,119,119,,,,119,,119,119,119,119,119,119,119,,,,,,119',
'119,119,119,119,119,119,,,119,,,,,,,119,,,119,119,119,119,119,119,119',
'119,,119,119,119,,119,119,119,119,119,,,,,,,,,,,,,,,,,,,,119,,,119,',
',119,119,,,119,,,,,,119,,,,,,,,,119,,,,,119,119,119,119,,119,119,119',
'119,,,,,119,119,,,,120,120,120,119,120,119,119,119,120,120,,,,120,,120',
'120,120,120,120,120,120,,,,,,120,120,120,120,120,120,120,,,120,,,,,',
',120,,,120,120,120,120,120,120,120,120,,120,120,120,,120,120,120,120',
'120,,,,,,,,,,,,,,,,,,,,120,,,120,,,120,120,,,120,,,,,,120,,,,,,,,,120',
',,,,120,120,120,120,,120,120,120,120,,,,,120,120,,,,121,121,121,120',
'121,120,120,120,121,121,,,,121,,121,121,121,121,121,121,121,,,,,,121',
'121,121,121,121,121,121,,,121,,,,,,,121,,,121,121,121,121,121,121,121',
'121,,121,121,121,,121,121,121,121,121,,,,,,,,,,,,,,,,,,,,121,,,121,',
',121,121,,,121,,,,,,121,,,,,,,,,121,,,,,121,121,121,121,,121,121,121',
'121,,,,,121,121,,,,,,,121,,121,121,121,122,122,122,122,122,,,,122,122',
',,,122,,122,122,122,122,122,122,122,,,,,,122,122,122,122,122,122,122',
',,122,,,,,,122,122,,122,122,122,122,122,122,122,122,122,,122,122,122',
',122,122,122,122,122,,,,,,,,,,,,,,,,,,,,122,,,122,,,122,122,,,122,,122',
',,,122,,,,,,,,,122,,,,,122,122,122,122,,122,122,122,122,,,,,122,122',
',,,210,210,210,122,210,122,122,122,210,210,,,,210,,210,210,210,210,210',
'210,210,,,,,,210,210,210,210,210,210,210,,,210,,,,,,,210,,,210,210,210',
'210,210,210,210,210,,210,210,210,,210,210,210,210,210,,,,,,,,,,,,,,',
',,,,,210,,,210,,,210,210,,,210,,210,,,,210,,,,,,,,,210,,,,,210,210,210',
'210,,210,210,210,210,,,,,210,210,,,,211,211,211,210,211,210,210,210',
'211,211,,,,211,,211,211,211,211,211,211,211,,,,,,211,211,211,211,211',
'211,211,,,211,,,,,,,211,,,211,211,211,211,211,211,211,211,,211,211,211',
',211,211,211,211,211,,,,,,,,,,,,,,,,,,,,211,,,211,,,211,211,,,211,,211',
',,,211,,,,,,,,,211,,,,,211,211,211,211,,211,211,211,211,,,,,211,211',
',,,212,212,212,211,212,211,211,211,212,212,,,,212,,212,212,212,212,212',
'212,212,,,,,,212,212,212,212,212,212,212,,,212,,,,,,,212,,,212,212,212',
'212,212,212,212,212,,212,212,212,,212,212,212,212,212,,,,,,,,,,,,,,',
',,,,,212,,,212,,,212,212,,,212,,,,,,212,,,,,,,,,212,,,,,212,212,212',
'212,,212,212,212,212,,,,,212,212,,,,213,213,213,212,213,212,212,212',
'213,213,,,,213,,213,213,213,213,213,213,213,,,,,,213,213,213,213,213',
'213,213,,,213,,,,,,,213,,,213,213,213,213,213,213,213,213,,213,213,213',
',213,213,213,213,213,,,,,,,,,,,,,,,,,,,,213,,,213,,,213,213,,,213,,',
',,,213,,,,,,,,,213,,,,,213,213,213,213,,213,213,213,213,,,,,213,213',
',,,214,214,214,213,214,213,213,213,214,214,,,,214,,214,214,214,214,214',
'214,214,,,,,,214,214,214,214,214,214,214,,,214,,,,,,,214,,,214,214,214',
'214,214,214,214,214,,214,214,214,,214,214,214,214,214,,,,,,,,,,,,,,',
',,,,,214,,,214,,,214,214,,,214,,,,,,214,,,,,,,,,214,,,,,214,214,214',
'214,,214,214,214,214,,,,,214,214,,,,215,215,215,214,215,214,214,214',
'215,215,,,,215,,215,215,215,215,215,215,215,,,,,,215,215,215,215,215',
'215,215,,,215,,,,,,,215,,,215,215,215,215,215,215,215,215,215,215,215',
'215,,215,215,215,215,215,,,,,,,,,,,,,,,,,,,,215,,,215,,,215,215,,,215',
',215,,215,,215,,,215,,,,,,215,,,,,215,215,215,215,,215,215,215,215,',
',,,215,215,,,,220,220,220,215,220,215,215,215,220,220,,,,220,,220,220',
'220,220,220,220,220,,,,,,220,220,220,220,220,220,220,,,220,,,,,,,220',
',,220,220,220,220,220,220,220,220,,220,220,220,,220,220,220,220,220',
',,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,,220,,,,,,220,,,,,,,,,220,,',
',,220,220,220,220,,220,220,220,220,,,,,220,220,,,,221,221,221,220,221',
'220,220,220,221,221,,,,221,,221,221,221,221,221,221,221,,,,,,221,221',
'221,221,221,221,221,,,221,,,,,,,221,,,221,221,221,221,221,221,221,221',
',221,221,221,,221,221,221,221,221,,,,,,,,,,,,,,,,,,,,221,,,221,,,221',
'221,,,221,,,,,,221,,,,,,,,,221,,,,,221,221,221,221,,221,221,221,221',
',,,,221,221,,,,222,222,222,221,222,221,221,221,222,222,,,,222,,222,222',
'222,222,222,222,222,,,,,,222,222,222,222,222,222,222,,,222,,,,,,,222',
',,222,222,222,222,222,222,222,222,,222,222,222,,222,222,222,222,222',
',,,,,,,,,,,,,,,,,,,222,,,222,,,222,222,,,222,,,,,,222,,,,,,,,,222,,',
',,222,222,222,222,,222,222,222,222,,,,,222,222,222,,,233,233,233,222',
'233,222,222,222,233,233,,,,233,,233,233,233,233,233,233,233,,,,,,233',
'233,233,233,233,233,233,,,233,,,,,,,233,,,233,233,233,233,233,233,233',
'233,,233,233,233,,233,233,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,',
',233,233,,,233,,,,,,233,,,,,,,,,233,,,,,233,233,233,233,,233,233,233',
'233,,,,,233,233,,,,236,236,236,233,236,233,233,233,236,236,,,,236,,236',
'236,236,236,236,236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,',
',236,,,236,236,236,236,236,236,236,236,,236,236,236,,236,236,236,236',
'236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,,236',
',,,,236,236,236,236,,236,236,236,236,,,,,236,236,,,,237,237,237,236',
'237,236,236,236,237,237,,,,237,,237,237,237,237,237,237,237,,,,,,237',
'237,237,237,237,237,237,,,237,,,,,,,237,,,237,237,237,237,237,237,237',
'237,,237,237,237,,237,237,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,',
',237,237,,,237,,,,,,237,,,,,,,,,237,,,,,237,237,237,237,,237,237,237',
'237,,,,,237,237,,,,238,238,238,237,238,237,237,237,238,238,,,,238,,238',
'238,238,238,238,238,238,,,,,,238,238,238,238,238,238,238,,,238,,,,,',
',238,,,238,238,238,238,238,238,238,238,,238,238,238,,238,238,238,238',
'238,,,,,,,,,,,,,,,,,,,,238,,,238,,,238,238,,,238,,,,,,238,,,,,,,,,238',
',,,,238,238,238,238,,238,238,238,238,,,,,238,238,,,,239,239,239,238',
'239,238,238,238,239,239,,,,239,,239,239,239,239,239,239,239,,,,,,239',
'239,239,239,239,239,239,,,239,,,,,,,239,,,239,239,239,239,239,239,239',
'239,,239,239,239,,239,239,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,',
',239,239,,,239,,,,,,239,,,,,,,,,239,,,,,239,239,239,239,,239,239,239',
'239,,,,,239,239,,,,240,240,240,239,240,239,239,239,240,240,,,,240,,240',
'240,240,240,240,240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,',
',240,,,240,240,240,240,240,240,240,240,,240,240,240,,240,240,240,240',
'240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240,,,240,,,,,,240,,,,,,,,,240',
',,,,240,240,240,240,,240,240,240,240,,,,,240,240,,,,241,241,241,240',
'241,240,240,240,241,241,,,,241,,241,241,241,241,241,241,241,,,,,,241',
'241,241,241,241,241,241,,,241,,,,,,,241,,,241,241,241,241,241,241,241',
'241,,241,241,241,,241,241,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,',
',241,241,,,241,,,,,,241,,,,,,,,,241,,,,,241,241,241,241,,241,241,241',
'241,,,,,241,241,,,,242,242,242,241,242,241,241,241,242,242,,,,242,,242',
'242,242,242,242,242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,',
',242,,,242,242,242,242,242,242,242,242,,242,242,242,,242,242,242,242',
'242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,,242',
',,,,242,242,242,242,,242,242,242,242,,,,,242,242,,,,243,243,243,242',
'243,242,242,242,243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243',
'243,243,243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243',
'243,,243,243,243,,243,243,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,',
',243,243,,,243,,,,,,243,,,,,,,,,243,,,,,243,243,243,243,,243,243,243',
'243,,,,,243,243,,,,244,244,244,243,244,243,243,243,244,244,,,,244,,244',
'244,244,244,244,244,244,,,,,,244,244,244,244,244,244,244,,,244,,,,,',
',244,,,244,244,244,244,244,244,244,244,,244,244,244,,244,244,244,244',
'244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,,,,244',
',,,,244,244,244,244,,244,244,244,244,,,,,244,244,,,,245,245,245,244',
'245,244,244,244,245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245',
'245,245,245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245',
'245,,245,245,245,,245,245,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,',
',245,245,,,245,,,,,,245,,,,,,,,,245,,,,,245,245,245,245,,245,245,245',
'245,,,,,245,245,,,,246,246,246,245,246,245,245,245,246,246,,,,246,,246',
'246,246,246,246,246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,',
',246,,,246,246,246,246,246,246,246,246,,246,246,246,,246,246,246,246',
'246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,,246',
',,,,246,246,246,246,,246,246,246,246,,,,,246,246,,,,247,247,247,246',
'247,246,246,246,247,247,,,,247,,247,247,247,247,247,247,247,,,,,,247',
'247,247,247,247,247,247,,,247,,,,,,,247,,,247,247,247,247,247,247,247',
'247,,247,247,247,,247,247,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,',
',247,247,,,247,,,,,,247,,,,,,,,,247,,,,,247,247,247,247,,247,247,247',
'247,,,,,247,247,,,,248,248,248,247,248,247,247,247,248,248,,,,248,,248',
'248,248,248,248,248,248,,,,,,248,248,248,248,248,248,248,,,248,,,,,',
',248,,,248,248,248,248,248,248,248,248,,248,248,248,,248,248,248,248',
'248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248,,,,,,248,,,,,,,,,248',
',,,,248,248,248,248,,248,248,248,248,,,,,248,248,,,,249,249,249,248',
'249,248,248,248,249,249,,,,249,,249,249,249,249,249,249,249,,,,,,249',
'249,249,249,249,249,249,,,249,,,,,,,249,,,249,249,249,249,249,249,249',
'249,,249,249,249,,249,249,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,',
',249,249,,,249,,,,,,249,,,,,,,,,249,,,,,249,249,249,249,,249,249,249',
'249,,,,,249,249,,,,250,250,250,249,250,249,249,249,250,250,,,,250,,250',
'250,250,250,250,250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,',
',250,,,250,250,250,250,250,250,250,250,,250,250,250,,250,250,250,250',
'250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,,250',
',,,,250,250,250,250,,250,250,250,250,,,,,250,250,,,,251,251,251,250',
'251,250,250,250,251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251',
'251,251,251,251,251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251',
'251,,251,251,251,,251,251,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,',
',251,251,,,251,,,,,,251,,,,,,,,,251,,,,,251,251,251,251,,251,251,251',
'251,,,,,251,251,,,,252,252,252,251,252,251,251,251,252,252,,,,252,,252',
'252,252,252,252,252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,',
',252,,,252,252,252,252,252,252,252,252,,252,252,252,,252,252,252,252',
'252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,,252',
',,,,252,252,252,252,,252,252,252,252,,,,,252,252,,,,253,253,253,252',
'253,252,252,252,253,253,,,,253,,253,253,253,253,253,253,253,,,,,,253',
'253,253,253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253',
'253,,253,253,253,,253,253,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,',
',253,253,,,253,,,,,,253,,,,,,,,,253,,,,,253,253,253,253,,253,253,253',
'253,,,,,253,253,,,,254,254,254,253,254,253,253,253,254,254,,,,254,,254',
'254,254,254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,',
',254,,,254,254,254,254,254,254,254,254,,254,254,254,,254,254,254,254',
'254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,,254',
',,,,254,254,254,254,,254,254,254,254,,,,,254,254,,,,255,255,255,254',
'255,254,254,254,255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255',
'255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255',
'255,,255,255,255,,255,255,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,',
',255,255,,,255,,,,,,255,,,,,,,,,255,,,,,255,255,255,255,,255,255,255',
'255,,,,,255,255,,,,256,256,256,255,256,255,255,255,256,256,,,,256,,256',
'256,256,256,256,256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,',
',256,,,256,256,256,256,256,256,256,256,,256,256,256,,256,256,256,256',
'256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,,256',
',,,,256,256,256,256,,256,256,256,256,,,,,256,256,,,,257,257,257,256',
'257,256,256,256,257,257,,,,257,,257,257,257,257,257,257,257,,,,,,257',
'257,257,257,257,257,257,,,257,,,,,,,257,,,257,257,257,257,257,257,257',
'257,,257,257,257,,257,257,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,',
',257,257,,,257,,,,,,257,,,,,,,,,257,,,,,257,257,257,257,,257,257,257',
'257,,,,,257,257,,,,262,262,262,257,262,257,257,257,262,262,,,,262,,262',
'262,262,262,262,262,262,,,,,,262,262,262,262,262,262,262,,,262,,,,,',
',262,,,262,262,262,262,262,262,262,262,,262,262,262,,262,262,262,262',
'262,,,,,,,,,,,,,,,,,,,,262,,,262,,,262,262,,,262,,,,,,262,,,,,,,,,262',
',,,,262,262,262,262,,262,262,262,262,,,,,262,262,,,,269,269,269,262',
'269,262,262,262,269,269,,,,269,,269,269,269,269,269,269,269,,,,,,269',
'269,269,269,269,269,269,,,269,,,,,,,269,,,269,269,269,269,269,269,269',
'269,269,269,269,269,,269,269,269,269,269,,,,,,,,,,,,,,,,,,,,269,,,269',
',,269,269,,,269,,269,,269,,269,,,269,,,,,,269,,,,,269,269,269,269,,269',
'269,269,269,,,,,269,269,,,,270,270,270,269,270,269,269,269,270,270,',
',,270,,270,270,270,270,270,270,270,,,,,,270,270,270,270,270,270,270',
',,270,,,,,,,270,,,270,270,270,270,270,270,270,270,270,270,270,270,,270',
'270,270,270,270,,,,,,,,,,,,,,,,,,,,270,,,270,,,270,270,,,270,,270,,270',
',270,,,270,,,,,,270,,,,,270,270,270,270,,270,270,270,270,,,,,270,270',
',,,278,278,278,270,278,270,270,270,278,278,,,,278,,278,278,278,278,278',
'278,278,,,,,,278,278,278,278,278,278,278,,,278,,,,,,,278,,,278,278,278',
'278,278,278,278,278,278,278,278,278,,278,278,278,278,278,,,,,,,,,,,',
',,,,,,,,278,,,278,,,278,278,,,278,,278,,278,,278,,,278,,,,,,278,,,,',
'278,278,278,278,,278,278,278,278,,,,,278,278,278,,,285,285,285,278,285',
'278,278,278,285,285,,,,285,,285,285,285,285,285,285,285,,,,,,285,285',
'285,285,285,285,285,,,285,,,,,,,285,,,285,285,285,285,285,285,285,285',
',285,285,285,,285,285,285,285,285,,,,,,,,,,,,,,,,,,,,285,,,285,,,285',
'285,,,285,,,,,,285,,,,,,,,,285,,,,,285,285,285,285,,285,285,285,285',
',,,,285,285,,,,287,287,287,285,287,285,285,285,287,287,,,,287,,287,287',
'287,287,287,287,287,,,,,,287,287,287,287,287,287,287,,,287,,,,,,,287',
',,287,287,287,287,287,287,287,287,,287,287,287,,287,287,287,287,287',
',,,,,,,,,,,,,,,,,,,287,,,287,,,287,287,,,287,,,,,,287,,,,,,,,,287,,',
',,287,287,287,287,,287,287,287,287,,,,,287,287,,,,290,290,290,287,290',
'287,287,287,290,290,,,,290,,290,290,290,290,290,290,290,,,,,,290,290',
'290,290,290,290,290,,,290,,,,,,,290,,,290,290,290,290,290,290,290,290',
',290,290,290,,290,290,290,290,290,,,,,,,,,,,,,,,,,,,,290,,,290,,,290',
'290,,,290,,,,,,290,,,,,,,,,290,,,,,290,290,290,290,,290,290,290,290',
',,,,290,290,,,,291,291,291,290,291,290,290,290,291,291,,,,291,,291,291',
'291,291,291,291,291,,,,,,291,291,291,291,291,291,291,,,291,,,,,,,291',
',,291,291,291,291,291,291,291,291,,291,291,291,,291,291,291,291,291',
',,,,,,,,,,,,,,,,,,,291,,,291,,,291,291,,,291,,,,,,291,,,,,,,,,291,,',
',,291,291,291,291,,291,291,291,291,,,,,291,291,,,,,,,291,,291,291,291',
'296,296,296,296,296,,,,296,296,,,,296,,296,296,296,296,296,296,296,',
',,,,296,296,296,296,296,296,296,,,296,,,,,,296,296,,296,296,296,296',
'296,296,296,296,296,,296,296,296,,296,296,296,296,296,,,,,,,,,,,,,,',
',,,,,296,,,296,,,296,296,,,296,,296,,,,296,,,,,,,,,296,,,,,296,296,296',
'296,,296,296,296,296,,,,,296,296,,,,304,304,304,296,304,296,296,296',
'304,304,,,,304,,304,304,304,304,304,304,304,,,,,,304,304,304,304,304',
'304,304,,,304,,,,,,,304,,,304,304,304,304,304,304,304,304,,304,304,304',
',304,304,,,304,,,,,,,,,,,,,,,,,,,,304,,,304,,,304,304,,,304,,,900,,900',
'900,900,900,900,,,,,,,,,900,,304,304,304,304,,304,304,304,304,,,,,304',
'304,,,,304,,900,304,,304,304,304,321,321,321,,321,900,900,,321,321,900',
',,321,,321,321,321,321,321,321,321,,,,,,321,321,321,321,321,321,321',
',,321,,,,,,,321,,,321,321,321,321,321,321,321,321,,321,321,321,,321',
'321,,,321,,,,,,,,,,,,,,,,,,,,321,,,321,,,321,321,,,321,,,,,,,,,,,,,',
',,,,,,321,321,321,321,,321,321,321,321,,,,,321,321,,,,328,328,328,321',
'328,321,321,321,328,328,,,,328,,328,328,328,328,328,328,328,,,,,,328',
'328,328,328,328,328,328,,,328,,,,,,,328,,,328,328,328,328,328,328,328',
'328,,328,328,328,,328,328,328,328,328,,,,,,,,,,,,,,,,,,,,328,,,328,',
',328,328,,,328,,,,,,328,,,,,,,,,328,,,,,328,328,328,328,,328,328,328',
'328,,,,,328,328,,,,330,330,330,328,330,328,328,328,330,330,,,,330,,330',
'330,330,330,330,330,330,,,,,,330,330,330,330,330,330,330,,,330,,,,,',
',330,,,330,330,330,330,330,330,330,330,,330,330,330,,330,330,330,330',
'330,,,,,,,,,,,,,,,,,,,,330,,,330,330,,330,330,,,330,,,,,,330,,,,,,,',
',330,,,,,330,330,330,330,,330,330,330,330,,,,,330,330,,,,347,347,347',
'330,347,330,330,330,347,347,,,,347,,347,347,347,347,347,347,347,,,,',
',347,347,347,347,347,347,347,,,347,,,,,,,347,,,347,347,347,347,347,347',
'347,347,,347,347,347,,347,347,347,347,347,,,,,,,,,,,,,,,,,,,,347,,,347',
',,347,347,,,347,,,,,,347,,,,,,,,,347,,,,,347,347,347,347,,347,347,347',
'347,,,,,347,347,,,,368,368,368,347,368,347,347,347,368,368,,,,368,,368',
'368,368,368,368,368,368,,,,,,368,368,368,368,368,368,368,,,368,,,,,',
',368,,,368,368,368,368,368,368,368,368,,368,368,368,,368,368,368,368',
'368,,,,,,,,,,,,,,,,,,,,368,,,368,,,368,368,,,368,,,,,,368,,,,,,,,,368',
',,,,368,368,368,368,,368,368,368,368,,,,,368,368,,,,384,384,384,368',
'384,368,368,368,384,384,,,,384,,384,384,384,384,384,384,384,,,,,,384',
'384,384,384,384,384,384,,,384,,,,,,,384,,,384,384,384,384,384,384,384',
'384,,384,384,384,,384,384,384,384,384,,,,,,,,,,,,,,,,,,,,384,,,384,',
',384,384,,,384,,,,,,384,,,,,,,,,384,,,,,384,384,384,384,,384,384,384',
'384,,,,,384,384,,,,412,412,412,384,412,384,384,384,412,412,,,,412,,412',
'412,412,412,412,412,412,,,,,,412,412,412,412,412,412,412,,,412,,,,,',
',412,,,412,412,412,412,412,412,412,412,,412,412,412,,412,412,412,412',
'412,,,,,,,,,,,,,,,,,,,,412,,,412,,,412,412,,,412,,,,,,412,,,,,,,,,412',
',,,,412,412,412,412,,412,412,412,412,,,,,412,412,,,,455,455,455,412',
'455,412,412,412,455,455,,,,455,,455,455,455,455,455,455,455,,,,,,455',
'455,455,455,455,455,455,,,455,,,,,,,455,,,455,455,455,455,455,455,455',
'455,455,455,455,455,,455,455,455,455,455,,,,,,,,,,,,,,,,,,,,455,,,455',
',,455,455,,,455,,455,,455,,455,,,455,,,,,,455,,,,,455,455,455,455,,455',
'455,455,455,,,,,455,455,,,,457,457,457,455,457,455,455,455,457,457,',
',,457,,457,457,457,457,457,457,457,,,,,,457,457,457,457,457,457,457',
',,457,,,,,,,457,,,457,457,457,457,457,457,457,457,,457,457,457,,457',
'457,457,457,457,,,,,,,,,,,,,,,,,,,,457,,,457,,,457,457,,,457,,,,,,457',
',,,,,,,,457,,,,,457,457,457,457,,457,457,457,457,,,,,457,457,,,,458',
'458,458,457,458,457,457,457,458,458,,,,458,,458,458,458,458,458,458',
'458,,,,,,458,458,458,458,458,458,458,,,458,,,,,,,458,,,458,458,458,458',
'458,458,458,458,,458,458,458,,458,458,458,458,458,,,,,,,,,,,,,,,,,,',
',458,,,458,,,458,458,,,458,,,,,,458,,,,,,,,,458,,,,,458,458,458,458',
',458,458,458,458,,,,,458,458,,,,459,459,459,458,459,458,458,458,459',
'459,,,,459,,459,459,459,459,459,459,459,,,,,,459,459,459,459,459,459',
'459,,,459,,,,,,,459,,,459,459,459,459,459,459,459,459,,459,459,459,',
'459,459,459,459,459,,,,,,,,,,,,,,,,,,,,459,,,459,,,459,459,,,459,,,',
',,459,,,,,,,,,459,,,,,459,459,459,459,,459,459,459,459,,,,,459,459,',
',,496,496,496,459,496,459,459,459,496,496,,,,496,,496,496,496,496,496',
'496,496,,,,,,496,496,496,496,496,496,496,,,496,,,,,,,496,,,496,496,496',
'496,496,496,496,496,496,496,496,496,,496,496,496,496,496,,,,,,,,,,,',
',,,,,,,,496,,,496,,,496,496,,,496,,496,,496,,496,,,496,,,,,,496,,,,',
'496,496,496,496,,496,496,496,496,,,,,496,496,,,,498,498,498,496,498',
'496,496,496,498,498,,,,498,,498,498,498,498,498,498,498,,,,,,498,498',
'498,498,498,498,498,,,498,,,,,,,498,,,498,498,498,498,498,498,498,498',
'498,498,498,498,,498,498,498,498,498,,,,,,,,,,,,,,,,,,,,498,,,498,,',
'498,498,,,498,,,,498,,498,,,498,,,,,,498,,,,,498,498,498,498,,498,498',
'498,498,,,,,498,498,,,,500,500,500,498,500,498,498,498,500,500,,,,500',
',500,500,500,500,500,500,500,,,,,,500,500,500,500,500,500,500,,,500',
',,,,,,500,,,500,500,500,500,500,500,500,500,,500,500,500,,500,500,500',
'500,500,,,,,,,,,,,,,,,,,,,,500,,,500,,,500,500,,,500,,,,,,500,,,,,,',
',,500,,,,,500,500,500,500,,500,500,500,500,,,,,500,500,,,,,,,500,,500',
'500,500,506,506,506,506,506,,,,506,506,,,,506,,506,506,506,506,506,506',
'506,,,,,,506,506,506,506,506,506,506,,,506,,,,,,506,506,506,506,506',
'506,506,506,506,506,506,506,,506,506,506,,506,506,506,506,506,,,,,,',
',,,,,,,,,,,,,506,,,506,,,506,506,,,506,,506,,,,506,,,,,,,,,506,,,,,506',
'506,506,506,,506,506,506,506,,,,,506,506,,,,,,506,506,,506,506,506,514',
'514,514,,514,,,,514,514,,,,514,,514,514,514,514,514,514,514,,,,,,514',
'514,514,514,514,514,514,,,514,,,,,,,514,,,514,514,514,514,514,514,514',
'514,,514,514,514,,514,514,,,514,,,,,,,,,,,,,,,,,,,,514,,,514,,,514,514',
',,514,,,,,,,,,,,,,,,,,,,,514,514,514,514,,514,514,514,514,,,,,514,514',
',,,516,516,516,514,516,514,514,514,516,516,,,,516,,516,516,516,516,516',
'516,516,,,,,,516,516,516,516,516,516,516,,,516,,,,,,,516,,,516,516,516',
'516,516,516,516,516,516,516,516,516,,516,516,516,516,516,,,,,,,,,,,',
',,,,,,,,516,,,516,,,516,516,,,516,,516,,516,,516,,,516,,,,,,516,,,,',
'516,516,516,516,,516,516,516,516,,,,,516,516,,,,522,522,522,516,522',
'516,516,516,522,522,,,,522,,522,522,522,522,522,522,522,,,,,,522,522',
'522,522,522,522,522,,,522,,,,,,,522,,,522,522,522,522,522,522,522,522',
',522,522,522,,522,522,,,522,,,,,,,,,,,,,,,,,,,,522,,,522,,,522,522,',
',522,,,,,,,,,,,,,,,,,,,,522,522,522,522,,522,522,522,522,,,,,522,522',
',,,525,525,525,522,525,522,522,522,525,525,,,,525,,525,525,525,525,525',
'525,525,,,,,,525,525,525,525,525,525,525,,,525,,,,,,,525,,,525,525,525',
'525,525,525,525,525,,525,525,525,,525,525,525,525,525,,,,,,,,,,,,,,',
',,,,,525,,,525,,,525,525,,,525,,,,,,525,,,,,,,,,525,,,,,525,525,525',
'525,,525,525,525,525,,,,,525,525,,,,526,526,526,525,526,525,525,525',
'526,526,,,,526,,526,526,526,526,526,526,526,,,,,,526,526,526,526,526',
'526,526,,,526,,,,,,,526,,,526,526,526,526,526,526,526,526,,526,526,526',
',526,526,526,526,526,,,,,,,,,,,,,,,,,,,,526,,,526,,,526,526,,,526,,',
',,,526,,,,,,,,,526,,,,,526,526,526,526,,526,526,526,526,,,,,526,526',
',,,531,531,531,526,531,526,526,526,531,531,,,,531,,531,531,531,531,531',
'531,531,,,,,,531,531,531,531,531,531,531,,,531,,,,,,,531,,,531,531,531',
'531,531,531,531,531,,531,531,531,,531,531,531,531,531,,,,,,,,,,,,,,',
',,,,,531,,,531,,,531,531,,,531,,,,,,531,,,,,,,,,531,,,,,531,531,531',
'531,,531,531,531,531,,,,,531,531,,,,537,537,537,531,537,531,531,531',
'537,537,,,,537,,537,537,537,537,537,537,537,,,,,,537,537,537,537,537',
'537,537,,,537,,,,,,,537,,,537,537,537,537,537,537,537,537,537,537,537',
'537,,537,537,537,537,537,,,,,,,,,,,,,,,,,,,,537,,,537,,,537,537,,,537',
',537,,,,537,,,537,,,,,,537,,,,,537,537,537,537,,537,537,537,537,,,,',
'537,537,,,,540,540,540,537,540,537,537,537,540,540,,,,540,,540,540,540',
'540,540,540,540,,,,,,540,540,540,540,540,540,540,,,540,,,,,,,540,,,540',
'540,540,540,540,540,540,540,540,540,540,540,,540,540,540,540,540,,,',
',,,,,,,,,,,,,,,,540,,,540,,,540,540,,,540,,,,,,540,,,540,,,,,,540,,',
',,540,540,540,540,,540,540,540,540,,,,,540,540,,,,565,565,565,540,565',
'540,540,540,565,565,,,,565,,565,565,565,565,565,565,565,,,,,,565,565',
'565,565,565,565,565,,,565,,,,,,,565,,,565,565,565,565,565,565,565,565',
',565,565,565,,565,565,565,565,565,,,,,,,,,,,,,,,,,,,,565,,,565,,,565',
'565,,,565,,,,,,565,,,,,,,,,565,,,,,565,565,565,565,,565,565,565,565',
',,,,565,565,,,,586,586,586,565,586,565,565,565,586,586,,,,586,,586,586',
'586,586,586,586,586,,,,,,586,586,586,586,586,586,586,,,586,,,,,,,586',
',,586,586,586,586,586,586,586,586,,586,586,586,,586,586,586,586,586',
',,,,,,,,,,,,,,,,,,,586,,,586,,,586,586,,,586,,586,,,,586,,,,,,,,,586',
',,,,586,586,586,586,,586,586,586,586,,,,,586,586,,,,587,587,587,586',
'587,586,586,586,587,587,,,,587,,587,587,587,587,587,587,587,,,,,,587',
'587,587,587,587,587,587,,,587,,,,,,,587,,,587,587,587,587,587,587,587',
'587,587,587,587,587,,587,587,587,587,587,,,,,,,,,,,,,,,,,,,,587,,,587',
',,587,587,,,587,,587,,587,,587,,,587,,,,,,587,,,,,587,587,587,587,,587',
'587,587,587,,,,,587,587,,,,597,597,597,587,597,587,587,587,597,597,',
',,597,,597,597,597,597,597,597,597,,,,,,597,597,597,597,597,597,597',
',,597,,,,,,,597,,,597,597,597,597,597,597,597,597,597,597,597,597,,597',
'597,597,597,597,,,,,,,,,,,,,,,,,,,,597,,,597,,,597,597,,,597,,597,,597',
',597,,,597,,,,,,597,,,,,597,597,597,597,,597,597,597,597,,,,,597,597',
',,,629,629,629,597,629,597,597,597,629,629,,,,629,,629,629,629,629,629',
'629,629,,,,,,629,629,629,629,629,629,629,,,629,,,,,,,629,,,629,629,629',
'629,629,629,629,629,,629,629,629,,629,629,629,629,629,,,,,,,,,,,,,,',
',,,,,629,,,629,,,629,629,,,629,,629,,,,629,,,,,,,,,629,,,,,629,629,629',
'629,,629,629,629,629,,,,,629,629,,,,630,630,630,629,630,629,629,629',
'630,630,,,,630,,630,630,630,630,630,630,630,,,,,,630,630,630,630,630',
'630,630,,,630,,,,,,,630,,,630,630,630,630,630,630,630,630,,630,630,630',
',630,630,630,630,630,,,,,,,,,,,,,,,,,,,,630,,,630,,,630,630,,,630,,',
',,,630,,,,,,,,,630,,,,,630,630,630,630,,630,630,630,630,,,,,630,630',
',,,631,631,631,630,631,630,630,630,631,631,,,,631,,631,631,631,631,631',
'631,631,,,,,,631,631,631,631,631,631,631,,,631,,,,,,,631,,,631,631,631',
'631,631,631,631,631,631,631,631,631,,631,631,631,631,631,,,,,,,,,,,',
',,,,,,,,631,,,631,,,631,631,,,631,,631,,631,,631,,,631,,,,,,631,,,,',
'631,631,631,631,,631,631,631,631,,,,,631,631,,,,,,,631,,631,631,631',
'634,634,634,634,634,,,,634,634,,,,634,,634,634,634,634,634,634,634,',
',,,,634,634,634,634,634,634,634,,,634,,,,,,634,634,,634,634,634,634',
'634,634,634,634,634,,634,634,634,,634,634,634,634,634,,,,,,,,,,,,,,',
',,,,,634,,,634,,,634,634,,,634,,634,,,,634,,,,,,,,,634,,,,,634,634,634',
'634,,634,634,634,634,,,,,634,634,,,,635,635,635,634,635,634,634,634',
'635,635,,,,635,,635,635,635,635,635,635,635,,,,,,635,635,635,635,635',
'635,635,,,635,,,,,,,635,,,635,635,635,635,635,635,635,635,,635,635,635',
',635,635,635,635,635,,,,,,,,,,,,,,,,,,,,635,,,635,,,635,635,,,635,,',
',,,635,,,,,,,,,635,,,,,635,635,635,635,,635,635,635,635,,,,,635,635',
',,,638,638,638,635,638,635,635,635,638,638,,,,638,,638,638,638,638,638',
'638,638,,,,,,638,638,638,638,638,638,638,,,638,,,,,,,638,,,638,638,638',
'638,638,638,638,638,638,638,638,638,,638,638,638,638,638,,,,,,,,,,,',
',,,,,,,,638,,,638,,,638,638,,,638,,638,,638,,638,,,638,,,,,,638,,,,',
'638,638,638,638,,638,638,638,638,,,,,638,638,,,,639,639,639,638,639',
'638,638,638,639,639,,,,639,,639,639,639,639,639,639,639,,,,,,639,639',
'639,639,639,639,639,,,639,,,,,,,639,,,639,639,639,639,639,639,639,639',
'639,639,639,639,,639,639,639,639,639,,,,,,,,,,,,,,,,,,,,639,,,639,,',
'639,639,,,639,,,,639,,639,,,639,,,,,,639,,,,,639,639,639,639,,639,639',
'639,639,,,,,639,639,,,,640,640,640,639,640,639,639,639,640,640,,,,640',
',640,640,640,640,640,640,640,,,,,,640,640,640,640,640,640,640,,,640',
',,,,,,640,,,640,640,640,640,640,640,640,640,,640,640,640,,640,640,640',
'640,640,,,,,,,,,,,,,,,,,,,,640,,,640,,,640,640,,,640,,,,,,640,,,,,,',
',,640,,,,,640,640,640,640,,640,640,640,640,,,,,640,640,,,,641,641,641',
'640,641,640,640,640,641,641,,,,641,,641,641,641,641,641,641,641,,,,',
',641,641,641,641,641,641,641,,,641,,,,,,,641,,,641,641,641,641,641,641',
'641,641,,641,641,641,,641,641,641,641,641,,,,,,,,,,,,,,,,,,,,641,,,641',
',,641,641,,,641,,,,,,641,,,,,,,,,641,,,,,641,641,641,641,,641,641,641',
'641,,,,,641,641,,,,645,645,645,641,645,641,641,641,645,645,,,,645,,645',
'645,645,645,645,645,645,,,,,,645,645,645,645,645,645,645,,,645,,,,,',
',645,,,645,645,645,645,645,645,645,645,,645,645,645,,645,645,645,645',
'645,,,,,,,,,,,,,,,,,,,,645,,,645,,,645,645,,,645,,,,,,645,,,,,,,,,645',
',,,,645,645,645,645,,645,645,645,645,,,,,645,645,,,,646,646,646,645',
'646,645,645,645,646,646,,,,646,,646,646,646,646,646,646,646,,,,,,646',
'646,646,646,646,646,646,,,646,,,,,,,646,,,646,646,646,646,646,646,646',
'646,,646,646,646,,646,646,646,646,646,,,,,,,,,,,,,,,,,,,,646,,,646,',
',646,646,,,646,,,,,,646,,,,,,,,,646,,,,,646,646,646,646,,646,646,646',
'646,,,,,646,646,,,,670,670,670,646,670,646,646,646,670,670,,,,670,,670',
'670,670,670,670,670,670,,,,,,670,670,670,670,670,670,670,,,670,,,,,',
',670,,,670,670,670,670,670,670,670,670,,670,670,670,,670,670,670,670',
'670,,,,,,,,,,,,,,,,,,,,670,,,670,,,670,670,,,670,,,,,,670,,,,,,,,,670',
',,,,670,670,670,670,,670,670,670,670,,,,,670,670,,,,673,673,673,670',
'673,670,670,670,673,673,,,,673,,673,673,673,673,673,673,673,,,,,,673',
'673,673,673,673,673,673,,,673,,,,,,,673,,,673,673,673,673,673,673,673',
'673,,673,673,673,,673,673,673,673,673,,,,,,,,,,,,,,,,,,,,673,,,673,',
',673,673,,,673,,,,,,673,,,,,,,,,673,,,,,673,673,673,673,,673,673,673',
'673,,,,,673,673,,,,676,676,676,673,676,673,673,673,676,676,,,,676,,676',
'676,676,676,676,676,676,,,,,,676,676,676,676,676,676,676,,,676,,,,,',
',676,,,676,676,676,676,676,676,676,676,,676,676,676,,676,676,,,676,',
',,,,,,,,,,,,,,,,,,676,,,676,,,676,676,,,676,,,,,,,,,,,,,,,,,,,,676,676',
'676,676,,676,676,676,676,,,,,676,676,,,,687,687,687,676,687,676,676',
'676,687,687,,,,687,,687,687,687,687,687,687,687,,,,,,687,687,687,687',
'687,687,687,,,687,,,,,,,687,,,687,687,687,687,687,687,687,687,,687,687',
'687,,687,687,,,687,,,,,,,,,,,,,,,,,,,,687,,,687,,,687,687,,,687,,,,',
',,,,,,,,,,,,,,,687,687,687,687,,687,687,687,687,,,,,687,687,,,,692,692',
'692,687,692,687,687,687,692,692,,,,692,,692,692,692,692,692,692,692',
',,,,,692,692,692,692,692,692,692,,,692,,,,,,,692,,,692,692,692,692,692',
'692,692,692,,692,692,692,,692,692,692,692,692,,,,,,,,,,,,,,,,,,,,692',
',,692,,,692,692,,,692,,692,,,,692,,,,,,,,,692,,,,,692,692,692,692,,692',
'692,692,692,,,,,692,692,,,,709,709,709,692,709,692,692,692,709,709,',
',,709,,709,709,709,709,709,709,709,,,,,,709,709,709,709,709,709,709',
',,709,,,,,,,709,,,709,709,709,709,709,709,709,709,,709,709,709,,709',
'709,709,709,709,,,,,,,,,,,,,,,,,,,,709,,,709,,,709,709,,,709,,,,,,709',
',,,,,,,,709,,,,,709,709,709,709,,709,709,709,709,,,,,709,709,,,,742',
'742,742,709,742,709,709,709,742,742,,,,742,,742,742,742,742,742,742',
'742,,,,,,742,742,742,742,742,742,742,,,742,,,,,,,742,,,742,742,742,742',
'742,742,742,742,,742,742,742,,742,742,742,742,742,,,,,,,,,,,,,,,,,,',
',742,,,742,,,742,742,,,742,,,,,,742,,,,,,,,,742,,,,,742,742,742,742',
',742,742,742,742,,,,,742,742,,,,764,764,764,742,764,742,742,742,764',
'764,,,,764,,764,764,764,764,764,764,764,,,,,,764,764,764,764,764,764',
'764,,,764,,,,,,,764,,,764,764,764,764,764,764,764,764,,764,764,764,',
'764,764,764,764,764,,,,,,,,,,,,,,,,,,,,764,,,764,,,764,764,,,764,,,',
',,764,,,,,,,,,764,,,,,764,764,764,764,,764,764,764,764,,,,,764,764,',
',,772,772,772,764,772,764,764,764,772,772,,,,772,,772,772,772,772,772',
'772,772,,,,,,772,772,772,772,772,772,772,,,772,,,,,,,772,,,772,772,772',
'772,772,772,772,772,,772,772,772,,772,772,772,772,772,,,,,,,,,,,,,,',
',,,,,772,,,772,,,772,772,,,772,,,,,,772,,,,,,,,,772,,,,,772,772,772',
'772,,772,772,772,772,,,,,772,772,,,,785,785,785,772,785,772,772,772',
'785,785,,,,785,,785,785,785,785,785,785,785,,,,,,785,785,785,785,785',
'785,785,,,785,,,,,,,785,,,785,785,785,785,785,785,785,785,,785,785,785',
',785,785,785,785,785,,,,,,,,,,,,,,,,,,,,785,,,785,,,785,785,,,785,,',
',,,785,,,,,,,,,785,,,,,785,785,785,785,,785,785,785,785,,,,,785,785',
',,,786,786,786,785,786,785,785,785,786,786,,,,786,,786,786,786,786,786',
'786,786,,,,,,786,786,786,786,786,786,786,,,786,,,,,,,786,,,786,786,786',
'786,786,786,786,786,,786,786,786,,786,786,786,786,786,,,,,,,,,,,,,,',
',,,,,786,,,786,,,786,786,,,786,,,,,,786,,,,,,,,,786,,,,,786,786,786',
'786,,786,786,786,786,,,,,786,786,,,,787,787,787,786,787,786,786,786',
'787,787,,,,787,,787,787,787,787,787,787,787,,,,,,787,787,787,787,787',
'787,787,,,787,,,,,,,787,,,787,787,787,787,787,787,787,787,,787,787,787',
',787,787,787,787,787,,,,,,,,,,,,,,,,,,,,787,,,787,,,787,787,,,787,,',
',,,787,,,,,,,,,787,,,,,787,787,787,787,,787,787,787,787,,,,,787,787',
',,,788,788,788,787,788,787,787,787,788,788,,,,788,,788,788,788,788,788',
'788,788,,,,,,788,788,788,788,788,788,788,,,788,,,,,,,788,,,788,788,788',
'788,788,788,788,788,,788,788,788,,788,788,788,788,788,,,,,,,,,,,,,,',
',,,,,788,,,788,,,788,788,,,788,,,,,,788,,,,,,,,,788,,,,,788,788,788',
'788,,788,788,788,788,,,,,788,788,,,,790,790,790,788,790,788,788,788',
'790,790,,,,790,,790,790,790,790,790,790,790,,,,,,790,790,790,790,790',
'790,790,,,790,,,,,,,790,,,790,790,790,790,790,790,790,790,,790,790,790',
',790,790,790,790,790,,,,,,,,,,,,,,,,,,,,790,,,790,,,790,790,,,790,,',
',,,790,,,,,,,,,790,,,,,790,790,790,790,,790,790,790,790,,,,,790,790',
',,,842,842,842,790,842,790,790,790,842,842,,,,842,,842,842,842,842,842',
'842,842,,,,,,842,842,842,842,842,842,842,,,842,,,,,,,842,,,842,842,842',
'842,842,842,842,842,,842,842,842,,842,842,842,842,842,,,,,,,,,,,,,,',
',,,,,842,,,842,,,842,842,,,842,,,,,,842,,,,,,,,,842,,,,,842,842,842',
'842,,842,842,842,842,,,,,842,842,,,,845,845,845,842,845,842,842,842',
'845,845,,,,845,,845,845,845,845,845,845,845,,,,,,845,845,845,845,845',
'845,845,,,845,,,,,,,845,,,845,845,845,845,845,845,845,845,,845,845,845',
',845,845,845,845,845,,,,,,,,,,,,,,,,,,,,845,,,845,,,845,845,,,845,,845',
',,,845,,,,,,,,,845,,,,,845,845,845,845,,845,845,845,845,,,,,845,845',
',,,863,863,863,845,863,845,845,845,863,863,,,,863,,863,863,863,863,863',
'863,863,,,,,,863,863,863,863,863,863,863,,,863,,,,,,,863,,,863,863,863',
'863,863,863,863,863,863,863,863,863,,863,863,863,863,863,,,,,,,,,,,',
',,,,,,,,863,,,863,,,863,863,,,863,,,,863,,863,,,863,,,,,,863,,,,,863',
'863,863,863,,863,863,863,863,,,,,863,863,,,,864,864,864,863,864,863',
'863,863,864,864,,,,864,,864,864,864,864,864,864,864,,,,,,864,864,864',
'864,864,864,864,,,864,,,,,,,864,,,864,864,864,864,864,864,864,864,,864',
'864,864,,864,864,864,864,864,,,,,,,,,,,,,,,,,,,,864,,,864,,,864,864',
',,864,,,,,,864,,,,,,,,,864,,,,,864,864,864,864,,864,864,864,864,,,,',
'864,864,,,,878,878,878,864,878,864,864,864,878,878,,,,878,,878,878,878',
'878,878,878,878,,,,,,878,878,878,878,878,878,878,,,878,,,,,,,878,,,878',
'878,878,878,878,878,878,878,,878,878,878,,878,878,,,878,,,,,,,,,,,,',
',,,,,,,878,,,878,,,878,878,,,878,,,,,,,,,,,,,,,,,,,,878,878,878,878',
',878,878,878,878,,,,,878,878,,,,887,887,887,878,887,878,878,878,887',
'887,,,,887,,887,887,887,887,887,887,887,,,,,,887,887,887,887,887,887',
'887,,,887,,,,,,,887,,,887,887,887,887,887,887,887,887,,887,887,887,',
'887,887,,,887,,,,,,,,,,,,,,,,,,,,887,,,887,,,887,887,,,887,,,,,,,,,',
',,,,,,,,,,887,887,887,887,,887,887,887,887,,,,,887,887,,,,934,934,934',
'887,934,887,887,887,934,934,,,,934,,934,934,934,934,934,934,934,,,,',
',934,934,934,934,934,934,934,,,934,,,,,,,934,,,934,934,934,934,934,934',
'934,934,,934,934,934,,934,934,,,934,,,,,,,,,,,,,,,,,,,,934,,,934,,,934',
'934,,,934,,,,,,,,,,,,,,,,,,,,934,934,934,934,,934,934,934,934,,,,,934',
'934,,,,979,979,979,934,979,934,934,934,979,979,,,,979,,979,979,979,979',
'979,979,979,,,,,,979,979,979,979,979,979,979,,,979,,,,,,,979,,,979,979',
'979,979,979,979,979,979,979,979,979,979,,979,979,979,979,979,,,,,,,',
',,,,,,,,,,,,979,,,979,,,979,979,,,979,,979,,979,,979,,,979,,,,,,979',
',,,,979,979,979,979,,979,979,979,979,,,,,979,979,,,,,,,979,,979,979',
'979,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,,,8,8,8,8,8,8,8',
'8,8,8,,,,,,8,8,8,8,8,8,8,8,8,8,,8,,,,,,,,8,8,,8,8,8,8,8,8,8,,,8,8,,',
',8,8,8,8,,,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8,8,8,8,8,8,,,8,8,,,,,,,,,,,',
',,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,,,,9,9,9,9,9,9,9',
'9,9,9,,,,,,9,9,9,9,9,9,9,9,9,,,9,,,,,,,,9,9,,9,9,9,9,9,9,9,,,9,9,,,',
'9,9,9,9,,,,,,,,,,,,,,9,9,,9,9,9,9,9,9,9,9,9,9,9,9,,,9,9,,,,,,,,,,,,',
',9,403,403,403,403,403,403,403,403,403,403,403,403,403,403,403,403,403',
'403,403,403,403,403,403,403,,,,403,403,403,403,403,403,403,403,403,403',
',,,,,403,403,403,403,403,403,403,403,403,,,403,,,,,,,,403,403,,403,403',
'403,403,403,403,403,,,403,403,,,,403,403,403,403,,,,,,,,,,,,,,403,403',
',403,403,403,403,403,403,403,403,403,403,403,403,,,403,403,,,,,,,,,',
',,,,403,626,626,626,626,626,626,626,626,626,626,626,626,626,626,626',
'626,626,626,626,626,626,626,626,626,,,,626,626,626,626,626,626,626,626',
'626,626,,,,,,626,626,626,626,626,626,626,626,626,,,626,,,,,,,,626,626',
',626,626,626,626,626,626,626,,,626,626,,,,626,626,626,626,,,,,,,,,,',
',,,626,626,,626,626,626,626,626,626,626,626,626,626,626,626,,,626,626',
',,,,,,,,,,,,,626,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72',
'72,72,72,72,72,72,72,,,,72,72,72,72,72,72,72,72,72,72,,,,,,72,72,72',
'72,72,72,72,72,72,72,72,72,,72,,,,,,72,72,,72,72,72,72,72,72,72,,,72',
'72,,,,72,72,72,72,,,,,,72,,,,,,,,72,72,,72,72,72,72,72,72,72,72,72,72',
'72,72,,,72,748,748,748,748,748,748,748,748,748,748,748,748,748,748,748',
'748,748,748,748,748,748,748,748,748,,,,748,748,748,748,748,748,748,748',
'748,748,,,,,,748,748,748,748,748,748,748,748,748,,,748,,,,,,,,748,748',
',748,748,748,748,748,748,748,,,748,748,,,,748,748,748,748,,,,,,,,,,',
',,,748,748,,748,748,748,748,748,748,748,748,748,748,748,748,216,216',
'748,,216,,,,,,,,216,216,,216,216,216,216,216,216,216,,,216,216,,,,216',
'216,216,216,,,,,,216,,,,,,,,216,216,,216,216,216,216,216,216,216,216',
'216,216,216,216,217,217,216,,217,,,,,,,,217,217,,217,217,217,217,217',
'217,217,,,217,217,,,,217,217,217,217,,,,,,217,,,,,,,,217,217,,217,217',
'217,217,217,217,217,217,217,217,217,217,265,265,217,,265,,,,,,,,265',
'265,,265,265,265,265,265,265,265,,,265,265,,,,265,265,265,265,,,,,,',
',,,,,,,265,265,,265,265,265,265,265,265,265,265,265,265,265,265,453',
'453,265,,453,,,,,,,,453,453,,453,453,453,453,453,453,453,,,453,453,',
',,453,453,453,453,,,,,,453,,,,,,,,453,453,,453,453,453,453,453,453,453',
'453,453,453,453,453,454,454,453,,454,,,,,,,,454,454,,454,454,454,454',
'454,454,454,,,454,454,,,,454,454,454,454,,,,,,454,,,,,,,,454,454,,454',
'454,454,454,454,454,454,454,454,454,454,454,517,517,454,,517,,,,,,,',
'517,517,,517,517,517,517,517,517,517,,,517,517,,,,517,517,517,517,,',
',,,517,,,,,,,,517,517,,517,517,517,517,517,517,517,517,517,517,517,517',
'518,518,517,,518,,,,,,,,518,518,,518,518,518,518,518,518,518,,,518,518',
',,,518,518,518,518,,,,,,518,,,,,,,,518,518,,518,518,518,518,518,518',
'518,518,518,518,518,518,527,527,518,,527,,,,,,,,527,527,,527,527,527',
'527,527,527,527,,,527,527,,,,527,527,527,527,,,,,,527,,,,,,,,527,527',
',527,527,527,527,527,527,527,527,527,527,527,527,528,528,527,,528,,',
',,,,,528,528,,528,528,528,528,528,528,528,,,528,528,,,,528,528,528,528',
',,,,,528,,,,,,,,528,528,,528,528,528,528,528,528,528,528,528,528,528',
'528,588,588,528,,588,,,,,,,,588,588,,588,588,588,588,588,588,588,,,588',
'588,,,,588,588,588,588,,,,,,588,,,,,,,,588,588,,588,588,588,588,588',
'588,588,588,588,588,588,588,589,589,588,,589,,,,,,,,589,589,,589,589',
'589,589,589,589,589,,,589,589,,,,589,589,589,589,,,,,,589,,,,,,,,589',
'589,,589,589,589,589,589,589,589,589,589,589,589,589,595,595,589,,595',
',,,,,,,595,595,,595,595,595,595,595,595,595,,,595,595,,,,595,595,595',
'595,,,,,,595,,,,,,,,595,595,,595,595,595,595,595,595,595,595,595,595',
'595,595,596,596,595,,596,,,,,,,,596,596,,596,596,596,596,596,596,596',
',,596,596,,,,596,596,596,596,,,,,,596,,,,,,,,596,596,,596,596,596,596',
'596,596,596,596,596,596,596,596,632,632,596,,632,,,,,,,,632,632,,632',
'632,632,632,632,632,632,,,632,632,,,,632,632,632,632,,,,,,632,,,,,,',
',632,632,,632,632,632,632,632,632,632,632,632,632,632,632,633,633,632',
',633,,,,,,,,633,633,,633,633,633,633,633,633,633,,,633,633,,,,633,633',
'633,633,,,,,,633,,,,,,,,633,633,,633,633,633,633,633,633,633,633,633',
'633,633,633,976,976,633,,976,,,,,,,,976,976,,976,976,976,976,976,976',
'976,,,976,976,,,,976,976,976,976,,,,,,976,,,,,,,,976,976,,976,976,976',
'976,976,976,976,976,976,976,976,976,980,980,976,,980,,,,,,,,980,980',
',980,980,980,980,980,980,980,,,980,980,,,,980,980,980,980,,,,,,980,',
',,,,,,980,980,,980,980,980,980,980,980,980,980,980,980,980,980,981,981',
'980,,981,,,,,,,,981,981,,981,981,981,981,981,981,981,,,981,981,,,,981',
'981,981,981,,,,,,981,,,,,,,,981,981,,981,981,981,981,981,981,981,981',
'981,981,981,981,,343,981,343,343,343,343,343,,545,,545,545,545,545,545',
'343,,,,,,,,545,,703,,703,703,703,703,703,,,,,,343,343,,703,,,,,545,343',
'343,343,343,,,,343,545,545,545,545,,,,545,703,,705,,705,705,705,705',
'705,703,703,703,703,,,,703,705,,746,,746,746,746,746,746,,747,,747,747',
'747,747,747,746,,,,,705,,,747,,,,,,705,705,705,705,,,,705,746,,,,,,',
',747,746,746,746,746,,,,746,747,747,747,747,,,894,747,894,894,894,894',
'894,,926,,926,926,926,926,926,894,,,,,,,,926,,928,,928,928,928,928,928',
',,,,,894,,,928,,,,,926,894,894,894,894,,,,894,926,926,926,926,,,,926',
'928,,930,,930,930,930,930,930,928,928,928,928,,,,928,930,,987,,987,987',
'987,987,987,,997,,997,997,997,997,997,987,,,,,930,,,997,,,,,,,,930,930',
',,,930,987,,,,,,,,997,,,987,987,,,,987,997,997,997,997,,,999,997,999',
'999,999,999,999,1001,,1001,1001,1001,1001,1001,1003,999,1003,1003,1003',
'1003,1003,1025,1001,1025,1025,1025,1025,1025,,1003,,,,,,,1025,999,,',
',,,,1001,,,,999,999,,1003,,999,,1001,1001,,1025,,1001,,1003,1003,,,',
'1003,,1025,1025,,,,1025' ]
        racc_action_check = arr = ::Array.new(24698, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  1853,    10,   nil,   221,   nil,  5772,   909,   -79, 22505, 22633,
   -51,   nil,   -80,   -44,   240,    15,   477,   -81,   nil,   -71,
  5903,  1711,   166,   nil,   -62,   nil,    -8,   958,  1068,  6034,
  6165,  6296,   nil,  1993,  6427,  6558,   nil,    70,   225,   352,
   152,   255,  6697,  6828,   -51,  6959,    86,   507,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1178,   nil,  7098,
  7229,  7360,     4,   nil,  7491,  7622,   nil,   nil,  7753,  7892,
  8023,  8154, 23017,   nil,   nil,   nil,   nil,   nil,   nil,   624,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     0,   nil,   nil,
   112,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   224,   nil,  8293,   nil,   nil,   nil,   nil,  8432,  8563,
  8694,  8825,  8964,   nil,  2133,   nil,   287,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   115,   nil,  2273,
  9095,  9226,  9357,  9488,  9619,  9750, 23191, 23252,   nil,   nil,
  9881, 10012, 10143,   nil,   nil,   574,   -54,   166,   202,   217,
   124,   216,   nil, 10274,  2413,   232, 10405, 10536, 10667, 10798,
 10929, 11060, 11191, 11322, 11453, 11584, 11715, 11846, 11977, 12108,
 12239, 12370, 12501, 12632, 12763, 12894, 13025, 13156,   nil,   nil,
   nil,   nil, 13287,   nil,   nil, 23313,   nil,   nil,   258, 13418,
 13549,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 13680,   nil,
  2133,   nil,   249,   263,   nil, 13811,   328, 13942,   nil,   nil,
 14073, 14204,   nil,   nil,   295,   nil, 14343,  1331,   337,   315,
  2553,   340,   391,   350, 14474,  2693,   576,   682,   686,   441,
   718,   nil,   409,   387,    33,   nil,   nil,   nil,   458,   360,
   418, 14613,   nil,   424,   497,   771,   nil,   528, 14744,   nil,
 14875,  2833,  1396,   484,   nil,   398,   503,   528,   511,   575,
   550,   nil,   nil, 24290,   326,    -1,    11, 15006,  2973,  3113,
   298,   641,   533,   -18,    11,   794,   644,    25,   677,   nil,
   nil,   342,   434,   -21,   nil,   834,   nil,   596, 15137,   nil,
   nil,   nil,   194,   230,   255,   373,   413,   481,   506,   508,
   550,   nil,   551,   nil, 15268,   nil,   327,   388,   395,   400,
   456,   -41,   -35,   462,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   611, 22761,   nil,   nil,   nil,   nil,   612,   nil,
   nil,   600, 15399,   605,   nil,   nil,   600,   nil,   837,   313,
   701,   nil,   nil,  1853,   nil,   nil,   nil,   nil,   nil,  1993,
   615,   nil,   627,   632,   509,   521,  1314,   nil,   nil,   nil,
   222,   334,   678,   nil,   nil,  1446,  1582,   nil,   nil,   nil,
   -35,   nil,   683, 23374, 23435, 15530,   328, 15661, 15792, 15923,
  2833,  2973,   523,   563,   708,   710,   711,   712,  1667,  4233,
   666,  3113,  3253,  3393,  3533,  3673,  3813,   915,  1465,  3953,
  4093,  2273,  1397,   nil,  1718,   nil,   nil,   nil,   nil,   669,
   nil,   nil,   nil,   673,   nil,   nil, 16054,   nil, 16185,   nil,
 16316,   nil,   363,   nil,   nil,   nil, 16455,  1427,   nil,   675,
   675,   nil,   nil,   676, 16594,   683, 16725, 23496, 23557,   870,
   726,   nil, 16856,   685,   nil, 16987, 17118, 23618, 23679,  1531,
  2413, 17249,   823,   822,   702,   747,   nil, 17380,   nil,   nil,
 17511,   nil,   nil,   nil,   nil, 24298,   nil,   705,   710,   nil,
   717,   719,   720,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   711,  1178,   nil,   nil, 17642,   nil,   nil,   nil,   807,
   nil,   nil,   nil,   810,   nil,   nil,   824,  3253,   865,   nil,
  3393,    62,   872,   873,   867,   879, 17773, 17904, 23740, 23801,
    27,   nil,   nil,   930,   nil, 23862, 23923, 18035,   nil,   nil,
   250,  3533,   817,   nil,   -33,   nil,   nil,   nil,   832,   nil,
   nil,   nil,   796,   nil,   nil,   259,   nil,   338,   nil,   nil,
   783,   nil,   786,   nil,   nil,   nil, 22889,   nil,   789, 18166,
 18297, 18428, 23984, 24045, 18567, 18698,   552,   829, 18829, 18960,
 19091, 19222,   829,   nil,   nil, 19353, 19484,   845,   nil,   nil,
   nil,   343,   358,   466,   604,   830,   830,   955,   nil,   946,
     6,   nil,   nil,   862,   102,   969,   nil,   847,   nil,   895,
 19615,   nil,   nil, 19746,   nil,   -83, 19877,   857,   nil,   861,
   123,   180,   903,   248,  1038,   907,   870, 20008,   nil,   943,
   214,   996, 20139,   nil,   nil,   nil,   596,    36,   881,   780,
   nil,   nil,   430, 24315,   nil, 24354,   nil,  1377,   nil, 20270,
   nil,  1241,   nil,   882,   228,   886,   nil,   nil,   nil,   nil,
   642,   nil,  1008,   nil,   nil,   nil,   nil,   nil,  1029,   nil,
    26,   913,    41,    68,   151,   185,  3673,   717,  1040,   nil,
   914,  3813, 20401,   nil,  1037,  3953, 24371, 24379, 23130,   nil,
   nil,   nil,   nil,   nil,   nil,  4093,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   916, 20532,   920,   516,   519,   714,   826,
   nil,  2553, 20663,   nil,   920,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil, 20794, 20925, 21056, 21187,   520,
 21318,   nil,   160,   nil,   nil,   942,   nil,   nil,   889,   nil,
  4233,   nil,   nil,   nil,   nil,   924,   236,   nil,   nil,  1051,
   nil,  4373,   929,   986,   nil,   nil,   nil,   nil,   nil,   nil,
   939,   988,   946,   nil,   nil,   nil,   953,   954,   nil,   959,
   963,   nil,   964,   nil,   nil,   968,  1280,   968,   819,   nil,
  1093,   nil, 21449,  1094,   nil, 21580,  4513,    93,  1097,   nil,
  1103,   480,  4653,   nil,  1104,   984,   554,   nil,   989,   985,
   553,   nil,   nil, 21711, 21842,  2693,  4793,   nil,   986,   987,
   nil,   988,   990,   992,   nil,  1017,   998,   987, 21973,   nil,
   nil,   nil,   nil,  4933,   nil,   nil,    32, 22104,   nil,  5073,
  5213,  1171,   nil,   nil, 24431,   nil,  6605,   nil,  8201,   nil,
 14521,   nil,   nil,   nil,   nil,   335,   951,   999,   nil,    33,
   nil,   nil,    39,   nil,   nil,   nil,  1140,   nil,   nil,   nil,
  1064,   nil,   nil,  1203,   nil,   nil, 24439,   nil, 24456,   nil,
 24495,   nil,   nil,  1045, 22235,  1006,  1101,   nil,  5353,    34,
    35,  1116,  1104,    36,   nil,  1047,  1154,   628,   nil,   nil,
   nil,  1032,  1034,  1036,  1039,  1050,  1291,  1051,  1307,  5493,
   nil,   nil,   nil,   nil,  5633,  1055,   nil,   nil,  1056,  1063,
  1064,  1069,   nil,  1074,   nil,  1146, 24106,   nil,  1201, 22366,
 24167, 24228,    42,   nil,   nil,   nil,  1183, 24512,   nil,   nil,
   nil,   nil,  1312,  1078,   706,  1203,   nil, 24520,   nil, 24572,
   nil, 24579,   nil, 24586,   nil,   nil,  1124,  1127,   nil,  1097,
    98,   102,   111,   138,   nil,  1108,  1109,   nil,   nil,  1110,
  1130,  1131,  1134,   145,   nil, 24593,   nil,   nil,   nil,   nil,
  1137,   nil ]

racc_action_default = [
    -3,  -607,    -1,  -593,    -4,  -607,    -7,  -607,  -607,  -607,
  -607,   -30,  -607,  -607,   -34,  -607,  -607,  -289,   -46,  -595,
  -607,   -51,   -55,   -56,   -57,   -61,  -266,  -266,  -266,  -302,
  -331,  -332,   -73,   -12,   -77,   -85,   -87,  -607,  -497,  -498,
  -607,  -607,  -607,  -607,  -225,  -607,  -595,  -239,  -280,  -281,
  -282,  -283,  -284,  -285,  -286,  -287,  -288,  -581,  -291,  -295,
  -606,  -571,  -310,  -393,  -607,  -607,   -53,   -53,  -593,  -607,
  -607,  -607,  -607,  -333,  -334,  -336,  -438,  -439,  -440,  -441,
  -442,  -463,  -445,  -446,  -465,  -467,  -450,  -455,  -459,  -461,
  -477,  -465,  -479,  -481,  -482,  -483,  -484,  -579,  -486,  -487,
  -580,  -489,  -490,  -491,  -492,  -493,  -494,  -495,  -496,  -501,
  -502,  -607,    -2,  -594,  -602,  -603,  -604,    -6,  -607,  -607,
  -607,  -607,  -607,    -8,    -3,   -18,  -607,  -116,  -117,  -118,
  -119,  -120,  -121,  -122,  -123,  -124,  -128,  -129,  -130,  -131,
  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,  -140,  -141,
  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -149,  -150,  -151,
  -152,  -153,  -154,  -155,  -156,  -157,  -158,  -159,  -160,  -161,
  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,  -170,  -171,
  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,  -180,  -181,
  -182,  -183,  -184,  -185,  -186,  -187,  -188,  -189,  -190,  -191,
  -192,  -193,  -194,  -195,  -196,  -197,  -198,   -23,  -125,   -12,
  -607,  -607,  -607,  -607,  -607,  -256,  -607,  -607,  -591,  -592,
  -607,  -607,  -595,  -596,   -50,  -607,  -497,  -498,  -607,  -289,
  -607,  -607,  -231,  -607,   -12,  -607,  -210,  -211,  -607,  -607,
  -607,  -607,  -607,  -607,  -607,  -607,  -607,  -607,  -607,  -607,
  -607,  -607,  -607,  -607,  -607,  -607,  -607,  -607,  -240,  -241,
  -242,  -243,  -607,  -402,  -404,  -607,  -589,  -590,   -62,  -256,
  -607,  -309,  -408,  -417,  -419,   -68,  -414,   -69,  -595,   -70,
  -246,  -261,  -270,  -270,  -265,  -607,  -271,  -607,  -463,  -573,
  -607,  -607,   -71,   -72,  -593,   -13,  -607,   -16,  -607,   -75,
   -12,  -595,  -607,   -78,   -81,   -12,   -93,   -94,  -607,  -607,
  -101,  -302,  -305,  -595,  -607,  -331,  -332,  -335,  -415,  -607,
   -83,  -607,   -89,  -299,  -480,  -607,  -219,  -220,  -607,  -232,
  -607,   -12,  -293,  -595,  -247,  -599,  -599,  -607,  -607,  -599,
  -607,  -311,  -312,  -529,   -52,  -607,  -607,  -607,   -12,   -12,
  -593,  -607,  -594,  -497,  -498,  -607,  -607,  -289,  -607,  -346,
  -347,  -111,  -112,  -607,  -114,  -607,  -289,  -505,  -607,  -497,
  -498,  -324,  -116,  -117,  -158,  -159,  -160,  -176,  -181,  -188,
  -191,  -326,  -607,  -569,  -607,  -443,  -607,  -607,  -607,  -607,
  -607,  -607,  -607,  -607,  1032,    -5,  -605,   -24,   -25,   -26,
   -27,   -28,  -607,  -607,   -20,   -21,   -22,  -126,  -607,   -31,
   -33,  -276,  -607,  -607,  -275,   -32,  -607,   -35,  -607,  -289,
   -43,   -45,  -199,  -251,  -271,   -47,   -48,   -36,  -200,  -251,
  -595,  -257,  -270,  -270,  -582,  -583,  -266,  -412,  -584,  -585,
  -583,  -582,  -266,  -411,  -413,  -584,  -585,   -42,  -207,   -49,
  -595,  -308,  -607,  -607,  -607,  -256,  -299,  -607,  -607,  -607,
  -208,  -209,  -212,  -213,  -214,  -215,  -216,  -217,  -221,  -222,
  -223,  -224,  -226,  -227,  -228,  -229,  -230,  -233,  -234,  -235,
  -236,  -595,  -244,  -423,  -266,  -582,  -583,   -59,   -63,  -595,
  -267,  -421,  -423,  -595,  -304,  -262,  -607,  -263,  -607,  -268,
  -607,  -272,  -607,  -576,  -578,   -11,  -594,   -15,   -17,  -595,
   -74,  -297,   -90,   -79,  -607,  -595,  -256,  -607,  -607,  -100,
  -607,  -480,  -607,   -86,   -91,  -607,  -607,  -607,  -607,  -245,
  -237,  -607,  -430,  -607,  -595,  -607,  -248,  -601,  -600,  -250,
  -601,  -300,  -301,  -572,  -394,  -529,  -397,  -568,  -568,  -512,
  -514,  -514,  -514,  -528,  -530,  -531,  -532,  -533,  -534,  -535,
  -536,  -537,  -607,  -539,  -541,  -543,  -548,  -550,  -551,  -553,
  -558,  -560,  -561,  -563,  -564,  -565,  -607,   -12,  -337,  -338,
   -12,  -607,  -607,  -607,  -607,  -607,  -607,  -256,  -607,  -607,
  -299,   -53,  -111,  -112,  -113,  -607,  -607,  -256,  -320,  -503,
  -607,   -12,  -507,  -328,  -595,  -444,  -464,  -469,  -607,  -471,
  -447,  -466,  -607,  -468,  -449,  -607,  -452,  -607,  -454,  -457,
  -607,  -458,  -607,  -478,    -9,   -19,  -607,   -29,  -279,  -607,
  -607,  -256,  -607,  -607,  -607,  -607,  -416,  -607,  -258,  -260,
  -607,  -607,   -64,  -255,  -409,  -607,  -607,   -66,  -410,  -307,
  -597,  -582,  -583,  -582,  -583,  -595,  -607,  -607,  -424,   -58,
  -405,  -421,  -253,  -607,  -382,  -607,  -303,  -270,  -269,  -273,
  -607,  -574,  -575,  -607,   -14,   -76,  -607,   -82,   -88,  -595,
  -582,  -583,  -254,  -586,   -99,  -607,   -84,  -607,  -206,  -218,
  -595,  -606,  -606,  -292,  -294,  -296,  -599,  -607,  -595,  -607,
  -510,  -511,  -607,  -607,  -521,  -607,  -524,  -607,  -526,  -607,
  -348,  -607,  -350,  -352,  -359,  -595,  -542,  -552,  -562,  -566,
  -606,  -339,  -606,   -54,  -340,  -341,  -315,  -316,  -607,  -318,
  -607,  -595,  -582,  -583,  -586,  -298,   -12,  -111,  -112,  -115,
  -595,   -12,  -607,  -322,  -607,   -12,  -529,  -529,  -607,  -570,
  -470,  -473,  -474,  -475,  -476,   -12,  -448,  -451,  -453,  -456,
  -460,  -462,  -127,  -277,  -607,  -595,  -582,  -583,  -583,  -582,
   -44,  -252,  -607,  -598,  -270,   -38,  -202,   -39,  -203,   -65,
   -40,  -205,   -41,  -204,   -67,  -607,  -607,  -607,  -607,  -416,
  -607,  -403,  -382,  -407,  -406,  -607,  -418,  -383,  -595,  -385,
   -12,  -420,  -264,  -274,  -577,   -80,  -416,   -92,  -306,  -606,
  -344,   -12,  -431,  -606,  -432,  -433,  -249,  -395,  -398,  -400,
  -387,  -607,  -568,  -549,  -567,  -513,  -514,  -514,  -540,  -514,
  -514,  -559,  -514,  -537,  -554,  -595,  -607,  -357,  -607,  -538,
  -607,  -342,  -607,  -607,  -317,  -607,   -12,  -416,  -607,  -416,
  -607,  -607,   -12,  -325,  -607,  -595,  -607,  -329,  -607,  -278,
  -416,   -37,  -201,  -259,  -607,  -238,   -12,   -60,  -568,  -568,
  -364,  -366,  -366,  -366,  -381,  -607,  -595,  -537,  -545,  -546,
  -556,  -422,   -10,   -12,  -437,  -345,  -607,  -607,  -435,   -12,
   -12,  -607,  -396,  -509,  -607,  -517,  -607,  -519,  -607,  -522,
  -607,  -525,  -527,  -349,  -351,  -355,  -607,  -360,  -313,  -607,
  -314,  -273,  -606,  -319,  -321,  -504,  -607,  -327,  -506,  -508,
  -507,  -472,  -425,  -607,  -362,  -363,  -372,  -374,  -607,  -377,
  -607,  -379,  -384,  -607,  -607,  -544,  -607,  -436,   -12,  -497,
  -498,  -607,  -607,  -289,  -434,  -607,  -607,  -595,  -389,  -391,
  -392,  -514,  -514,  -514,  -514,  -353,  -607,  -358,  -607,   -12,
  -426,  -427,  -428,  -323,   -12,  -568,  -547,  -365,  -366,  -366,
  -366,  -366,  -557,  -366,  -386,  -555,  -607,  -299,  -430,  -256,
  -607,  -607,  -299,  -399,  -401,  -388,  -607,  -607,  -515,  -518,
  -520,  -523,  -607,  -356,  -606,  -607,  -361,  -607,  -369,  -607,
  -371,  -607,  -375,  -607,  -378,  -380,  -298,  -586,  -429,  -595,
  -582,  -583,  -586,  -298,  -390,  -514,  -354,  -343,  -330,  -366,
  -366,  -366,  -366,  -416,  -516,  -607,  -367,  -370,  -373,  -376,
  -366,  -368 ]

clist = [
'221,216,334,303,381,130,130,585,16,266,272,276,691,16,264,281,281,281',
'116,317,317,341,125,208,414,415,430,330,225,133,133,112,345,346,745',
'533,350,225,225,225,6,16,308,308,497,6,348,349,636,135,135,282,282,282',
'317,317,317,546,436,442,488,561,577,580,536,539,553,16,543,130,113,224',
'225,225,302,123,225,355,365,365,489,523,335,116,828,265,397,398,399',
'400,344,344,324,827,344,829,351,840,594,332,427,2,283,283,283,299,447',
'484,671,821,320,700,701,301,421,663,386,421,268,275,277,16,831,421,809',
'872,225,225,225,225,16,948,16,336,339,904,117,668,972,668,950,800,715',
'657,344,344,344,344,367,371,671,1,665,6,387,843,279,292,293,615,617',
'393,401,882,6,611,613,616,616,674,207,611,360,410,403,723,661,626,328',
'337,660,383,338,907,342,358,598,382,873,331,534,333,741,852,497,601',
'602,748,920,874,437,281,876,947,544,817,343,972,697,875,453,889,890',
'483,446,491,492,16,225,418,225,225,418,225,792,402,1014,960,418,225',
'225,813,413,413,886,950,385,388,425,426,728,389,16,390,395,391,392,449',
'450,671,408,957,750,968,755,281,281,904,742,698,826,409,420,561,281',
'420,655,823,553,866,966,420,,789,677,302,,225,225,668,668,828,686,,951',
'795,225,933,,317,524,835,282,517,520,436,442,806,272,,282,993,276,,16',
'744,317,828,16,116,527,831,308,16,535,581,969,,970,,,,505,502,,,,679',
',308,739,,,,,,507,1016,,16,588,302,,283,,961,302,,,847,,283,964,,,225',
'16,16,849,682,878,506,,,,116,508,266,,682,521,1017,299,344,,,225,299',
'584,513,509,,,860,828,515,893,1019,,582,583,,225,758,600,758,,490,731',
',130,,,632,822,493,,,740,,604,637,,,,,,625,,,643,561,,561,133,816,648',
',802,,682,,924,925,779,,805,437,682,784,,281,765,603,135,850,,846,,854',
',446,,,,,,,1008,,855,856,656,225,561,561,,,643,553,553,,,671,436,442',
',,,,,,,524,,878,,,878,,878,524,878,,,,,,,317,,437,281,869,668,,814,317',
',,,437,,,16,446,877,428,,,,,308,448,225,446,775,777,642,996,308,780',
'782,421,647,802,,,,225,,,,421,421,,,,421,421,,,,704,706,708,916,690',
',878,,878,,878,,878,,,962,667,922,736,437,281,,,659,,,,437,,,281,,16',
'446,878,16,,,,446,,946,225,724,,,,,,,938,,225,451,,730,16,696,,561,',
',743,437,281,720,794,,722,,130,,,959,1023,965,,446,869,,869,815,869',
'637,,418,225,762,,16,,877,524,877,133,418,418,,793,,418,418,,807,,861',
',637,317,494,,,,643,135,995,648,,,317,,770,421,,,,820,857,420,,,308',
'510,,,,,,420,420,26,,308,420,420,26,,,,869,,869,,869,,869,,851,774,637',
'26,413,877,,,,,,637,26,26,26,,26,,,,869,,,,,,710,,,,,,,,16,130,637,',
',16,225,884,26,16,,888,,26,26,,448,26,428,16,,,,,344,,,,,,,,,848,,820',
'418,,,,,,,,,,1009,,,,,,858,,,,,,,,,,26,,16,,909,26,26,26,26,26,29,26',
',16,,29,682,420,,,,340,688,895,897,,899,901,649,902,29,,,,,881,,,,29',
'29,29,,29,225,,885,,16,,,820,,,16,,,317,,,915,,344,,,919,317,662,16',
'29,,666,,,29,29,,,29,710,935,912,837,,,16,,675,,941,,16,16,678,,,26',
'26,26,26,26,26,26,,,,,26,26,26,,,694,317,,,,,937,,980,26,985,29,945',
',,,29,29,29,29,29,,29,,975,776,778,,16,,781,783,,,,,988,989,990,991',
',,,,26,26,437,281,,16,,,,26,16,446,,,411,424,446,978,,,,824,,,824,225',
'749,26,637,,,26,,,,,26,,994,,,927,929,931,,,,,710,,710,,13,,,,1024,13',
',,,,26,29,29,29,29,29,29,29,,,,,29,29,29,,26,26,26,,,,,13,,,29,499,',
'501,,,503,504,,,,26,,,,,,,,,,,,13,808,862,,26,,955,710,,870,359,,29',
'29,,776,778,783,781,,,29,830,,832,,839,998,1000,1002,1004,,1005,,,,',
',,29,,,,29,,,,,29,,,,,,13,,,710,,710,,,,13,15,13,,,,15,,,,,29,26,,,1026',
'1027,1028,1029,,,,,,,,1031,29,29,29,710,862,,,15,,,,,,,,628,,,,,,29',
',,,871,,,,,,,,15,,,26,29,,,,,,,824,,26,870,,870,,870,,,,,903,,,,13,26',
'416,,,416,,,,,,416,,,,,918,,,,,,,,,13,,15,,,,,,,,,15,,15,669,,340,,672',
',,,26,29,,26,,,,,,,26,870,,870,952,870,953,870,954,,26,,,,26,,,,,,,',
',669,,,340,,,870,13,,,,13,,,,971,13,973,,29,26,26,,,26,,,,716,29,26',
'26,,,,26,26,,,,,,13,15,29,15,,,15,424,,,,,15,,,,,13,13,,,,,,,,15,,,',
',,1015,,,,,,,,,,1020,,1021,,1022,,29,,763,29,,,,,,,29,669,340,,,,,,',
',29,,1030,,29,,,,,,,,,,,,26,,,,15,26,26,803,15,26,804,,,15,,,,29,29',
'26,,29,,,,,,29,29,812,,,29,29,,,26,,,15,,,,,,,834,,,,,,,,,,15,15,,,',
',,,26,,,,,,,,,,,26,,,,,,,,,,,,,,,,13,,,,,,,,,,859,,,,,26,,,,26,,,,,',
'26,,,,,,,29,,,,,29,29,26,,29,,,,17,,,,,17,29,,,,,26,,,,,,26,26,,,,,29',
',,13,,,13,,,,17,310,310,,,,,,,,,,,911,,,,13,29,,,,,,,,17,,,29,,340,',
'26,,,357,366,366,,,,,,,15,416,,,,13,,,,26,,416,416,,26,29,416,416,,29',
',,,,,29,,,,26,,,,,,17,,,,29,,,,,17,,17,,,,,,,,,,29,,,,,,29,29,,,,,,',
',15,,,15,,,,,,,,,,,,,,,,,,,,,15,,,,,,,,,,,,13,,,,29,13,,,,13,,,,,,,',
'15,,13,,15,,,17,29,419,15,15,419,29,,15,15,,419,416,,,,,,,,,29,,,,17',
',,,,,,,,,,,,,,13,,,,,,,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,13,17',
',,,17,13,,,310,17,,,15,,,,,15,,13,,15,,,,310,,38,,,,15,38,,,17,13,,',
',944,,13,13,,,,,15,,,,17,17,,,,,,,38,306,306,,,,,,,,,,,,,,15,,,,,,,',
',,38,15,,,,13,,,,,353,369,369,369,,,,,,,,,,,,,13,,,,,13,,,,39,15,,,',
'39,,15,,,,,,,,,,,,38,,15,,,,,,,38,,38,,,39,307,307,,,15,,,,,,15,15,',
',,,,,,,,,,,,39,,,,,,,,,,354,370,370,370,,,,,,,,,,,,,,,,,17,,,,15,,,',
'310,,,,,,,,310,,,,,,,,39,15,38,,,,15,,,39,,39,,,,,,,,,,,,,,,,38,,,,',
',,,,,,,,,,,,,,,17,,,17,,,,,,,,,,,,,,,,,,,,,17,,,,,,,754,,,,,,,,,,,38',
',,,38,,,39,306,38,,419,,,,17,,,,,,419,419,,,306,419,419,,,,,39,,,38',
',,,,,,,,,,,,,,,,38,38,,,,310,,,,,,,,,,,310,,,,,,,,,,,,,,,,,,,,,,,,,',
'39,,,,39,,,,307,39,,,,,,,,,,,,,,17,,307,,,17,,,,17,,,39,,,,,,,17,,,',
',,,,,,39,39,,,,,,419,,,,,,,,,,,,,,,,,,,,,,,,,,,,17,,,,,,,,,,,17,,,,',
',,,,,,,,,,,,,38,,,,,,,,306,,,,,,,,306,17,,,,,,17,,,,,,,,,,,,,,17,,,',
',,,,,,,,366,,,,,17,,,,943,,17,17,,,,,,,,,,38,,,38,,,,,,,,,,,,,,,,,,',
',39,38,,,,,,,307,,,366,,,,17,307,,,,,,,,,,,,,,,,,,38,,17,,,,,17,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,39,,,39,,306,,,,,,,,,,,306,,,,,,,,39,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,39,,,,,,,,38,,,,,38,,,,38,,,,,,,,,,38,,,,',
',,,,,,,,,,307,,,,,,232,,,,,307,,,,280,280,280,,,,,,,,,,,326,327,38,329',
',,,,,,,,,38,,,,,280,280,,,,,,,,,,,,,39,,,,,39,,,,39,,,,,,,38,,,39,,',
'38,,,,,,,,,,,,,,38,,,,,,,,,,,,369,,,,,38,,,,939,,38,38,,,,39,,,,,,,',
',,,39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,369,,,,38,,39,,,,,,39,,,,,,,,,,,,',
'38,39,,,,38,,280,423,,,429,280,370,,,,429,39,,,,940,,39,39,,,,,232,',
',460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476',
'477,478,479,480,481,,,,,482,,,,,,,280,280,,370,,,,39,,280,,,,,,,280',
',280,,,280,280,,,,,,39,,,,,39,,,,,,,,,,,,,,,,,,,,,,,,,,529,,530,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,280,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,280,,429,429',
'429,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,280,,280,,280,,,,,,,,,,,,,,',
',280,,,,,,,,,429,689,,,,,,,,,,,280,,,280,,,,,,,,,,,,,,,,,,,,,,,,,280',
',,,,,,,,,,,,,,,,,,,,280,280,,,,,,,,,,280,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,280,429,280,,,,771,,,280,280,429,429,,,,429,429,,,,,,,,,,,,,,,,',
',,,,,,,280,,,280,,,,,,,,,,,,,,,,,,,280,,,,,,,,,,,,,,,,,280,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,280,,,,,,,,429,,,,,,,,',
',,,,429,429,429,429,,865,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,280,,,,,,,,,,,,,,,,,,280,429,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,280' ]
        racc_goto_table = arr = ::Array.new(3624, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'34,32,77,56,63,64,64,101,29,32,81,81,11,29,141,39,39,39,104,73,73,96',
'16,16,23,23,30,34,29,67,67,4,18,18,105,9,18,29,29,29,7,29,29,29,83,7',
'36,36,31,68,68,78,78,78,73,73,73,140,43,43,45,175,99,99,79,79,170,29',
'79,64,6,21,29,29,10,8,29,29,29,29,30,58,78,104,176,42,18,18,18,18,25',
'25,71,129,25,129,4,100,61,7,27,2,80,80,80,52,27,43,185,132,57,123,123',
'53,19,46,158,19,44,44,44,29,181,19,12,128,29,29,29,29,29,134,29,80,80',
'116,5,84,182,84,135,130,118,144,25,25,25,25,62,62,185,1,144,7,159,12',
'51,51,51,162,162,159,7,13,7,163,163,163,163,15,17,163,20,24,26,37,48',
'69,74,76,82,94,95,119,98,102,103,106,129,107,108,109,110,111,83,112',
'113,114,115,120,81,39,126,133,136,137,138,182,139,132,32,142,143,145',
'64,147,148,29,29,29,29,29,29,29,151,2,134,152,29,29,29,153,78,78,154',
'135,157,160,25,25,101,161,29,164,5,165,166,25,25,185,10,119,167,128',
'168,39,39,116,169,140,174,21,21,175,39,21,30,178,170,130,179,21,,31',
'58,10,,29,29,84,84,176,58,,129,46,29,132,,73,56,118,78,32,34,43,43,31',
'81,,78,119,81,,29,9,73,176,29,104,32,181,29,29,34,18,129,,129,,,,4,158',
',,,30,,29,61,,,,,,7,119,,29,32,10,,80,,12,10,,,31,,80,105,,,29,29,29',
'31,43,177,6,,,,104,8,32,,43,71,100,52,25,,,29,52,4,57,53,,,31,176,53',
'123,129,,10,10,,29,163,25,163,,51,30,,64,,,32,122,51,,,30,,25,34,,,',
',,16,,,81,175,,175,67,79,81,,83,,43,,123,123,45,,58,81,43,45,,39,30',
'42,68,9,,99,,9,,64,,,,,,,11,,140,140,34,29,175,175,,,81,170,170,,,185',
'43,43,,,,,,,,56,,177,,,177,,177,56,177,,,,,,,73,,81,39,122,84,,23,73',
',,,81,,,29,64,175,70,,,,,29,70,29,64,27,27,44,123,29,27,27,19,44,83',
',,,29,,,,19,19,,,,19,19,,,,173,173,173,9,25,,177,,177,,177,,177,,,101',
'80,9,36,81,39,,,44,,,,81,,,39,,29,64,177,29,,,,64,,9,29,104,,,,,,,99',
',29,54,,78,29,80,,175,,,104,81,39,10,96,,10,,64,,,99,31,122,,64,122',
',122,77,122,34,,29,29,16,,29,,175,56,175,67,29,29,,141,,29,29,,56,,27',
',34,73,54,,,,81,68,9,81,,,73,,7,19,,,,34,63,21,,,29,54,,,,,,21,21,47',
',29,21,21,47,,,,122,,122,,122,,122,,18,80,34,47,78,175,,,,,,34,47,47',
'47,,47,,,,122,,,,,,117,,,,,,,,29,64,34,,,29,29,77,47,29,,77,,47,47,',
'70,47,70,29,,,,,25,,,,,,,,,10,,34,29,,,,,,,,,,30,,,,,,10,,,,,,,,,,47',
',29,,18,47,47,47,47,47,50,47,,29,,50,43,21,,,,75,70,173,173,,173,173',
'54,173,50,,,,,10,,,,50,50,50,,50,29,,10,,29,,,34,,,29,,,73,,,104,,25',
',,104,73,54,29,50,,54,,,50,50,,,50,117,29,10,117,,,29,,54,,29,,29,29',
'54,,,47,47,47,47,47,47,47,,,,,47,47,47,,,54,73,,,,,10,,32,47,34,50,10',
',,,50,50,50,50,50,,50,,29,70,70,,29,,70,70,,,,,173,173,173,173,,,,,47',
'47,81,39,,29,,,,47,29,64,,,75,75,64,10,,,,124,,,124,29,54,47,34,,,47',
',,,,47,,10,,,125,125,125,,,,,117,,117,,22,,,,173,22,,,,,47,50,50,50',
'50,50,50,50,,,,,50,50,50,,47,47,47,,,,,22,,,50,75,,75,,,75,75,,,,47',
',,,,,,,,,,,22,54,70,,47,,117,117,,124,22,,50,50,,70,70,70,70,,,50,127',
',127,,54,125,125,125,125,,125,,,,,,,50,,,,50,,,,,50,,,,,,22,,,117,,117',
',,,22,28,22,,,,28,,,,,50,47,,,125,125,125,125,,,,,,,,125,50,50,50,117',
'70,,,28,,,,,,,,75,,,,,,50,,,,127,,,,,,,,28,,,47,50,,,,,,,124,,47,124',
',124,,124,,,,,54,,,,22,47,22,,,22,,,,,,22,,,,,54,,,,,,,,,22,,28,,,,',
',,,,28,,28,75,,75,,75,,,,47,50,,47,,,,,,,47,124,,124,127,124,127,124',
'127,,47,,,,47,,,,,,,,,75,,,75,,,124,22,,,,22,,,,127,22,127,,50,47,47',
',,47,,,,75,50,47,47,,,,47,47,,,,,,22,28,50,28,,,28,75,,,,,28,,,,,22',
'22,,,,,,,,28,,,,,,127,,,,,,,,,,127,,127,,127,,50,,75,50,,,,,,,50,75',
'75,,,,,,,,50,,127,,50,,,,,,,,,,,,47,,,,28,47,47,75,28,47,75,,,28,,,',
'50,50,47,,50,,,,,,50,50,75,,,50,50,,,47,,,28,,,,,,,75,,,,,,,,,,28,28',
',,,,,,47,,,,,,,,,,,47,,,,,,,,,,,,,,,,22,,,,,,,,,,75,,,,,47,,,,47,,,',
',,47,,,,,,,50,,,,,50,50,47,,50,,,,33,,,,,33,50,,,,,47,,,,,,47,47,,,',
',50,,,22,,,22,,,,33,33,33,,,,,,,,,,,75,,,,22,50,,,,,,,,33,,,50,,75,',
'47,,,33,33,33,,,,,,,28,22,,,,22,,,,47,,22,22,,47,50,22,22,,50,,,,,,50',
',,,47,,,,,,33,,,,50,,,,,33,,33,,,,,,,,,,50,,,,,,50,50,,,,,,,,28,,,28',
',,,,,,,,,,,,,,,,,,,,28,,,,,,,,,,,,22,,,,50,22,,,,22,,,,,,,,28,,22,,28',
',,33,50,33,28,28,33,50,,28,28,,33,22,,,,,,,,,50,,,,33,,,,,,,,,,,,,,',
'22,,,,,,,,,,,22,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,33,,,,33,22,,,33',
'33,,,28,,,,,28,,22,,28,,,,33,,59,,,,28,59,,,33,22,,,,22,,22,22,,,,,28',
',,,33,33,,,,,,,59,59,59,,,,,,,,,,,,,,28,,,,,,,,,,59,28,,,,22,,,,,59',
'59,59,59,,,,,,,,,,,,,22,,,,,22,,,,60,28,,,,60,,28,,,,,,,,,,,,59,,28',
',,,,,,59,,59,,,60,60,60,,,28,,,,,,28,28,,,,,,,,,,,,,,60,,,,,,,,,,60',
'60,60,60,,,,,,,,,,,,,,,,,33,,,,28,,,,33,,,,,,,,33,,,,,,,,60,28,59,,',
',28,,,60,,60,,,,,,,,,,,,,,,,59,,,,,,,,,,,,,,,,,,,,33,,,33,,,,,,,,,,',
',,,,,,,,,,33,,,,,,,33,,,,,,,,,,,59,,,,59,,,60,59,59,,33,,,,33,,,,,,33',
'33,,,59,33,33,,,,,60,,,59,,,,,,,,,,,,,,,,,59,59,,,,33,,,,,,,,,,,33,',
',,,,,,,,,,,,,,,,,,,,,,,,60,,,,60,,,,60,60,,,,,,,,,,,,,,33,,60,,,33,',
',,33,,,60,,,,,,,33,,,,,,,,,,60,60,,,,,,33,,,,,,,,,,,,,,,,,,,,,,,,,,',
',33,,,,,,,,,,,33,,,,,,,,,,,,,,,,,,59,,,,,,,,59,,,,,,,,59,33,,,,,,33',
',,,,,,,,,,,,,33,,,,,,,,,,,,33,,,,,33,,,,33,,33,33,,,,,,,,,,59,,,59,',
',,,,,,,,,,,,,,,,,,60,59,,,,,,,60,,,33,,,,33,60,,,,,,,,,,,,,,,,,,59,',
'33,,,,,33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,60,,,60,,59,,,,,,,,,,,59,,,,',
',,,60,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,60,,,,,,,,59,,,,,59,,,,59,,,,',
',,,,,59,,,,,,,,,,,,,,,60,,,,,,35,,,,,60,,,,35,35,35,,,,,,,,,,,35,35',
'59,35,,,,,,,,,,59,,,,,35,35,,,,,,,,,,,,,60,,,,,60,,,,60,,,,,,,59,,,60',
',,59,,,,,,,,,,,,,,59,,,,,,,,,,,,59,,,,,59,,,,59,,59,59,,,,60,,,,,,,',
',,,60,,,,,,,,,,,,,,,,,,,,,,,,,,,,,59,,,,59,,60,,,,,,60,,,,,,,,,,,,,59',
'60,,,,59,,35,35,,,35,35,60,,,,35,60,,,,60,,60,60,,,,,35,,,35,35,35,35',
'35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,,,,,35,,,,,,,35',
'35,,60,,,,60,,35,,,,,,,35,,35,,,35,35,,,,,,60,,,,,60,,,,,,,,,,,,,,,',
',,,,,,,,,,35,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,35,,35,35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,35,,35,',
',,,,,,,,,,,,,,35,,,,,,,,,35,35,,,,,,,,,,,35,,,35,,,,,,,,,,,,,,,,,,,',
',,,,,35,,,,,,,,,,,,,,,,,,,,,35,35,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,35,35,35,,,,35,,,35,35,35,35,,,,35,35,,,,,,,,,,,,,,,,,,,,,',
',,35,,,35,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,35,,,,,,,,,,,,,35,35,35',
'35,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,',
',,,,,,,,,,,,,35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35' ]
        racc_goto_check = arr = ::Array.new(3624, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   151,   101,   nil,    28,   131,    67,    40,    68,  -296,
    41,  -520,  -567,  -646,   nil,  -337,    14,   161,   -32,   -97,
   103,    51,  1014,  -186,   -37,    26,    49,  -114,  1137,     8,
  -189,  -382,   -15,  1565,   -19,  2644,   -20,  -406,   nil,   -14,
   nil,   nil,    61,  -158,    92,  -208,  -376,   693,  -311,   nil,
   816,   127,    72,    80,   384,   nil,   -31,    75,  -240,  1888,
  1982,  -265,    78,   -68,    -3,   nil,   nil,    21,    41,  -230,
   303,    51,   nil,   -15,   134,   766,   119,   -58,    22,  -271,
    73,   -16,  -304,  -239,  -359,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   109,   121,   -41,   nil,   121,  -283,
  -623,  -344,   116,  -181,    15,  -568,   115,   131,  -142,   132,
  -406,  -550,  -176,  -185,  -406,  -659,  -701,   174,  -420,  -655,
  -599,   nil,  -295,  -436,   284,   132,  -596,   390,  -673,  -610,
  -523,   nil,  -589,  -688,  -760,  -751,  -139,  -492,   143,  -336,
  -286,    -8,  -607,  -607,  -340,   -50,   nil,   -58,   -58,   nil,
   nil,  -434,  -685,  -461,  -579,   nil,   nil,   157,    35,    70,
   152,   155,  -230,  -222,   156,   157,   157,  -356,  -355,  -341,
  -277,   nil,   nil,     3,  -443,  -282,  -619,  -438,  -432,  -653,
   nil,  -583,  -790,   nil,   nil,  -390 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   352,   297,   nil,   nil,
   532,   nil,   841,   nil,   294,   295,   nil,   nil,   nil,    11,
    12,    18,   230,   nil,   nil,    14,   nil,   417,   231,   325,
   nil,   nil,   596,   229,   452,    21,   nil,   nil,   347,    22,
    23,    24,   nil,   685,   nil,   nil,   nil,   314,   nil,    25,
   311,   431,    32,   nil,   nil,    34,    37,    36,   nil,   226,
   227,   364,   nil,   132,   439,   131,   134,    77,    78,   nil,
   422,    92,    44,    47,   262,   286,   nil,   810,   432,   nil,
   433,   444,   644,   495,   284,   270,    48,    49,    50,    51,
    52,    53,    54,    55,    56,   nil,   271,    62,   nil,   nil,
   nil,   nil,   nil,   nil,   578,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   712,   560,   nil,   713,
   967,   868,   548,   nil,   549,   nil,   nil,   550,   nil,   552,
   nil,   797,   nil,   nil,   nil,   558,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   443,   nil,   nil,   664,
   658,   nil,   nil,   nil,   nil,    76,    79,    80,   nil,   nil,
   nil,   nil,   nil,   606,   nil,   nil,   nil,   nil,   nil,   nil,
   825,   747,   547,   nil,   551,   833,   563,   565,   566,   879,
   569,   570,   880,   573,   576,   289 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 146, :_reduce_none,
  2, 147, :_reduce_2,
  0, 148, :_reduce_3,
  1, 148, :_reduce_4,
  3, 148, :_reduce_5,
  2, 148, :_reduce_6,
  1, 150, :_reduce_none,
  2, 150, :_reduce_8,
  3, 153, :_reduce_9,
  4, 154, :_reduce_10,
  2, 155, :_reduce_11,
  0, 159, :_reduce_12,
  1, 159, :_reduce_13,
  3, 159, :_reduce_14,
  2, 159, :_reduce_15,
  1, 160, :_reduce_none,
  2, 160, :_reduce_17,
  0, 171, :_reduce_18,
  4, 152, :_reduce_19,
  3, 152, :_reduce_20,
  3, 152, :_reduce_21,
  3, 152, :_reduce_22,
  2, 152, :_reduce_23,
  3, 152, :_reduce_24,
  3, 152, :_reduce_25,
  3, 152, :_reduce_26,
  3, 152, :_reduce_27,
  3, 152, :_reduce_28,
  4, 152, :_reduce_29,
  1, 152, :_reduce_none,
  3, 152, :_reduce_31,
  3, 152, :_reduce_32,
  3, 152, :_reduce_33,
  1, 152, :_reduce_none,
  3, 164, :_reduce_35,
  3, 164, :_reduce_36,
  6, 164, :_reduce_37,
  5, 164, :_reduce_38,
  5, 164, :_reduce_39,
  5, 164, :_reduce_40,
  5, 164, :_reduce_41,
  3, 164, :_reduce_42,
  1, 172, :_reduce_none,
  3, 172, :_reduce_44,
  1, 172, :_reduce_none,
  1, 170, :_reduce_none,
  3, 170, :_reduce_47,
  3, 170, :_reduce_48,
  3, 170, :_reduce_49,
  2, 170, :_reduce_50,
  1, 170, :_reduce_none,
  1, 163, :_reduce_none,
  0, 183, :_reduce_53,
  3, 181, :_reduce_54,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 185, :_reduce_none,
  4, 185, :_reduce_58,
  0, 193, :_reduce_59,
  4, 190, :_reduce_60,
  1, 192, :_reduce_none,
  2, 184, :_reduce_62,
  3, 184, :_reduce_63,
  4, 184, :_reduce_64,
  5, 184, :_reduce_65,
  4, 184, :_reduce_66,
  5, 184, :_reduce_67,
  2, 184, :_reduce_68,
  2, 184, :_reduce_69,
  2, 184, :_reduce_70,
  2, 184, :_reduce_71,
  2, 184, :_reduce_72,
  1, 165, :_reduce_73,
  3, 165, :_reduce_74,
  1, 198, :_reduce_75,
  3, 198, :_reduce_76,
  1, 197, :_reduce_none,
  2, 197, :_reduce_78,
  3, 197, :_reduce_79,
  5, 197, :_reduce_80,
  2, 197, :_reduce_81,
  4, 197, :_reduce_82,
  2, 197, :_reduce_83,
  4, 197, :_reduce_84,
  1, 197, :_reduce_85,
  3, 197, :_reduce_86,
  1, 201, :_reduce_none,
  3, 201, :_reduce_88,
  2, 200, :_reduce_89,
  3, 200, :_reduce_90,
  1, 203, :_reduce_91,
  3, 203, :_reduce_92,
  1, 202, :_reduce_93,
  1, 202, :_reduce_94,
  4, 202, :_reduce_95,
  3, 202, :_reduce_96,
  3, 202, :_reduce_97,
  3, 202, :_reduce_98,
  3, 202, :_reduce_99,
  2, 202, :_reduce_100,
  1, 202, :_reduce_101,
  1, 167, :_reduce_102,
  1, 167, :_reduce_103,
  4, 167, :_reduce_104,
  3, 167, :_reduce_105,
  3, 167, :_reduce_106,
  3, 167, :_reduce_107,
  3, 167, :_reduce_108,
  2, 167, :_reduce_109,
  1, 167, :_reduce_110,
  1, 206, :_reduce_111,
  1, 206, :_reduce_none,
  2, 207, :_reduce_113,
  1, 207, :_reduce_114,
  3, 207, :_reduce_115,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 211, :_reduce_121,
  1, 211, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 162, :_reduce_125,
  0, 214, :_reduce_126,
  4, 162, :_reduce_127,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  3, 180, :_reduce_199,
  3, 180, :_reduce_200,
  6, 180, :_reduce_201,
  5, 180, :_reduce_202,
  5, 180, :_reduce_203,
  5, 180, :_reduce_204,
  5, 180, :_reduce_205,
  4, 180, :_reduce_206,
  3, 180, :_reduce_207,
  3, 180, :_reduce_208,
  3, 180, :_reduce_209,
  2, 180, :_reduce_210,
  2, 180, :_reduce_211,
  3, 180, :_reduce_212,
  3, 180, :_reduce_213,
  3, 180, :_reduce_214,
  3, 180, :_reduce_215,
  3, 180, :_reduce_216,
  3, 180, :_reduce_217,
  4, 180, :_reduce_218,
  2, 180, :_reduce_219,
  2, 180, :_reduce_220,
  3, 180, :_reduce_221,
  3, 180, :_reduce_222,
  3, 180, :_reduce_223,
  3, 180, :_reduce_224,
  1, 180, :_reduce_none,
  3, 180, :_reduce_226,
  3, 180, :_reduce_227,
  3, 180, :_reduce_228,
  3, 180, :_reduce_229,
  3, 180, :_reduce_230,
  2, 180, :_reduce_231,
  2, 180, :_reduce_232,
  3, 180, :_reduce_233,
  3, 180, :_reduce_234,
  3, 180, :_reduce_235,
  3, 180, :_reduce_236,
  3, 180, :_reduce_237,
  6, 180, :_reduce_238,
  1, 180, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  3, 217, :_reduce_244,
  3, 217, :_reduce_245,
  1, 220, :_reduce_none,
  1, 221, :_reduce_none,
  2, 221, :_reduce_none,
  4, 221, :_reduce_249,
  2, 221, :_reduce_250,
  1, 215, :_reduce_none,
  3, 215, :_reduce_252,
  3, 226, :_reduce_253,
  0, 227, :_reduce_254,
  1, 227, :_reduce_none,
  0, 175, :_reduce_256,
  1, 175, :_reduce_none,
  2, 175, :_reduce_none,
  4, 175, :_reduce_259,
  2, 175, :_reduce_260,
  1, 196, :_reduce_261,
  2, 196, :_reduce_262,
  2, 196, :_reduce_263,
  4, 196, :_reduce_264,
  1, 196, :_reduce_265,
  0, 230, :_reduce_266,
  2, 189, :_reduce_267,
  2, 229, :_reduce_268,
  2, 228, :_reduce_269,
  0, 228, :_reduce_270,
  1, 223, :_reduce_271,
  2, 223, :_reduce_272,
  3, 223, :_reduce_273,
  4, 223, :_reduce_274,
  1, 169, :_reduce_275,
  1, 169, :_reduce_none,
  3, 168, :_reduce_277,
  4, 168, :_reduce_278,
  2, 168, :_reduce_279,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_290,
  0, 252, :_reduce_291,
  4, 218, :_reduce_292,
  0, 253, :_reduce_293,
  4, 218, :_reduce_294,
  0, 254, :_reduce_295,
  4, 218, :_reduce_296,
  3, 218, :_reduce_297,
  3, 218, :_reduce_298,
  2, 218, :_reduce_299,
  3, 218, :_reduce_300,
  3, 218, :_reduce_301,
  1, 218, :_reduce_302,
  4, 218, :_reduce_303,
  3, 218, :_reduce_304,
  1, 218, :_reduce_305,
  5, 218, :_reduce_306,
  4, 218, :_reduce_307,
  3, 218, :_reduce_308,
  2, 218, :_reduce_309,
  1, 218, :_reduce_none,
  2, 218, :_reduce_311,
  2, 218, :_reduce_312,
  6, 218, :_reduce_313,
  6, 218, :_reduce_314,
  4, 218, :_reduce_315,
  4, 218, :_reduce_316,
  5, 218, :_reduce_317,
  4, 218, :_reduce_318,
  6, 218, :_reduce_319,
  0, 255, :_reduce_320,
  6, 218, :_reduce_321,
  0, 256, :_reduce_322,
  7, 218, :_reduce_323,
  0, 257, :_reduce_324,
  5, 218, :_reduce_325,
  0, 258, :_reduce_326,
  6, 218, :_reduce_327,
  0, 259, :_reduce_328,
  0, 260, :_reduce_329,
  9, 218, :_reduce_330,
  1, 218, :_reduce_331,
  1, 218, :_reduce_332,
  1, 218, :_reduce_333,
  1, 218, :_reduce_334,
  1, 174, :_reduce_none,
  1, 195, :_reduce_336,
  1, 244, :_reduce_none,
  1, 244, :_reduce_none,
  2, 244, :_reduce_339,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 245, :_reduce_none,
  5, 245, :_reduce_343,
  1, 157, :_reduce_none,
  2, 157, :_reduce_345,
  1, 247, :_reduce_none,
  1, 247, :_reduce_none,
  1, 261, :_reduce_348,
  3, 261, :_reduce_349,
  1, 264, :_reduce_350,
  3, 264, :_reduce_351,
  1, 263, :_reduce_none,
  4, 263, :_reduce_353,
  6, 263, :_reduce_354,
  3, 263, :_reduce_355,
  5, 263, :_reduce_356,
  2, 263, :_reduce_357,
  4, 263, :_reduce_358,
  1, 263, :_reduce_359,
  3, 263, :_reduce_360,
  4, 265, :_reduce_361,
  2, 265, :_reduce_362,
  2, 265, :_reduce_363,
  1, 265, :_reduce_364,
  2, 270, :_reduce_365,
  0, 270, :_reduce_366,
  6, 271, :_reduce_367,
  8, 271, :_reduce_368,
  4, 271, :_reduce_369,
  6, 271, :_reduce_370,
  4, 271, :_reduce_371,
  2, 271, :_reduce_none,
  6, 271, :_reduce_373,
  2, 271, :_reduce_374,
  4, 271, :_reduce_375,
  6, 271, :_reduce_376,
  2, 271, :_reduce_377,
  4, 271, :_reduce_378,
  2, 271, :_reduce_379,
  4, 271, :_reduce_380,
  1, 271, :_reduce_none,
  0, 275, :_reduce_382,
  1, 275, :_reduce_383,
  3, 276, :_reduce_384,
  1, 276, :_reduce_385,
  4, 276, :_reduce_386,
  1, 277, :_reduce_387,
  4, 277, :_reduce_388,
  1, 278, :_reduce_389,
  3, 278, :_reduce_390,
  1, 279, :_reduce_391,
  1, 279, :_reduce_none,
  0, 283, :_reduce_393,
  0, 284, :_reduce_394,
  4, 243, :_reduce_395,
  4, 281, :_reduce_396,
  1, 281, :_reduce_397,
  0, 287, :_reduce_398,
  4, 282, :_reduce_399,
  0, 288, :_reduce_400,
  4, 282, :_reduce_401,
  0, 290, :_reduce_402,
  4, 286, :_reduce_403,
  2, 186, :_reduce_404,
  4, 186, :_reduce_405,
  5, 186, :_reduce_406,
  5, 186, :_reduce_407,
  2, 242, :_reduce_408,
  4, 242, :_reduce_409,
  4, 242, :_reduce_410,
  3, 242, :_reduce_411,
  3, 242, :_reduce_412,
  3, 242, :_reduce_413,
  2, 242, :_reduce_414,
  1, 242, :_reduce_415,
  4, 242, :_reduce_416,
  0, 292, :_reduce_417,
  4, 241, :_reduce_418,
  0, 293, :_reduce_419,
  4, 241, :_reduce_420,
  0, 294, :_reduce_421,
  3, 191, :_reduce_422,
  0, 295, :_reduce_423,
  0, 296, :_reduce_424,
  4, 289, :_reduce_425,
  5, 246, :_reduce_426,
  1, 297, :_reduce_427,
  1, 297, :_reduce_none,
  6, 156, :_reduce_429,
  0, 156, :_reduce_430,
  1, 298, :_reduce_431,
  1, 298, :_reduce_none,
  1, 298, :_reduce_none,
  2, 299, :_reduce_434,
  1, 299, :_reduce_none,
  2, 158, :_reduce_436,
  1, 158, :_reduce_none,
  1, 231, :_reduce_none,
  1, 231, :_reduce_none,
  1, 231, :_reduce_none,
  1, 232, :_reduce_441,
  1, 301, :_reduce_442,
  2, 301, :_reduce_443,
  3, 302, :_reduce_444,
  1, 302, :_reduce_445,
  1, 302, :_reduce_446,
  3, 233, :_reduce_447,
  4, 234, :_reduce_448,
  3, 235, :_reduce_449,
  0, 306, :_reduce_450,
  3, 306, :_reduce_451,
  1, 307, :_reduce_452,
  2, 307, :_reduce_453,
  3, 237, :_reduce_454,
  0, 309, :_reduce_455,
  3, 309, :_reduce_456,
  3, 236, :_reduce_457,
  3, 238, :_reduce_458,
  0, 310, :_reduce_459,
  3, 310, :_reduce_460,
  0, 311, :_reduce_461,
  3, 311, :_reduce_462,
  0, 303, :_reduce_463,
  2, 303, :_reduce_464,
  0, 304, :_reduce_465,
  2, 304, :_reduce_466,
  0, 305, :_reduce_467,
  2, 305, :_reduce_468,
  1, 308, :_reduce_469,
  2, 308, :_reduce_470,
  0, 313, :_reduce_471,
  4, 308, :_reduce_472,
  1, 312, :_reduce_473,
  1, 312, :_reduce_474,
  1, 312, :_reduce_475,
  1, 312, :_reduce_none,
  1, 212, :_reduce_477,
  3, 213, :_reduce_478,
  1, 300, :_reduce_479,
  2, 300, :_reduce_480,
  1, 216, :_reduce_481,
  1, 216, :_reduce_482,
  1, 216, :_reduce_483,
  1, 216, :_reduce_484,
  1, 204, :_reduce_485,
  1, 204, :_reduce_486,
  1, 204, :_reduce_487,
  1, 204, :_reduce_488,
  1, 204, :_reduce_489,
  1, 205, :_reduce_490,
  1, 205, :_reduce_491,
  1, 205, :_reduce_492,
  1, 205, :_reduce_493,
  1, 205, :_reduce_494,
  1, 205, :_reduce_495,
  1, 205, :_reduce_496,
  1, 239, :_reduce_497,
  1, 239, :_reduce_498,
  1, 173, :_reduce_499,
  1, 173, :_reduce_500,
  1, 178, :_reduce_501,
  1, 178, :_reduce_502,
  0, 314, :_reduce_503,
  4, 248, :_reduce_504,
  0, 248, :_reduce_505,
  3, 250, :_reduce_506,
  0, 316, :_reduce_507,
  3, 250, :_reduce_508,
  4, 315, :_reduce_509,
  2, 315, :_reduce_510,
  2, 315, :_reduce_511,
  1, 315, :_reduce_512,
  2, 318, :_reduce_513,
  0, 318, :_reduce_514,
  6, 285, :_reduce_515,
  8, 285, :_reduce_516,
  4, 285, :_reduce_517,
  6, 285, :_reduce_518,
  4, 285, :_reduce_519,
  6, 285, :_reduce_520,
  2, 285, :_reduce_521,
  4, 285, :_reduce_522,
  6, 285, :_reduce_523,
  2, 285, :_reduce_524,
  4, 285, :_reduce_525,
  2, 285, :_reduce_526,
  4, 285, :_reduce_527,
  1, 285, :_reduce_528,
  0, 285, :_reduce_529,
  1, 280, :_reduce_530,
  1, 280, :_reduce_531,
  1, 280, :_reduce_532,
  1, 280, :_reduce_533,
  1, 262, :_reduce_none,
  1, 262, :_reduce_535,
  1, 320, :_reduce_536,
  1, 321, :_reduce_537,
  3, 321, :_reduce_538,
  1, 272, :_reduce_539,
  3, 272, :_reduce_540,
  1, 322, :_reduce_541,
  2, 323, :_reduce_542,
  1, 323, :_reduce_543,
  2, 324, :_reduce_544,
  1, 324, :_reduce_545,
  1, 266, :_reduce_546,
  3, 266, :_reduce_547,
  1, 317, :_reduce_548,
  3, 317, :_reduce_549,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  2, 267, :_reduce_552,
  1, 267, :_reduce_553,
  3, 326, :_reduce_554,
  3, 327, :_reduce_555,
  1, 273, :_reduce_556,
  3, 273, :_reduce_557,
  1, 319, :_reduce_558,
  3, 319, :_reduce_559,
  1, 328, :_reduce_none,
  1, 328, :_reduce_none,
  2, 274, :_reduce_562,
  1, 274, :_reduce_563,
  1, 329, :_reduce_none,
  1, 329, :_reduce_none,
  2, 269, :_reduce_566,
  2, 268, :_reduce_567,
  0, 268, :_reduce_568,
  1, 251, :_reduce_none,
  3, 251, :_reduce_570,
  0, 240, :_reduce_571,
  2, 240, :_reduce_none,
  1, 225, :_reduce_573,
  3, 225, :_reduce_574,
  3, 330, :_reduce_575,
  2, 330, :_reduce_576,
  4, 330, :_reduce_577,
  2, 330, :_reduce_578,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 291, :_reduce_none,
  1, 291, :_reduce_none,
  1, 291, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 177, :_reduce_591,
  1, 177, :_reduce_592,
  0, 149, :_reduce_none,
  1, 149, :_reduce_none,
  0, 179, :_reduce_none,
  1, 179, :_reduce_none,
  2, 199, :_reduce_597,
  2, 176, :_reduce_598,
  0, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 249, :_reduce_602,
  1, 249, :_reduce_none,
  1, 151, :_reduce_none,
  2, 151, :_reduce_none,
  0, 222, :_reduce_606 ]

racc_reduce_n = 607

racc_shift_n = 1032

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tDSTAR => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSYMBOLS_BEG => 122,
  :tQSYMBOLS_BEG => 123,
  :tSTRING_DBEG => 124,
  :tSTRING_DVAR => 125,
  :tSTRING_END => 126,
  :tSTRING_DEND => 127,
  :tSTRING => 128,
  :tSYMBOL => 129,
  :tNL => 130,
  :tEH => 131,
  :tCOLON => 132,
  :tCOMMA => 133,
  :tSPACE => 134,
  :tSEMI => 135,
  :tLAMBDA => 136,
  :tLAMBEG => 137,
  :tCHARACTER => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tANDDOT => 142,
  :tEQL => 143,
  :tLOWEST => 144 }

racc_nt_base = 145

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tANDDOT",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@1",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "expr_value_do",
  "do",
  "@2",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@3",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@4",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "arg_value",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@5",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@15",
  "@16",
  "f_args",
  "do_block",
  "@17",
  "@18",
  "do_body",
  "@19",
  "operation3",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@25",
  "@26",
  "args_tail",
  "@27",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_3(val, _values, result)
                      result = []
                    
    result
end

def _reduce_4(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_5(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = @builder.preexe(val[0], *val[1])
                    
    result
end

def _reduce_9(val, _values, result)
                      result = val
                    
    result
end

def _reduce_10(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_.nil?
                        diagnostic :error, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_11(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_12(val, _values, result)
                      result = []
                    
    result
end

def _reduce_13(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_14(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 16 omitted

def _reduce_17(val, _values, result)
                      diagnostic :error, :begin_in_method, nil, val[0]
                    
    result
end

def _reduce_18(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_19(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_21(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_22(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_28(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_29(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

# reduce 30 omitted

def _reduce_31(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_33(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 34 omitted

def _reduce_35(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_37(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_40(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_41(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_42(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

# reduce 45 omitted

# reduce 46 omitted

def _reduce_47(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_48(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_49(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_50(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_54(val, _values, result)
                      @lexer.cond.pop
                      result = [ val[1], val[2] ]
                    
    result
end

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

def _reduce_58(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_59(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_60(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

# reduce 61 omitted

def _reduce_62(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_63(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_64(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_65(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_66(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_67(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_68(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_69(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_70(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_71(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_72(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_73(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_74(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_75(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_76(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 77 omitted

def _reduce_78(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_79(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_80(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_81(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_82(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_83(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_84(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_86(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 87 omitted

def _reduce_88(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_94(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_95(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_96(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_97(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_99(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_100(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_101(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_102(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_103(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_104(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_105(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_106(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_107(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_108(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_109(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_110(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_111(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 112 omitted

def _reduce_113(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_114(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_115(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

def _reduce_121(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

def _reduce_125(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_126(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_127(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

def _reduce_199(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_205(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_206(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    val[1], val[2], val[3]))
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 225 omitted

def _reduce_226(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_232(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_236(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_238(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

def _reduce_244(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_245(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

def _reduce_249(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_250(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

# reduce 251 omitted

def _reduce_252(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_253(val, _values, result)
                      result = val
                    
    result
end

def _reduce_254(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 255 omitted

def _reduce_256(val, _values, result)
                      result = []
                    
    result
end

# reduce 257 omitted

# reduce 258 omitted

def _reduce_259(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_260(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_261(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_264(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_265(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_266(val, _values, result)
                      # When branch gets invoked by RACC's lookahead
                      # and command args start with '[' or '('
                      # we need to put `true` to the cmdarg stack
                      # **before** `false` pushed by lexer
                      #   m [], n
                      #     ^
                      # Right here we have cmdarg [...0] because
                      # lexer pushed it on '['
                      # We need to modify cmdarg stack to [...10]
                      #
                      # For all other cases (like `m n` or `m n, []`) we simply put 1 to the stack
                      # and later lexer pushes corresponding bits on top of it.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACK || last_token == :tLPAREN_ARG

                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.push(true)
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.push(true)
                      end
                    
    result
end

def _reduce_267(val, _values, result)
                      # call_args can be followed by tLBRACE_ARG (that does cmdarg.push(0) in the lexer)
                      # but the push must be done after cmdarg.pop() in the parser.
                      # So this code does cmdarg.pop() to pop 0 pushed by tLBRACE_ARG,
                      # cmdarg.pop() to pop 1 pushed by command_args,
                      # and cmdarg.push(0) to restore back the flag set by tLBRACE_ARG.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACE_ARG
                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.pop
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.pop
                      end

                      result = val[1]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_269(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = []
                    
    result
end

def _reduce_271(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_272(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_273(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_274(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_275(val, _values, result)
                      result = @builder.array(nil, val[0], nil)
                    
    result
end

# reduce 276 omitted

def _reduce_277(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_278(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_279(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

# reduce 284 omitted

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

def _reduce_290(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_291(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_292(val, _values, result)
                      @lexer.cmdarg.pop

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
end

def _reduce_293(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_294(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[3])
                    
    result
end

def _reduce_295(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_296(val, _values, result)
                      result = @builder.begin(val[0], nil, val[3])
                    
    result
end

def _reduce_297(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_298(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_299(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_300(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_301(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_302(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_303(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_304(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_305(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_306(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_307(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_308(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_309(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 310 omitted

def _reduce_311(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_312(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_313(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_314(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_315(val, _values, result)
                      result = @builder.loop(:while, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_316(val, _values, result)
                      result = @builder.loop(:until, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_317(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_318(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_319(val, _values, result)
                      result = @builder.for(val[0], val[1], val[2], *val[3], val[4], val[5])
                    
    result
end

def _reduce_320(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:class)
                    
    result
end

def _reduce_321(val, _values, result)
                      unless @context.class_definition_allowed?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_322(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:sclass)
                    
    result
end

def _reduce_323(val, _values, result)
                      result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_324(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_325(val, _values, result)
                      unless @context.module_definition_allowed?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @lexer.cmdarg.pop
                      @static_env.unextend
                    
    result
end

def _reduce_326(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:def)
                    
    result
end

def _reduce_327(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_328(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_329(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:defs)
                    
    result
end

def _reduce_330(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_331(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_332(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_333(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_334(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 335 omitted

def _reduce_336(val, _values, result)
                      if @context.in_class?
                        diagnostic :error, :invalid_return, nil, val[0]
                      end
                    
    result
end

# reduce 337 omitted

# reduce 338 omitted

def _reduce_339(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

def _reduce_343(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 344 omitted

def _reduce_345(val, _values, result)
                      result = val
                    
    result
end

# reduce 346 omitted

# reduce 347 omitted

def _reduce_348(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_349(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_350(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_351(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 352 omitted

def _reduce_353(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2], val[3]))
                    
    result
end

def _reduce_354(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2], val[3])).
                                  concat(val[5])
                    
    result
end

def _reduce_355(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2]))
                    
    result
end

def _reduce_356(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_357(val, _values, result)
                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_358(val, _values, result)
                      result = [ @builder.restarg(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_359(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

def _reduce_360(val, _values, result)
                      result = [ @builder.restarg(val[0]),
                                 *val[2] ]
                    
    result
end

def _reduce_361(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_362(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_363(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_364(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_365(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_366(val, _values, result)
                      result = []
                    
    result
end

def _reduce_367(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_368(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_369(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_370(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_371(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 372 omitted

def _reduce_373(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_374(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_375(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_376(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_377(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_378(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_379(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_380(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 381 omitted

def _reduce_382(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_383(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_384(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_385(val, _values, result)
                      result = @builder.args(val[0], [], val[0])
                    
    result
end

def _reduce_386(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_387(val, _values, result)
                      result = []
                    
    result
end

def _reduce_388(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_389(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_390(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_391(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 392 omitted

def _reduce_393(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_394(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_395(val, _values, result)
                      @lexer.cmdarg.pop

                      result = [ val[1], val[3] ]

                      @static_env.unextend
                    
    result
end

def _reduce_396(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_397(val, _values, result)
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_398(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_399(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_400(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_401(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_402(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_403(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_404(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_405(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_406(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_407(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_408(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_409(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_410(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_411(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_412(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_413(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_414(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_415(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_416(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_417(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_418(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_419(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_420(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_421(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_422(val, _values, result)
                      result = [ val[1], val[2] ]

                      @static_env.unextend
                    
    result
end

def _reduce_423(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_424(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_425(val, _values, result)
                      result = [ val[2], val[3] ]

                      @static_env.unextend
                      @lexer.cmdarg.pop
                    
    result
end

def _reduce_426(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_427(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 428 omitted

def _reduce_429(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_430(val, _values, result)
                      result = []
                    
    result
end

def _reduce_431(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 432 omitted

# reduce 433 omitted

def _reduce_434(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 435 omitted

def _reduce_436(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 437 omitted

# reduce 438 omitted

# reduce 439 omitted

# reduce 440 omitted

def _reduce_441(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_442(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_443(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_444(val, _values, result)
                      string = @builder.string_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_445(val, _values, result)
                      string = @builder.string(val[0])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_446(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_447(val, _values, result)
                      string = @builder.xstring_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_448(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_449(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_450(val, _values, result)
                      result = []
                    
    result
end

def _reduce_451(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_452(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_453(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_454(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_455(val, _values, result)
                      result = []
                    
    result
end

def _reduce_456(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_457(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_458(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_459(val, _values, result)
                      result = []
                    
    result
end

def _reduce_460(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_461(val, _values, result)
                      result = []
                    
    result
end

def _reduce_462(val, _values, result)
                      result = val[0] << @builder.symbol_internal(val[1])
                    
    result
end

def _reduce_463(val, _values, result)
                      result = []
                    
    result
end

def _reduce_464(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_465(val, _values, result)
                      result = []
                    
    result
end

def _reduce_466(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_467(val, _values, result)
                      result = []
                    
    result
end

def _reduce_468(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_469(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_470(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_471(val, _values, result)
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                    
    result
end

def _reduce_472(val, _values, result)
                      @lexer.cmdarg.pop
                      @lexer.cond.pop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_473(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_474(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_475(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 476 omitted

def _reduce_477(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_478(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_480(val, _values, result)
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], val[1])
                      else
                        result = @builder.unary_num(val[0], val[1])
                      end
                    
    result
end

def _reduce_481(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_482(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_483(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.rational(val[0])
                    
    result
end

def _reduce_484(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.complex(val[0])
                    
    result
end

def _reduce_485(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_486(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_487(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_488(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_489(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_490(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_491(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_492(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_493(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_494(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_495(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_496(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_497(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_498(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_499(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_500(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_501(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_502(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_503(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_504(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_505(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_506(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_507(val, _values, result)
                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_508(val, _values, result)
                      @lexer.in_kwarg = val[0]
                      result = @builder.args(nil, val[1], nil)
                    
    result
end

def _reduce_509(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_510(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_511(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_512(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_513(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_514(val, _values, result)
                      result = []
                    
    result
end

def _reduce_515(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_516(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_517(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_518(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_519(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_520(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_521(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_522(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_523(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_524(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_525(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_526(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_527(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_528(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_529(val, _values, result)
                      result = []
                    
    result
end

def _reduce_530(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_531(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_532(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_533(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 534 omitted

def _reduce_535(val, _values, result)
                      @static_env.declare val[0][0]

                      result = val[0]
                    
    result
end

def _reduce_536(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_537(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_538(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_539(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_540(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_541(val, _values, result)
                      check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      result = val[0]
                    
    result
end

def _reduce_542(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_543(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_544(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_545(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_546(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_547(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_548(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_549(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 550 omitted

# reduce 551 omitted

def _reduce_552(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
end

def _reduce_553(val, _values, result)
                      result = [ @builder.kwrestarg(val[0]) ]
                    
    result
end

def _reduce_554(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_555(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_556(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_557(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_558(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_559(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 560 omitted

# reduce 561 omitted

def _reduce_562(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_563(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 564 omitted

# reduce 565 omitted

def _reduce_566(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_567(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_568(val, _values, result)
                      result = []
                    
    result
end

# reduce 569 omitted

def _reduce_570(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_571(val, _values, result)
                      result = []
                    
    result
end

# reduce 572 omitted

def _reduce_573(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_574(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_575(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_576(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

def _reduce_577(val, _values, result)
                      result = @builder.pair_quoted(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_578(val, _values, result)
                      result = @builder.kwsplat(val[0], val[1])
                    
    result
end

# reduce 579 omitted

# reduce 580 omitted

# reduce 581 omitted

# reduce 582 omitted

# reduce 583 omitted

# reduce 584 omitted

# reduce 585 omitted

# reduce 586 omitted

# reduce 587 omitted

# reduce 588 omitted

# reduce 589 omitted

# reduce 590 omitted

def _reduce_591(val, _values, result)
                      result = [:dot, val[0][1]]
                    
    result
end

def _reduce_592(val, _values, result)
                      result = [:anddot, val[0][1]]
                    
    result
end

# reduce 593 omitted

# reduce 594 omitted

# reduce 595 omitted

# reduce 596 omitted

def _reduce_597(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_598(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 599 omitted

# reduce 600 omitted

# reduce 601 omitted

def _reduce_602(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 603 omitted

# reduce 604 omitted

# reduce 605 omitted

def _reduce_606(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby26
  end   # module Parser
