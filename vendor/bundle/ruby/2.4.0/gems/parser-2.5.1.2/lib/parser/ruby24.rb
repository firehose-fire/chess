# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby24 < Parser::Base


  def version
    24
  end

  def default_encoding
    Encoding::UTF_8
  end
##### State transition tables begin ###

clist = [
'-482,209,210,209,210,217,-99,-482,-482,-482,109,575,-482,-482,-482,215',
'-482,270,219,615,794,794,263,575,-482,617,-482,-482,-482,270,587,270',
'-496,121,588,-100,-482,-482,575,-482,-482,-482,-482,-482,575,575,-99',
'-100,-107,-107,-85,-106,-98,206,-106,793,793,207,270,220,-71,534,-107',
'208,533,815,-482,-482,-482,-482,-482,-482,-482,-482,-482,-482,-482,-482',
'-482,-482,216,265,-482,-482,-482,614,-482,-482,721,-99,-482,616,-102',
'-482,-482,220,-482,220,-482,807,-482,581,-482,-482,269,-482,-482,-482',
'-482,-482,-102,-482,-485,-482,-104,-90,269,-104,269,-485,-485,-485,265',
'-103,-485,-485,-485,-482,-485,113,-482,-482,-482,-482,112,-482,-485',
'-482,-485,-485,-485,113,-482,-482,-91,269,112,-93,-485,-485,-105,-485',
'-485,-485,-485,-485,113,-101,-98,843,-97,112,113,113,-99,-100,-107,112',
'112,-99,-100,-107,-106,721,814,-103,-101,-106,-485,-485,-485,-485,-485',
'-485,-485,-485,-485,-485,-485,-485,-485,-485,113,211,-485,-485,-485',
'112,-485,-485,-579,-93,-485,259,-95,-485,-485,721,-485,-105,-485,113',
'-485,-93,-485,-485,112,-485,-485,-485,-485,-485,-290,-485,-497,-485',
'-95,-580,-102,-290,-290,-290,-104,-102,318,-290,-290,-104,-290,-485',
'-579,-103,-485,-485,-485,-485,-103,-485,319,-485,209,210,451,-93,-485',
'-485,-93,79,-290,-290,-92,-290,-290,-290,-290,-290,-93,220,-105,80,-95',
'-482,-94,-105,-580,-101,388,113,-482,81,-101,-100,112,217,-94,-92,209',
'210,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290',
'-290,401,522,-290,-290,-290,-485,640,-107,-95,113,-290,-95,-485,-290',
'112,450,-96,452,-290,453,-290,-95,-290,-290,-92,-290,-290,-290,-290',
'-290,602,-290,-583,-290,-482,-579,-94,219,-107,-583,-583,-583,220,484',
'113,-583,-583,-290,-583,112,-290,-290,493,-96,398,-290,113,-583,-106',
'400,399,112,-290,-105,-92,-576,-496,-92,-583,-583,-485,-583,-583,-583',
'-583,-583,-94,-92,113,-94,209,210,495,112,555,780,552,551,550,-94,553',
'91,92,497,604,603,600,505,-583,-583,-583,-583,-583,-583,-583,-583,-583',
'-583,-583,-583,-583,-583,-70,-90,-583,-583,-583,-482,641,91,92,602,-583',
'-99,-482,-583,113,781,220,-576,-583,112,-583,-482,-583,-583,-497,-583',
'-583,-583,-583,-583,-102,-583,-583,-583,602,555,602,552,551,550,-576',
'553,-492,113,508,-577,635,-583,112,-492,-583,-583,-583,-94,834,-583',
'509,93,94,-583,-583,-583,-583,-103,-583,-583,-583,516,-583,274,-482',
'-91,-104,604,603,600,-491,-583,-583,-583,-583,-100,220,-491,534,93,94',
'536,-583,-583,668,-583,-583,-583,-583,-583,265,-485,604,603,604,603',
'602,-102,-485,602,519,-492,752,-577,754,602,523,-485,240,636,220,956',
'-583,-583,-583,-583,-583,-583,-583,-583,-583,-583,-583,-583,-583,-583',
'-577,537,-583,-583,-583,534,782,-583,536,-491,-583,602,522,-583,-583',
'602,-583,-493,-583,538,-583,635,-583,-583,-493,-583,-583,-583,-583,-583',
'-485,-583,-583,-583,604,603,605,604,603,607,-104,-490,497,604,603,609',
'636,-583,-490,581,-583,-583,-583,-583,-487,-583,390,-583,-290,-97,862',
'-487,-583,-103,585,-290,-290,-290,-93,-106,-290,-290,-290,586,-290,604',
'603,613,-102,604,603,618,-493,594,-290,-290,-290,534,220,767,536,989',
'767,-95,-290,-290,619,-290,-290,-290,-290,-290,622,-104,-263,215,-490',
'-333,-488,-489,209,210,214,215,-333,-488,-489,-101,624,-487,263,212',
'625,-333,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290',
'-290,-290,629,-92,-290,-290,-290,220,783,-290,-101,633,-290,-101,634',
'-290,-290,265,-290,645,-290,240,-290,240,-290,-290,240,-290,-290,-290',
'-290,-290,-290,-290,216,-290,-333,-488,-489,-290,-290,-290,216,571,570',
'-290,-290,240,-290,-290,240,240,-290,-290,-290,-290,220,-290,237,-290',
'-583,220,239,238,-290,-105,254,255,-290,-290,220,-290,-290,-290,-290',
'-290,-85,215,838,807,672,-494,237,220,448,527,239,238,-494,235,236,838',
'807,449,683,688,689,-494,-290,-290,-290,-290,-290,-290,-290,-290,-290',
'-290,-290,-290,-290,-290,-583,-495,-290,-290,-290,220,640,-583,-495',
'691,-290,695,-579,-290,698,699,-583,-495,-290,701,-290,703,-290,-290',
'705,-290,-290,-290,-290,-290,216,-290,-583,-290,-494,-583,713,714,715',
'-583,-583,-583,560,717,240,-583,-583,-290,-583,581,-290,-290,563,-290',
'215,-290,724,-583,741,751,755,515,-290,-105,756,-583,-495,-264,-583',
'-583,513,-583,-583,-583,-583,-583,237,-281,768,484,239,238,484,220,-281',
'571,570,785,786,259,564,746,747,-281,791,748,107,108,-583,-583,-583',
'-583,-583,-583,-583,-583,-583,-583,-583,-583,-583,-583,796,495,-583',
'-583,-583,215,641,216,215,497,-583,800,525,-583,683,584,220,265,-583',
'265,-583,449,-583,-583,582,-583,-583,-583,-583,-583,-281,-583,-583,-583',
'555,683,552,551,550,560,553,215,116,117,118,119,120,-583,590,563,-583',
'-583,-412,-583,240,-583,807,592,220,-412,-412,-412,-583,-103,-412,-412',
'-412,832,-412,220,216,558,807,216,842,240,220,-412,-412,-412,568,567',
'571,570,220,851,-265,564,-412,-412,220,-412,-412,-412,-412,-412,555',
'861,552,551,550,215,553,865,683,881,216,237,628,-263,885,239,238,220',
'235,236,889,626,-412,-412,-412,-412,-412,-412,-412,-412,-412,-412,-412',
'-412,-412,-412,890,707,-412,-412,-412,698,892,-412,894,265,-412,896',
'898,-412,-412,898,-412,220,-412,904,-412,906,-412,-412,908,-412,-412',
'-412,-412,-412,-297,-412,-412,-412,216,914,917,-297,-297,-297,220,921',
'-297,-297,-297,-291,-297,-412,-266,923,-412,-412,-291,-412,698,-412',
'-297,-297,926,928,930,-291,-412,932,220,934,-297,-297,958,-297,-297',
'-297,-297,-297,960,961,966,-291,741,-290,977,980,985,986,-291,987,-290',
'990,898,898,898,-580,995,-291,958,-290,-297,-297,-297,-297,-297,-297',
'-297,-297,-297,-297,-297,-297,-297,-297,-291,698,-297,-297,-297,1001',
'1003,-297,1005,274,-297,1007,1007,-297,-297,688,-297,958,-297,1022,-297',
'1023,-297,-297,-580,-297,-297,-297,-297,-297,-282,-297,-291,-297,-290',
'-579,220,-282,-282,-282,898,958,-282,-282,-282,215,-282,-297,1030,1007',
'-297,-297,979,-297,1007,-297,-282,-282,-282,1007,1007,592,-297,,,,-282',
'-282,,-282,-282,-282,-282,-282,,-290,,215,,215,,,-290,,984,,979,-580',
',,,-290,,982,,592,-282,-282,-282,-282,-282,-282,-282,-282,-282,-282',
'-282,-282,-282,-282,216,560,-282,-282,-282,,,-282,,,-282,563,,-282,-282',
',-282,,-282,,-282,,-282,-282,,-282,-282,-282,-282,-282,-290,-282,216',
'-282,216,949,,552,551,550,,553,,,571,570,,-282,240,564,-282,-282,-282',
'-282,,-282,-246,-282,,,,,-282,-246,-246,-246,,,-246,-246,-246,555,-246',
'552,551,550,,553,,,237,-246,-246,-246,239,238,,235,236,,,,-246,-246',
',-246,-246,-246,-246,-246,555,,552,551,550,,553,555,707,552,551,550',
'949,553,552,551,550,710,553,,,,-246,-246,-246,-246,-246,-246,-246,-246',
'-246,-246,-246,-246,-246,-246,,707,-246,-246,-246,,,-246,707,265,-246',
',,-246,-246,,-246,710,-246,,-246,,-246,-246,,-246,-246,-246,-246,-246',
',-246,-246,-246,555,,552,551,550,560,553,116,117,118,119,120,,-246,',
'563,-246,-246,-584,-246,,-246,,,,-584,-584,-584,-246,,-584,-584,-584',
',-584,240,555,558,552,551,550,,553,-584,-584,-584,-584,,571,570,,254',
'255,564,-584,-584,,-584,-584,-584,-584,-584,555,,552,551,550,237,553',
'243,,239,238,707,235,236,,,241,,242,,903,,-584,-584,-584,-584,-584,-584',
'-584,-584,-584,-584,-584,-584,-584,-584,,707,-584,-584,-584,,,-584,',
',-584,,,-584,-584,,-584,,-584,,-584,,-584,-584,,-584,-584,-584,-584',
'-584,,-584,-584,-584,,,555,,552,551,550,,553,,,,,-584,,,-584,-584,-584',
'-584,,-584,-585,-584,,,,,-584,-585,-585,-585,,,-585,-585,-585,240,-585',
'707,116,117,118,119,120,,,-585,-585,-585,-585,,,254,255,,,,-585,-585',
',-585,-585,-585,-585,-585,,,,237,,243,,239,238,,235,236,,,241,,242,116',
'117,118,119,120,-585,-585,-585,-585,-585,-585,-585,-585,-585,-585,-585',
'-585,-585,-585,,,-585,-585,-585,,,-585,,,-585,,,-585,-585,,-585,,-585',
',-585,,-585,-585,,-585,-585,-585,-585,-585,,-585,-585,-585,,,555,,552',
'551,550,,553,,,,,-585,,,-585,-585,-585,-585,,-585,-246,-585,,,,,-585',
'-246,-246,-246,,,-246,-246,-246,240,-246,707,,,,,,,,-246,-246,,,,,254',
'255,,,,-246,-246,,-246,-246,-246,-246,-246,,,,237,,243,,239,238,,235',
'236,,,,240,244,249,250,251,246,248,256,257,252,253,,233,234,,,254,255',
'-246,,,,,,,-246,,,,,265,-246,237,,243,,239,238,,235,236,247,245,241',
',242,,,,,,,,-246,-246,,,,,,,,,,,258,,,-246,,,-246,,,,,-246,5,69,70,71',
'9,57,-246,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,19,,,,,630,8,45,7,10,105,104,106,95,56,97,96,98,,99,107,108',
',91,92,42,43,41,240,244,249,250,251,246,248,256,257,252,253,,233,234',
',,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247',
'245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,258,,-238,,,62',
',81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,',
',,29,28,27,101,100,102,103,,,19,,,,,630,8,45,294,10,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246,248,256',
'257,252,253,,233,234,,,254,255,,40,,,296,,,58,59,,,60,,35,237,,243,44',
'239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,',
'80,88,,258,,,,,62,,81,93,94,5,69,70,71,9,57,,,,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,7,10,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246',
'248,256,257,252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60,,35,237',
',243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,258,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294',
'10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249',
'250,251,246,248,256,257,252,253,,233,234,,,254,255,,40,,,33,,,58,59',
',,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,220,258,,,,,62,,81,93,94,292,69,70,71,9,57',
',,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,',
',19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,240,244,249,250,251,246,248,256,257,252,253,,233,234,,,254,255',
',40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20',
'242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,258,,,,,62,,81,93,94,292',
'69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,240,244,249,250,251,246,248,256,257,252,253,,233',
'234,,,254,255,,40,,,296,,,58,59,,,60,,35,237,,243,44,239,238,,235,236',
'247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,258,,,,,62',
',81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,',
',,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246,248,256,257',
'252,253,,233,234,,,254,255,,40,,,296,,,58,59,,,60,,35,237,,243,44,239',
'238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',258,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246',
'248,256,257,252,253,,-604,-604,,,254,255,,40,,,33,,,58,59,,,60,,35,237',
',243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,,,,62,,81,93,94,5,69,70,71,9,57,,,,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,7,10,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251',
'246,248,256,257,252,253,,-604,-604,,,254,255,,40,,,33,,,58,59,,,60,',
'35,237,,243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45',
'294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,-604',
'-604,-604,-604,246,248,,,-604,-604,,,,,,254,255,,40,,,33,,,58,59,,,60',
',35,237,,243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,',
'8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240',
',,,,,,,,,,,,,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238',
',235,236,,,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62',
',81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,',
',,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,240,,,,,,,,,,,,,,,,254,255,,40,,,33',
',,58,59,,,60,,35,237,,243,44,239,238,,235,236,,,241,20,242,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292,69,70,71,9,57,,',
',63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19',
',,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,240,-604,-604,-604,-604,246,248,,,-604,-604,,,,,,254,255,,40,,,33',
',,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242,,,',
'89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292,69,70,71,9',
'57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103',
',,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
'42,43,41,240,-604,-604,-604,-604,246,248,,,-604,-604,,,,,,254,255,,40',
',,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242',
',,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292,69,70,71',
'9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,240,-604,-604,-604,-604,246,248,,,-604,-604,,,,,,254,255',
',40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20',
'242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292,69',
'70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108',
',91,92,42,43,41,240,-604,-604,-604,-604,246,248,,,-604,-604,,,,,,254',
'255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241',
'20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292',
'69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,240,-604,-604,-604,-604,246,248,,,-604,-604,,,,',
',254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247',
'245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93',
'94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28',
'27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,240,244,249,250,251,246,248,,,252,253,,',
',,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247',
'245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93',
'94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28',
'27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,240,244,249,250,251,246,248,256,,252,253',
',,,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236',
'247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81',
'93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,240,,,,,,,,,,,,,,,,254,255,,40,,,33,',
',58,59,,,60,,35,237,,243,44,239,238,,235,236,,,,20,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,',
'8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,',
',,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292,69,70,71,9,57,,',
',63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19',
',,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,',
'89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292,69,70,71,9',
'57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103',
',,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
'42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292,69,70',
'71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,',
',,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292,69',
'70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108',
',91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,',
',,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292',
'69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44',
',,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94',
'292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35',
',,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81',
'93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,',
'60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,',
',62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58',
'59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,,,,62,,81,93,94,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,7,10,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58',
'59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,',
',,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,',
'91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,',
'44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,',
'91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,',
'44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,',
'91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,',
'44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,309,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,58,59,,,60,,300,,,,',
',,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,309,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
',,315,,,,,,,,,,,,,,,,,,,,305,,,231,,,58,59,,,60,,,555,,552,551,550,560',
'553,,,,,,,,,563,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,317,,558,62,',
'81,93,94,69,70,71,,57,571,570,,63,64,564,,,67,,65,66,68,311,312,72,73',
',,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,',
'58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,',
'307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59',
',,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69',
'70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308',
'314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,',
',,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81',
'93,94,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28',
'27,101,100,102,103,,,19,,,,,,8,45,,10,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35',
',,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,',
',,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62',
'57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,113,,,,,112,62,,81,93,94,69,70,71,,57,,,,63,64,,,,67,,65',
'66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,309',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,315,,,,,,,,,,,,,,',
',,,,,350,,,33,,,58,59,,,60,,35,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312',
'72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,309,,,105,104,106',
'355,56,97,96,356,,99,107,108,,91,92,,,315,,,,,,,,,,,,,,,,,362,,,357',
',,231,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,309,,,105,104,106,355,56',
'97,96,356,,99,107,108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,357,,,231,,,58',
'59,,,60,,,555,,552,551,550,560,553,,,,,,,,,563,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,,,558,62,,81,93,94,69,70,71,9,57,571,570,,63,64,564',
',,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8',
'45,7,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,',
',,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,,,390,62,,81,93,94,69,70,71,,57,,,,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,',
',,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59',
',,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69',
'70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108',
',91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,',
',,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,69',
'70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,19,,,,,,8,45,,10,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,',
',,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,',
',232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,406,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,',
',,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,',
',,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,406,,,,44,,,,,,,,,230,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,',
'231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,',
',80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286',
'99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',283,,281,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,',
',,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,220,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311',
'312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,',
'232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311',
'312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,',
'232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106',
'95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230,,,,,89,284,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106',
'95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230,,,,,89,284,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106',
'95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230,,,,,89,284,82,83,,84',
'86,85,87,,,,,80,88,220,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311',
'312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,,,,62,,81,93,94,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,,10,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59',
',,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,',
'69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,101,100,102,103,,,232,,,,,,,309,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,305,,,231,,,58,59,,,60,',
',555,,552,551,550,560,553,,,,,,,,,563,,89,79,82,83,,84,86,85,87,,,,',
'80,88,,,,511,,558,62,,81,93,94,69,70,71,,57,571,570,,63,64,564,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',309,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,315,,,,,,,,,',
',,,,,,,,,,305,,,301,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,527,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,',
'231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,',
',80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59',
',,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69',
'70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108',
',91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,',
',,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103',
',,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,',
'89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232',
',,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,',
',,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,',
',105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,',
',,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230,,,,,89',
'284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,',
',67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,',
',,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,',
',,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,',
',,,,,225,,,231,,,58,59,,,60,,665,,281,,44,,,287,,,,,,230,,,,,89,284',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,281,,44,,,287,,,,,,230,,,,',
'89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232',
',,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,',
',,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,69,70,71,9,57,,,,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,',
',,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,,,390,62,,81,93,94,69,70,71,,57,',
',,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103',
',,232,,,,,,,309,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,315',
',,,,,,,,,,,,,,,,,,,305,,,301,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,',
',,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230,,,,,89,284',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',309,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,315,,,,,,,,,',
',,,,,,,,,,305,,,301,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311',
'312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,',
',69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98',
'286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59',
',,60,,665,,,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97',
'96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,',
'58,59,,,60,,,,,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,',
'80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73',
',,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,',
'58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,',
'307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59',
',,60,,283,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286',
'99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',283,,281,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286',
'99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',283,,281,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,',
'307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59',
',,60,,759,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,',
',,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,',
'91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,',
'44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,',
'81,93,94,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,19,,,,,,8,45,,10,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60',
',35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,',
'91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,665,,281,',
'44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,281',
',44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108',
',91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,',
',,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103',
',,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,',
',89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,',
',,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,',
',,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311',
'312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,309,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,58,59',
',,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,309,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,58,59,,,60,,,,,,,,,',
',,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,406,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,',
'232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,',
'231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,',
',80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73',
',,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,',
'58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,',
',,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,',
'232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,',
'105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,',
',,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,665,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,',
',,,,,225,,,231,,,58,59,,,60,,,,281,,44,,,287,,,,,,230,,,,,89,284,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,309,,',
'105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,315,,,,,,,,,,,,,,,,',
',,,936,,,231,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,309,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,942,,,231,,',
'58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,',
'69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,101,100,102,103,,,232,,,,,,,309,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,936,,,231,,,58,59,,,60,',
',,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62',
'57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,',
'91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,',
'44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,',
'81,93,94,173,184,174,197,170,190,180,179,200,201,195,178,177,172,198',
'202,203,182,171,185,189,191,183,176,,,,192,199,194,193,186,196,181,169',
'188,187,,,,,,168,175,166,167,163,164,165,124,126,123,,125,,,,,,,,157',
'158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,',
',,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134,,,162',
'89,,,,,,,,,,,,,,88,173,184,174,197,170,190,180,179,200,201,195,178,177',
'172,198,202,203,182,171,185,189,191,183,176,,,,192,199,194,193,186,196',
'181,169,188,187,,,,,,168,175,166,167,163,164,165,124,126,,,125,,,,,',
',,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147',
',,,,,,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134',
',,162,89,,,,,,,,,,,,,,88,173,184,174,197,170,190,180,179,200,201,195',
'178,177,172,198,202,203,182,171,185,189,191,183,176,,,,192,199,194,193',
'186,196,181,169,188,187,,,,,,168,175,166,167,163,164,165,124,126,,,125',
',,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146',
'147,,,,,,,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155',
'134,,,162,89,,,,,,,,,,,,,,88,173,184,174,197,170,190,180,179,200,201',
'195,178,177,172,198,202,203,182,171,185,189,191,183,176,,,,192,199,194',
'193,186,196,181,169,188,187,,,,,,168,175,166,167,163,164,165,124,126',
',,125,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160',
'146,147,,,,,,,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133',
'155,134,,,162,89,,,,,,,,,,,,,,88,173,184,174,197,170,190,180,179,200',
'201,195,178,177,172,198,202,203,182,171,185,189,191,183,176,,,,192,199',
'194,373,372,374,371,169,188,187,,,,,,168,175,166,167,368,369,370,366',
'126,97,96,367,,99,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140',
',,,159,160,146,147,,,,,,378,,,,,,,,151,150,,135,156,153,152,161,148',
'149,143,141,133,155,134,,,162,173,184,174,197,170,190,180,179,200,201',
'195,178,177,172,198,202,203,182,171,185,189,191,183,176,,,,192,199,194',
'193,186,196,181,169,188,187,,,,,,168,175,166,167,163,164,165,124,126',
',,125,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160',
'146,147,,,,,,,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133',
'155,134,428,432,162,,429,,,,,,,,157,158,,154,136,137,138,145,142,144',
',,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152',
'161,148,149,143,141,133,155,134,435,439,162,,434,,,,,,,,157,158,,154',
'136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,',
',151,150,,135,156,153,152,161,148,149,143,141,133,155,134,482,432,162',
',483,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160',
'146,147,,,,,,,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133',
'155,134,646,432,162,,647,,,,,,,,157,158,,154,136,137,138,145,142,144',
',,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152',
'161,148,149,143,141,133,155,134,648,439,162,,649,,,,,,,,157,158,,154',
'136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,',
',151,150,,135,156,153,152,161,148,149,143,141,133,155,134,676,432,162',
',677,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160',
'146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141',
'133,155,134,679,439,162,,680,,,,,,,,157,158,,154,136,137,138,145,142',
'144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153',
'152,161,148,149,143,141,133,155,134,646,432,162,,647,,,,,,,,157,158',
',154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,265,',
',,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134,648,439',
'162,,649,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159',
'160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161,148,149,143',
'141,133,155,134,727,432,162,,728,,,,,,,,157,158,,154,136,137,138,145',
'142,144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156',
'153,152,161,148,149,143,141,133,155,134,729,439,162,,730,,,,,,,,157',
'158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,265',
',,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134,732',
'439,162,,733,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,',
',,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161,148,149',
'143,141,133,155,134,482,432,162,,483,,,,,,,,157,158,,154,136,137,138',
'145,142,144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135',
'156,153,152,161,148,149,143,141,133,155,134,761,432,162,,762,,,,,,,',
'157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,',
',,,265,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134',
'764,439,162,,763,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140',
',,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161,148',
'149,143,141,133,155,134,1011,439,162,,1010,,,,,,,,157,158,,154,136,137',
'138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150',
',135,156,153,152,161,148,149,143,141,133,155,134,1014,432,162,,1015',
',,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146',
'147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133',
'155,134,1016,439,162,,1017,,,,,,,,157,158,,154,136,137,138,145,142,144',
',,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152',
'161,148,149,143,141,133,155,134,,555,162,552,551,550,560,553,,555,,552',
'551,550,560,553,563,,,,,,,,563,,555,,552,551,550,560,553,,,,,,558,541',
',563,,,,,558,568,567,571,570,,,,564,568,567,571,570,,,,564,558,,555',
',552,551,550,560,553,568,567,571,570,,,,564,563,,555,,552,551,550,560',
'553,,555,,552,551,550,560,553,563,,,,,558,,,563,,,,,,568,567,571,570',
',,,564,558,,,,,,,,558,568,567,571,570,,,,564,568,567,571,570,,,555,564',
'552,551,550,560,553,,555,,552,551,550,560,553,563,,,,,,,,563,,555,,552',
'551,550,560,553,,,,,,558,,,563,,,,,558,568,567,571,570,,,,564,568,567',
'571,570,,,,564,558,,555,,552,551,550,560,553,568,567,571,570,,,,564',
'563,,555,,552,551,550,560,553,,555,,552,551,550,560,553,563,,,,,558',
',,563,,,,,,,,571,570,,,,564,558,,,,,,,,558,,,571,570,,,,564,568,567',
'571,570,,,555,564,552,551,550,560,553,555,,552,551,550,560,553,555,563',
'552,551,550,560,553,555,563,552,551,550,560,553,,563,,,,,,,563,558,',
',,,,,558,,,,571,570,,558,,564,,571,570,,558,,564,,571,570,,,,564,,571',
'570,,,,564' ]
        racc_action_table = arr = ::Array.new(25362, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'95,444,444,599,599,17,347,95,95,95,1,340,95,95,95,24,95,26,19,385,659',
'787,24,341,95,386,95,95,95,61,357,655,223,7,357,348,95,95,725,95,95',
'95,95,95,884,907,939,940,943,351,671,585,17,10,985,659,787,12,310,19',
'671,330,17,13,330,693,95,95,95,95,95,95,95,95,95,95,95,95,95,95,24,26',
'95,95,95,385,95,95,577,223,95,386,727,95,95,444,95,599,95,912,95,912',
'95,95,26,95,95,95,95,95,1014,95,98,95,1015,347,61,728,655,98,98,98,310',
'1016,98,98,98,95,98,340,95,95,95,95,340,95,98,95,98,98,98,341,95,95',
'348,310,341,676,98,98,1017,98,98,98,98,98,725,1028,351,725,585,725,884',
'907,939,940,943,884,907,939,940,943,985,578,693,729,845,985,98,98,98',
'98,98,98,98,98,98,98,98,98,98,98,577,15,98,98,98,577,98,98,1016,727',
'98,22,677,98,98,846,98,730,98,3,98,676,98,98,3,98,98,98,98,98,434,98',
'224,98,728,1017,1014,434,434,434,1015,1014,37,434,434,1015,434,98,729',
'1016,98,98,98,98,1016,98,40,98,686,686,226,676,98,98,676,77,434,434',
'802,434,434,434,434,434,676,45,1017,77,677,366,679,1017,730,1028,109',
'578,366,77,1028,224,578,413,729,845,595,595,434,434,434,434,434,434',
'434,434,434,434,434,434,434,434,204,450,434,434,434,367,434,226,677',
'846,434,677,367,434,846,225,730,227,434,228,434,677,434,434,802,434',
'434,434,434,434,380,434,435,434,366,679,679,232,413,435,435,435,686',
'264,290,435,435,434,435,290,434,434,278,434,123,434,344,435,450,123',
'123,344,434,434,802,355,38,802,435,435,367,435,435,435,435,435,679,802',
'595,679,14,14,279,595,710,646,710,710,710,679,710,41,41,282,380,380',
'380,294,435,435,435,435,435,435,435,435,435,435,435,435,435,435,295',
'38,435,435,435,355,435,315,315,499,435,38,355,435,849,647,297,355,435',
'849,435,355,435,435,39,435,435,435,435,435,646,435,435,435,610,903,612',
'903,903,903,355,903,368,854,298,356,761,435,854,368,435,435,648,435',
'710,435,299,41,41,648,648,648,435,435,648,648,648,305,648,308,355,39',
'647,499,499,499,369,648,648,648,648,39,309,369,331,315,315,331,648,648',
'499,648,648,648,648,648,314,356,610,610,612,612,381,761,356,382,316',
'368,610,356,612,383,320,356,323,762,328,903,648,648,648,648,648,648',
'648,648,648,648,648,648,648,648,356,332,648,648,648,334,648,648,334',
'369,648,384,319,648,648,387,648,370,648,333,648,428,648,648,370,648',
'648,648,648,648,356,648,648,648,381,381,381,382,382,382,762,371,335',
'383,383,383,429,648,371,345,648,648,648,648,372,648,346,648,649,319',
'784,372,648,648,350,649,649,649,428,319,649,649,649,352,649,384,384',
'384,428,387,387,387,370,361,649,649,649,692,947,858,692,947,631,429',
'649,649,396,649,649,649,649,649,402,429,405,16,371,46,373,374,339,339',
'16,376,46,373,374,784,407,372,376,16,410,46,649,649,649,649,649,649',
'649,649,649,649,649,649,649,649,414,631,649,649,649,424,649,649,858',
'426,649,631,427,649,649,436,649,446,649,458,649,459,649,649,456,649',
'649,649,649,649,763,649,16,649,46,373,374,763,763,763,376,698,698,763',
'763,460,763,649,464,461,649,649,649,649,486,649,456,649,732,490,456',
'456,649,649,464,464,763,763,506,763,763,763,763,763,507,222,716,716',
'510,302,464,512,222,517,464,464,302,464,464,997,997,222,520,528,529',
'302,763,763,763,763,763,763,763,763,763,763,763,763,763,763,732,303',
'763,763,763,530,763,732,303,531,763,543,732,763,544,546,732,303,763',
'547,763,548,763,763,557,763,763,763,763,763,222,763,764,763,302,732',
'565,569,572,764,764,764,695,574,457,764,764,763,764,579,763,763,695',
'763,304,763,580,764,597,607,615,304,763,763,617,732,303,623,764,764',
'304,764,764,764,764,764,457,306,632,637,457,457,642,650,306,695,695',
'651,652,654,695,603,603,306,658,603,603,603,764,764,764,764,764,764',
'764,764,764,764,764,764,764,764,660,662,764,764,764,321,764,304,349',
'664,764,670,321,764,673,349,675,678,764,681,764,321,764,764,349,764',
'764,764,764,764,306,764,764,764,793,682,793,793,793,793,793,359,6,6',
'6,6,6,764,359,793,764,764,27,764,685,764,687,359,694,27,27,27,764,764',
'27,27,27,709,27,711,321,793,718,349,723,475,726,27,27,27,793,793,793',
'793,735,739,758,793,27,27,760,27,27,27,27,27,834,769,834,834,834,412',
'834,790,801,805,359,475,412,808,809,475,475,793,475,475,816,412,27,27',
'27,27,27,27,27,27,27,27,27,27,27,27,817,834,27,27,27,818,822,27,823',
'27,27,825,826,27,27,828,27,831,27,833,27,836,27,27,839,27,27,27,27,27',
'28,27,27,27,412,848,852,28,28,28,853,856,28,28,28,516,28,27,857,866',
'27,27,516,27,867,27,28,28,869,870,871,516,27,873,874,875,28,28,905,28',
'28,28,28,28,909,910,916,588,920,680,933,936,942,945,588,946,680,951',
'952,953,954,680,955,588,957,680,28,28,28,28,28,28,28,28,28,28,28,28',
'28,28,516,968,28,28,28,971,972,28,973,28,28,974,976,28,28,981,28,996',
'28,998,28,999,28,28,1010,28,28,28,28,28,56,28,588,28,680,1011,1013,56',
'56,56,1019,1020,56,56,56,935,56,28,1024,1025,28,28,935,28,1026,28,56',
'56,56,1027,1035,935,28,,,,56,56,,56,56,56,56,56,,733,,941,,978,,,733',
',941,,978,733,,,,733,,941,,978,56,56,56,56,56,56,56,56,56,56,56,56,56',
'56,935,923,56,56,56,,,56,,,56,923,,56,56,,56,,56,,56,,56,56,,56,56,56',
'56,56,733,56,941,56,978,889,,889,889,889,,889,,,923,923,,56,476,923',
'56,56,56,56,,56,430,56,,,,,56,430,430,430,,,430,430,430,558,430,558',
'558,558,,558,,,476,430,430,430,476,476,,476,476,,,,430,430,,430,430',
'430,430,430,904,,904,904,904,,904,707,558,707,707,707,989,707,989,989',
'989,558,989,,,,430,430,430,430,430,430,430,430,430,430,430,430,430,430',
',904,430,430,430,,,430,707,430,430,,,430,430,,430,707,430,,430,,430',
'430,,430,430,430,430,430,,430,430,430,703,,703,703,703,703,703,293,293',
'293,293,293,,430,,703,430,430,439,430,,430,,,,439,439,439,430,,439,439',
'439,,439,466,832,703,832,832,832,,832,439,439,439,439,,703,703,,466',
'466,703,439,439,,439,439,439,439,439,956,,956,956,956,466,956,466,,466',
'466,832,466,466,,,466,,466,,832,,439,439,439,439,439,439,439,439,439',
'439,439,439,439,439,,956,439,439,439,,,439,,,439,,,439,439,,439,,439',
',439,,439,439,,439,439,439,439,439,,439,439,439,,,958,,958,958,958,',
'958,,,,,439,,,439,439,439,439,,439,440,439,,,,,439,440,440,440,,,440',
'440,440,467,440,958,327,327,327,327,327,,,440,440,440,440,,,467,467',
',,,440,440,,440,440,440,440,440,,,,467,,467,,467,467,,467,467,,,467',
',467,504,504,504,504,504,440,440,440,440,440,440,440,440,440,440,440',
'440,440,440,,,440,440,440,,,440,,,440,,,440,440,,440,,440,,440,,440',
'440,,440,440,440,440,440,,440,440,440,,,995,,995,995,995,,995,,,,,440',
',,440,440,440,440,,440,481,440,,,,,440,481,481,481,,,481,481,481,462',
'481,995,,,,,,,,481,481,,,,,462,462,,,,481,481,,481,481,481,481,481,',
',,462,,462,,462,462,,462,462,,,,21,21,21,21,21,21,21,21,21,21,21,,21',
'21,,,21,21,481,,,,,,,481,,,,,481,481,21,,21,,21,21,,21,21,21,21,21,',
'21,,,,,,,,481,481,,,,,,,,,,,21,,,481,,,481,,,,,481,0,0,0,0,0,0,481,',
',0,0,,,,0,,0,0,0,0,0,0,0,,,,,,0,0,0,0,0,0,0,,,0,,,,,417,0,0,0,0,0,0',
'0,0,0,0,0,0,,0,0,0,,0,0,0,0,0,417,417,417,417,417,417,417,417,417,417',
'417,,417,417,,,417,417,,0,,,0,,,0,0,,,0,,0,417,,417,0,417,417,,417,417',
'417,417,417,0,417,,,,0,0,0,0,,0,0,0,0,,,,,0,0,,417,,417,,,0,,0,0,0,33',
'33,33,33,33,33,,,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33',
'33,33,33,,,33,,,,,423,33,33,33,33,33,33,33,33,33,33,33,33,,33,33,33',
',33,33,33,33,33,423,423,423,423,423,423,423,423,423,423,423,,423,423',
',,423,423,,33,,,33,,,33,33,,,33,,33,423,,423,33,423,423,,423,423,423',
'423,423,33,423,,,,33,33,33,33,,33,33,33,33,,,,,33,33,,423,,,,,33,,33',
'33,33,121,121,121,121,121,121,,,,121,121,,,,121,,121,121,121,121,121',
'121,121,,,,,,121,121,121,121,121,121,121,,,121,,,,,,121,121,121,121',
'121,121,121,121,121,121,121,121,,121,121,121,,121,121,121,121,121,276',
'276,276,276,276,276,276,276,276,276,276,,276,276,,,276,276,,121,,,121',
',,121,121,,,121,,121,276,,276,121,276,276,,276,276,276,276,276,121,276',
',,,121,121,121,121,,121,121,121,121,,,,,121,121,,276,,,,,121,,121,121',
'121,206,206,206,206,206,206,,,,206,206,,,,206,,206,206,206,206,206,206',
'206,,,,,,206,206,206,206,206,206,206,,,206,,,,,,206,206,206,206,206',
'206,206,206,206,206,206,206,,206,206,206,,206,206,206,206,206,479,479',
'479,479,479,479,479,479,479,479,479,,479,479,,,479,479,,206,,,206,,',
'206,206,,,206,,206,479,,479,206,479,479,,479,479,479,479,479,206,479',
',,,206,206,206,206,,206,206,206,206,,,,,206,206,479,479,,,,,206,,206',
'206,206,231,231,231,231,231,231,,,,231,231,,,,231,,231,231,231,231,231',
'231,231,,,,,,231,231,231,231,231,231,231,,,231,,,,,,231,231,231,231',
'231,231,231,231,231,231,231,231,,231,231,231,,231,231,231,231,231,526',
'526,526,526,526,526,526,526,526,526,526,,526,526,,,526,526,,231,,,231',
',,231,231,,,231,,231,526,,526,231,526,526,,526,526,526,526,526,231,526',
',,,231,231,231,231,,231,231,231,231,,,,,231,231,,526,,,,,231,,231,231',
'231,296,296,296,296,296,296,,,,296,296,,,,296,,296,296,296,296,296,296',
'296,,,,,,296,296,296,296,296,296,296,,,296,,,,,,296,296,296,296,296',
'296,296,296,296,296,296,296,,296,296,296,,296,296,296,296,296,766,766',
'766,766,766,766,766,766,766,766,766,,766,766,,,766,766,,296,,,296,,',
'296,296,,,296,,296,766,,766,296,766,766,,766,766,766,766,766,296,766',
',,,296,296,296,296,,296,296,296,296,,,,,296,296,,766,,,,,296,,296,296',
'296,301,301,301,301,301,301,,,,301,301,,,,301,,301,301,301,301,301,301',
'301,,,,,,301,301,301,301,301,301,301,,,301,,,,,,301,301,301,301,301',
'301,301,301,301,301,301,301,,301,301,301,,301,301,301,301,301,863,863',
'863,863,863,863,863,863,863,863,863,,863,863,,,863,863,,301,,,301,,',
'301,301,,,301,,301,863,,863,301,863,863,,863,863,863,863,863,301,863',
',,,301,301,301,301,,301,301,301,301,,,,,301,301,,863,,,,,301,,301,301',
'301,326,326,326,326,326,326,,,,326,326,,,,326,,326,326,326,326,326,326',
'326,,,,,,326,326,326,326,326,326,326,,,326,,,,,,326,326,326,326,326',
'326,326,326,326,326,326,326,,326,326,326,,326,326,326,326,326,454,454',
'454,454,454,454,454,454,454,454,454,,454,454,,,454,454,,326,,,326,,',
'326,326,,,326,,326,454,,454,326,454,454,,454,454,454,454,454,326,454',
',,,326,326,326,326,,326,326,326,326,,,,,326,326,,,,,,,326,,326,326,326',
'505,505,505,505,505,505,,,,505,505,,,,505,,505,505,505,505,505,505,505',
',,,,,505,505,505,505,505,505,505,,,505,,,,,,505,505,505,505,505,505',
'505,505,505,505,505,505,,505,505,505,,505,505,505,505,505,455,455,455',
'455,455,455,455,455,455,455,455,,455,455,,,455,455,,505,,,505,,,505',
'505,,,505,,505,455,,455,505,455,455,,455,455,455,455,455,505,455,,,',
'505,505,505,505,,505,505,505,505,,,,,505,505,,,,,,,505,,505,505,505',
'573,573,573,573,573,573,,,,573,573,,,,573,,573,573,573,573,573,573,573',
',,,,,573,573,573,573,573,573,573,,,573,,,,,,573,573,573,573,573,573',
'573,573,573,573,573,573,,573,573,573,,573,573,573,573,573,465,465,465',
'465,465,465,465,,,465,465,,,,,,465,465,,573,,,573,,,573,573,,,573,,573',
'465,,465,573,465,465,,465,465,465,465,465,573,465,,,,573,573,573,573',
',573,573,573,573,,,,,573,573,,,,,,,573,,573,573,573,576,576,576,576',
'576,576,,,,576,576,,,,576,,576,576,576,576,576,576,576,,,,,,576,576',
'576,576,576,576,576,,,576,,,,,,576,576,576,576,576,576,576,576,576,576',
'576,576,,576,576,576,,576,576,576,576,576,468,,,,,,,,,,,,,,,,468,468',
',576,,,576,,,576,576,,,576,,576,468,,468,576,468,468,,468,468,,,468',
'576,468,,,,576,576,576,576,,576,576,576,576,,,,,576,576,,,,,,,576,,576',
'576,576,596,596,596,596,596,596,,,,596,596,,,,596,,596,596,596,596,596',
'596,596,,,,,,596,596,596,596,596,596,596,,,596,,,,,,596,596,596,596',
'596,596,596,596,596,596,596,596,,596,596,596,,596,596,596,596,596,469',
',,,,,,,,,,,,,,,469,469,,596,,,596,,,596,596,,,596,,596,469,,469,596',
'469,469,,469,469,,,469,596,469,,,,596,596,596,596,,596,596,596,596,',
',,,596,596,,,,,,,596,,596,596,596,736,736,736,736,736,736,,,,736,736',
',,,736,,736,736,736,736,736,736,736,,,,,,736,736,736,736,736,736,736',
',,736,,,,,,736,736,736,736,736,736,736,736,736,736,736,736,,736,736',
'736,,736,736,736,736,736,470,470,470,470,470,470,470,,,470,470,,,,,',
'470,470,,736,,,736,,,736,736,,,736,,736,470,,470,736,470,470,,470,470',
'470,470,470,736,470,,,,736,736,736,736,,736,736,736,736,,,,,736,736',
',,,,,,736,,736,736,736,740,740,740,740,740,740,,,,740,740,,,,740,,740',
'740,740,740,740,740,740,,,,,,740,740,740,740,740,740,740,,,740,,,,,',
'740,740,740,740,740,740,740,740,740,740,740,740,,740,740,740,,740,740',
'740,740,740,471,471,471,471,471,471,471,,,471,471,,,,,,471,471,,740',
',,740,,,740,740,,,740,,740,471,,471,740,471,471,,471,471,471,471,471',
'740,471,,,,740,740,740,740,,740,740,740,740,,,,,740,740,,,,,,,740,,740',
'740,740,750,750,750,750,750,750,,,,750,750,,,,750,,750,750,750,750,750',
'750,750,,,,,,750,750,750,750,750,750,750,,,750,,,,,,750,750,750,750',
'750,750,750,750,750,750,750,750,,750,750,750,,750,750,750,750,750,472',
'472,472,472,472,472,472,,,472,472,,,,,,472,472,,750,,,750,,,750,750',
',,750,,750,472,,472,750,472,472,,472,472,472,472,472,750,472,,,,750',
'750,750,750,,750,750,750,750,,,,,750,750,,,,,,,750,,750,750,750,795',
'795,795,795,795,795,,,,795,795,,,,795,,795,795,795,795,795,795,795,',
',,,,795,795,795,795,795,795,795,,,795,,,,,,795,795,795,795,795,795,795',
'795,795,795,795,795,,795,795,795,,795,795,795,795,795,473,473,473,473',
'473,473,473,,,473,473,,,,,,473,473,,795,,,795,,,795,795,,,795,,795,473',
',473,795,473,473,,473,473,473,473,473,795,473,,,,795,795,795,795,,795',
'795,795,795,,,,,795,795,,,,,,,795,,795,795,795,807,807,807,807,807,807',
',,,807,807,,,,807,,807,807,807,807,807,807,807,,,,,,807,807,807,807',
'807,807,807,,,807,,,,,,807,807,807,807,807,807,807,807,807,807,807,807',
',807,807,807,,807,807,807,807,807,474,474,474,474,474,474,474,,,474',
'474,,,,,,474,474,,807,,,807,,,807,807,,,807,,807,474,,474,807,474,474',
',474,474,474,474,474,807,474,,,,807,807,807,807,,807,807,807,807,,,',
',807,807,,,,,,,807,,807,807,807,840,840,840,840,840,840,,,,840,840,',
',,840,,840,840,840,840,840,840,840,,,,,,840,840,840,840,840,840,840',
',,840,,,,,,840,840,840,840,840,840,840,840,840,840,840,840,,840,840',
'840,,840,840,840,840,840,477,477,477,477,477,477,477,,,477,477,,,,,',
'477,477,,840,,,840,,,840,840,,,840,,840,477,,477,840,477,477,,477,477',
'477,477,477,840,477,,,,840,840,840,840,,840,840,840,840,,,,,840,840',
',,,,,,840,,840,840,840,841,841,841,841,841,841,,,,841,841,,,,841,,841',
'841,841,841,841,841,841,,,,,,841,841,841,841,841,841,841,,,841,,,,,',
'841,841,841,841,841,841,841,841,841,841,841,841,,841,841,841,,841,841',
'841,841,841,478,478,478,478,478,478,478,478,,478,478,,,,,,478,478,,841',
',,841,,,841,841,,,841,,841,478,,478,841,478,478,,478,478,478,478,478',
'841,478,,,,841,841,841,841,,841,841,841,841,,,,,841,841,,,,,,,841,,841',
'841,841,844,844,844,844,844,844,,,,844,844,,,,844,,844,844,844,844,844',
'844,844,,,,,,844,844,844,844,844,844,844,,,844,,,,,,844,844,844,844',
'844,844,844,844,844,844,844,844,,844,844,844,,844,844,844,844,844,463',
',,,,,,,,,,,,,,,463,463,,844,,,844,,,844,844,,,844,,844,463,,463,844',
'463,463,,463,463,,,,844,,,,,844,844,844,844,,844,844,844,844,,,,,844',
'844,,,,,,,844,,844,844,844,850,850,850,850,850,850,,,,850,850,,,,850',
',850,850,850,850,850,850,850,,,,,,850,850,850,850,850,850,850,,,850',
',,,,,850,850,850,850,850,850,850,850,850,850,850,850,,850,850,850,,850',
'850,850,850,850,,,,,,,,,,,,,,,,,,,,850,,,850,,,850,850,,,850,,850,,',
',850,,,,,,,,,850,,,,,850,850,850,850,,850,850,850,850,,,,,850,850,,',
',,,,850,,850,850,850,864,864,864,864,864,864,,,,864,864,,,,864,,864',
'864,864,864,864,864,864,,,,,,864,864,864,864,864,864,864,,,864,,,,,',
'864,864,864,864,864,864,864,864,864,864,864,864,,864,864,864,,864,864',
'864,864,864,,,,,,,,,,,,,,,,,,,,864,,,864,,,864,864,,,864,,864,,,,864',
',,,,,,,,864,,,,,864,864,864,864,,864,864,864,864,,,,,864,864,,,,,,,864',
',864,864,864,881,881,881,881,881,881,,,,881,881,,,,881,,881,881,881',
'881,881,881,881,,,,,,881,881,881,881,881,881,881,,,881,,,,,,881,881',
'881,881,881,881,881,881,881,881,881,881,,881,881,881,,881,881,881,881',
'881,,,,,,,,,,,,,,,,,,,,881,,,881,,,881,881,,,881,,881,,,,881,,,,,,,',
',881,,,,,881,881,881,881,,881,881,881,881,,,,,881,881,,,,,,,881,,881',
'881,881,887,887,887,887,887,887,,,,887,887,,,,887,,887,887,887,887,887',
'887,887,,,,,,887,887,887,887,887,887,887,,,887,,,,,,887,887,887,887',
'887,887,887,887,887,887,887,887,,887,887,887,,887,887,887,887,887,,',
',,,,,,,,,,,,,,,,,887,,,887,,,887,887,,,887,,887,,,,887,,,,,,,,,887,',
',,,887,887,887,887,,887,887,887,887,,,,,887,887,,,,,,,887,,887,887,887',
'888,888,888,888,888,888,,,,888,888,,,,888,,888,888,888,888,888,888,888',
',,,,,888,888,888,888,888,888,888,,,888,,,,,,888,888,888,888,888,888',
'888,888,888,888,888,888,,888,888,888,,888,888,888,888,888,,,,,,,,,,',
',,,,,,,,,888,,,888,,,888,888,,,888,,888,,,,888,,,,,,,,,888,,,,,888,888',
'888,888,,888,888,888,888,,,,,888,888,,,,,,,888,,888,888,888,938,938',
'938,938,938,938,,,,938,938,,,,938,,938,938,938,938,938,938,938,,,,,',
'938,938,938,938,938,938,938,,,938,,,,,,938,938,938,938,938,938,938,938',
'938,938,938,938,,938,938,938,,938,938,938,938,938,,,,,,,,,,,,,,,,,,',
',938,,,938,,,938,938,,,938,,938,,,,938,,,,,,,,,938,,,,,938,938,938,938',
',938,938,938,938,,,,,938,938,,,,,,,938,,938,938,938,959,959,959,959',
'959,959,,,,959,959,,,,959,,959,959,959,959,959,959,959,,,,,,959,959',
'959,959,959,959,959,,,959,,,,,,959,959,959,959,959,959,959,959,959,959',
'959,959,,959,959,959,,959,959,959,959,959,,,,,,,,,,,,,,,,,,,,959,,,959',
',,959,959,,,959,,959,,,,959,,,,,,,,,959,,,,,959,959,959,959,,959,959',
'959,959,,,,,959,959,,,,,,,959,,959,959,959,965,965,965,965,965,965,',
',,965,965,,,,965,,965,965,965,965,965,965,965,,,,,,965,965,965,965,965',
'965,965,,,965,,,,,,965,965,965,965,965,965,965,965,965,965,965,965,',
'965,965,965,,965,965,965,965,965,,,,,,,,,,,,,,,,,,,,965,,,965,,,965',
'965,,,965,,965,,,,965,,,,,,,,,965,,,,,965,965,965,965,,965,965,965,965',
',,,,965,965,,,,,,,965,,965,965,965,967,967,967,967,967,967,,,,967,967',
',,,967,,967,967,967,967,967,967,967,,,,,,967,967,967,967,967,967,967',
',,967,,,,,,967,967,967,967,967,967,967,967,967,967,967,967,,967,967',
'967,,967,967,967,967,967,,,,,,,,,,,,,,,,,,,,967,,,967,,,967,967,,,967',
',967,,,,967,,,,,,,,,967,,,,,967,967,967,967,,967,967,967,967,,,,,967',
'967,,,,,,,967,,967,967,967,5,5,5,5,5,,,,5,5,,,,5,,5,5,5,5,5,5,5,,,,',
',5,5,5,5,5,5,5,,,5,,,,,,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5,5,5,5,,',
',,,,,,,,,,,,,,,,,5,,,5,,,5,5,,,5,,5,,,,5,,,,,,,,,5,,,,,5,5,5,5,,5,5',
'5,5,,,,,5,5,,,,20,20,20,5,20,5,5,5,20,20,,,,20,,20,20,20,20,20,20,20',
',,,,,20,20,20,20,20,20,20,,,20,,,,,,,20,,,20,20,20,20,20,20,20,20,,20',
'20,20,,20,20,20,20,20,,,,,,,,,,,,,,,,,,,,20,,,20,,,20,20,,,20,,,,,,20',
',,,,,,,,20,,,,,20,20,20,20,,20,20,20,20,,,,,20,20,,,,29,29,29,20,29',
'20,20,20,29,29,,,,29,,29,29,29,29,29,29,29,,,,,,29,29,29,29,29,29,29',
',,29,,,,,,,29,,,29,29,29,29,29,29,29,29,29,29,29,29,,29,29,29,29,29',
',,,,,,,,,,,,,,,,,,,29,,,29,,,29,29,,,29,,29,,29,,29,,,29,,,,,,29,,,',
',29,29,29,29,,29,29,29,29,,,,,29,29,,,,30,30,30,29,30,29,29,29,30,30',
',,,30,,30,30,30,30,30,30,30,,,,,,30,30,30,30,30,30,30,,,30,,,,,,,30',
',,30,30,30,30,30,30,30,30,30,30,30,30,,30,30,30,30,30,,,,,,,,,,,,,,',
',,,,,30,,,30,,,30,30,,,30,,30,,30,,30,,,30,,,,,,30,,,,,30,30,30,30,',
'30,30,30,30,,,,,30,30,,,,31,31,31,30,31,30,30,30,31,31,,,,31,,31,31',
'31,31,31,31,31,,,,,,31,31,31,31,31,31,31,,,31,,,,,,,31,,,31,31,31,31',
'31,31,31,31,31,31,31,31,,31,31,31,31,31,,,,,,,,,,,,,,,,,,,,31,,,31,',
',31,31,,,31,,31,,31,,31,,,31,,,,,,31,,,,,31,31,31,31,,31,31,31,31,,',
',,31,31,,,,34,34,34,31,34,31,31,31,34,34,,,,34,,34,34,34,34,34,34,34',
',,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,,34',
'34,34,,34,34,,,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,,,,,',
',,,,,,,,,,,34,34,34,34,,34,34,34,34,,,,,34,34,,,,35,35,35,34,35,34,34',
'34,35,35,,,,35,,35,35,35,35,35,35,35,,,,,,35,35,35,35,35,35,35,,,35',
',,,,,,35,,,35,35,35,35,35,35,35,35,,35,35,35,,35,35,,,35,,,,,,,,,,,',
',,,,,,,,35,,,35,,,35,35,,,35,,,894,,894,894,894,894,894,,,,,,,,,894',
',35,35,35,35,,35,35,35,35,,,,,35,35,,,,35,,894,35,,35,35,35,42,42,42',
',42,894,894,,42,42,894,,,42,,42,42,42,42,42,42,42,,,,,,42,42,42,42,42',
'42,42,,,42,,,,,,,42,,,42,42,42,42,42,42,42,42,,42,42,42,,42,42,42,42',
'42,,,,,,,,,,,,,,,,,,,,42,,,42,,,42,42,,,42,,,,,,42,,,,,,,,,42,,,,,42',
'42,42,42,,42,42,42,42,,,,,42,42,,,,43,43,43,42,43,42,42,42,43,43,,,',
'43,,43,43,43,43,43,43,43,,,,,,43,43,43,43,43,43,43,,,43,,,,,,,43,,,43',
'43,43,43,43,43,43,43,,43,43,43,,43,43,43,43,43,,,,,,,,,,,,,,,,,,,,43',
',,43,,,43,43,,,43,,,,,,43,,,,,,,,,43,,,,,43,43,43,43,,43,43,43,43,,',
',,43,43,,,,44,44,44,43,44,43,43,43,44,44,,,,44,,44,44,44,44,44,44,44',
',,,,,44,44,44,44,44,44,44,,,44,,,,,,,44,,,44,44,44,44,44,44,44,44,,44',
'44,44,,44,44,44,44,44,,,,,,,,,,,,,,,,,,,,44,,,44,,,44,44,,,44,,,,,,44',
',,,,,,,,44,,,,,44,44,44,44,,44,44,44,44,,,,,44,44,,,,,,,44,,44,44,44',
'58,58,58,58,58,,,,58,58,,,,58,,58,58,58,58,58,58,58,,,,,,58,58,58,58',
'58,58,58,,,58,,,,,,58,58,,58,58,58,58,58,58,58,58,58,,58,58,58,,58,58',
'58,58,58,,,,,,,,,,,,,,,,,,,,58,,,58,,,58,58,,,58,,58,,,,58,,,,,,,,,58',
',,,,58,58,58,58,,58,58,58,58,,,,,58,58,,,,59,59,59,58,59,58,58,58,59',
'59,,,,59,,59,59,59,59,59,59,59,,,,,,59,59,59,59,59,59,59,,,59,,,,,,',
'59,,,59,59,59,59,59,59,59,59,59,59,59,59,,59,59,59,59,59,,,,,,,,,,,',
',,,,,,,,59,,,59,,,59,59,,,59,,59,,,,59,,,59,,,,,,59,,,,,59,59,59,59',
',59,59,59,59,,,,,59,59,,,,60,60,60,59,60,59,59,59,60,60,,,,60,,60,60',
'60,60,60,60,60,,,,,,60,60,60,60,60,60,60,,,60,,,,,,,60,,,60,60,60,60',
'60,60,60,60,60,60,60,60,,60,60,60,60,60,,,,,,,,,,,,,,,,,,,,60,,,60,',
',60,60,,,60,,,,,,60,,,60,,,,,,60,,,,,60,60,60,60,,60,60,60,60,,,,,60',
'60,,,,63,63,63,60,63,60,60,60,63,63,,,,63,,63,63,63,63,63,63,63,,,,',
',63,63,63,63,63,63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63,,63,63',
'63,,63,63,63,63,63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63,,,,,,63,',
',,,,,,,63,,,,,63,63,63,63,,63,63,63,63,,,,,63,63,,,,64,64,64,63,64,63',
'63,63,64,64,,,,64,,64,64,64,64,64,64,64,,,,,,64,64,64,64,64,64,64,,',
'64,,,,,,,64,,,64,64,64,64,64,64,64,64,,64,64,64,,64,64,64,64,64,,,,',
',,,,,,,,,,,,,,,64,,,64,,,64,64,,,64,,,,,,64,,,,,,,,,64,,,,,64,64,64',
'64,,64,64,64,64,,,,,64,64,,,,67,67,67,64,67,64,64,64,67,67,,,,67,,67',
'67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67,67',
'67,67,67,67,67,,67,67,67,,67,67,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67',
',,67,67,,,67,,,,,,67,,,,,,,,,67,,,,,67,67,67,67,,67,67,67,67,,,,,67',
'67,67,,,,,67,67,,67,67,67,68,68,68,,68,,,,68,68,,,,68,,68,68,68,68,68',
'68,68,,,,,,68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68,68,68,68,68,68',
'68,,68,68,68,,68,68,,,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68,,68',
',,,,,,,,,,,,,,,,,68,68,68,68,,68,68,68,68,,,,,68,68,,,,69,69,69,68,69',
'68,68,68,69,69,,,,69,,69,69,69,69,69,69,69,,,,,,69,69,69,69,69,69,69',
',,69,,,,,,,69,,,69,69,69,69,69,69,69,69,,69,69,69,,69,69,,,69,,,,,,',
',,,,,,,,,,69,,,69,,,69,,,69,69,,,69,,,,,,,,,,,,,,,,,,,,69,69,69,69,',
'69,69,69,69,,,,,69,69,,,,70,70,70,69,70,69,69,69,70,70,,,,70,,70,70',
'70,70,70,70,70,,,,,,70,70,70,70,70,70,70,,,70,,,,,,,70,,,70,70,70,70',
'70,70,70,70,,70,70,70,,70,70,,,70,,,,,,,,,,,,,,,,,,,,70,,,70,,,70,70',
',,70,,,896,,896,896,896,896,896,,,,,,,,,896,,70,70,70,70,,70,70,70,70',
',,,,70,70,,,,,,896,70,,70,70,70,111,111,111,111,111,896,896,,111,111',
'896,,,111,,111,111,111,111,111,111,111,,,,,,111,111,111,111,111,111',
'111,,,111,,,,,,111,111,111,111,111,111,111,111,111,111,111,111,,111',
'111,111,,111,111,111,111,111,,,,,,,,,,,,,,,,,,,,111,,,111,,,111,111',
',,111,,111,,,,111,,,,,,,,,111,,,,,111,111,111,111,,111,111,111,111,',
',,,111,111,,,,,,111,111,,111,111,111,116,116,116,,116,,,,116,116,,,',
'116,,116,116,116,116,116,116,116,,,,,,116,116,116,116,116,116,116,,',
'116,,,,,,,116,,,116,116,116,116,116,116,116,116,,116,116,116,,116,116',
'116,116,116,,,,,,,,,,,,,,,,,,,,116,,,116,,,116,116,,,116,,,,,,116,,',
',,,,,,116,,,,,116,116,116,116,,116,116,116,116,,,,,116,116,,,,117,117',
'117,116,117,116,116,116,117,117,,,,117,,117,117,117,117,117,117,117',
',,,,,117,117,117,117,117,117,117,,,117,,,,,,,117,,,117,117,117,117,117',
'117,117,117,,117,117,117,,117,117,117,117,117,,,,,,,,,,,,,,,,,,,,117',
',,117,,,117,117,,,117,,,,,,117,,,,,,,,,117,,,,,117,117,117,117,,117',
'117,117,117,,,,,117,117,,,,118,118,118,117,118,117,117,117,118,118,',
',,118,,118,118,118,118,118,118,118,,,,,,118,118,118,118,118,118,118',
',,118,,,,,,,118,,,118,118,118,118,118,118,118,118,,118,118,118,,118',
'118,118,118,118,,,,,,,,,,,,,,,,,,,,118,,,118,,,118,118,,,118,,,,,,118',
',,,,,,,,118,,,,,118,118,118,118,,118,118,118,118,,,,,118,118,,,,119',
'119,119,118,119,118,118,118,119,119,,,,119,,119,119,119,119,119,119',
'119,,,,,,119,119,119,119,119,119,119,,,119,,,,,,,119,,,119,119,119,119',
'119,119,119,119,,119,119,119,,119,119,119,119,119,,,,,,,,,,,,,,,,,,',
',119,,,119,,,119,119,,,119,,,,,,119,,,,,,,,,119,,,,,119,119,119,119',
',119,119,119,119,,,,,119,119,,,,,,,119,,119,119,119,120,120,120,120',
'120,,,,120,120,,,,120,,120,120,120,120,120,120,120,,,,,,120,120,120',
'120,120,120,120,,,120,,,,,,120,120,,120,120,120,120,120,120,120,120',
'120,,120,120,120,,120,120,120,120,120,,,,,,,,,,,,,,,,,,,,120,,,120,',
',120,120,,,120,,120,,,,120,,,,,,,,,120,,,,,120,120,120,120,,120,120',
'120,120,,,,,120,120,,,,207,207,207,120,207,120,120,120,207,207,,,,207',
',207,207,207,207,207,207,207,,,,,,207,207,207,207,207,207,207,,,207',
',,,,,,207,,,207,207,207,207,207,207,207,207,,207,207,207,,207,207,207',
'207,207,,,,,,,,,,,,,,,,,,,,207,,,207,,,207,207,,,207,,207,,,,207,,,',
',,,,,207,,,,,207,207,207,207,,207,207,207,207,,,,,207,207,,,,208,208',
'208,207,208,207,207,207,208,208,,,,208,,208,208,208,208,208,208,208',
',,,,,208,208,208,208,208,208,208,,,208,,,,,,,208,,,208,208,208,208,208',
'208,208,208,,208,208,208,,208,208,208,208,208,,,,,,,,,,,,,,,,,,,,208',
',,208,,,208,208,,,208,,208,,,,208,,,,,,,,,208,,,,,208,208,208,208,,208',
'208,208,208,,,,,208,208,,,,209,209,209,208,209,208,208,208,209,209,',
',,209,,209,209,209,209,209,209,209,,,,,,209,209,209,209,209,209,209',
',,209,,,,,,,209,,,209,209,209,209,209,209,209,209,,209,209,209,,209',
'209,209,209,209,,,,,,,,,,,,,,,,,,,,209,,,209,,,209,209,,,209,,,,,,209',
',,,,,,,,209,,,,,209,209,209,209,,209,209,209,209,,,,,209,209,,,,210',
'210,210,209,210,209,209,209,210,210,,,,210,,210,210,210,210,210,210',
'210,,,,,,210,210,210,210,210,210,210,,,210,,,,,,,210,,,210,210,210,210',
'210,210,210,210,,210,210,210,,210,210,210,210,210,,,,,,,,,,,,,,,,,,',
',210,,,210,,,210,210,,,210,,,,,,210,,,,,,,,,210,,,,,210,210,210,210',
',210,210,210,210,,,,,210,210,,,,211,211,211,210,211,210,210,210,211',
'211,,,,211,,211,211,211,211,211,211,211,,,,,,211,211,211,211,211,211',
'211,,,211,,,,,,,211,,,211,211,211,211,211,211,211,211,,211,211,211,',
'211,211,211,211,211,,,,,,,,,,,,,,,,,,,,211,,,211,,,211,211,,,211,,,',
',,211,,,,,,,,,211,,,,,211,211,211,211,,211,211,211,211,,,,,211,211,',
',,212,212,212,211,212,211,211,211,212,212,,,,212,,212,212,212,212,212',
'212,212,,,,,,212,212,212,212,212,212,212,,,212,,,,,,,212,,,212,212,212',
'212,212,212,212,212,212,212,212,212,,212,212,212,212,212,,,,,,,,,,,',
',,,,,,,,212,,,212,,,212,212,,,212,,212,,212,,212,,,212,,,,,,212,,,,',
'212,212,212,212,,212,212,212,212,,,,,212,212,,,,217,217,217,212,217',
'212,212,212,217,217,,,,217,,217,217,217,217,217,217,217,,,,,,217,217',
'217,217,217,217,217,,,217,,,,,,,217,,,217,217,217,217,217,217,217,217',
',217,217,217,,217,217,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217',
'217,,,217,,,,,,217,,,,,,,,,217,,,,,217,217,217,217,,217,217,217,217',
',,,,217,217,,,,218,218,218,217,218,217,217,217,218,218,,,,218,,218,218',
'218,218,218,218,218,,,,,,218,218,218,218,218,218,218,,,218,,,,,,,218',
',,218,218,218,218,218,218,218,218,,218,218,218,,218,218,218,218,218',
',,,,,,,,,,,,,,,,,,,218,,,218,,,218,218,,,218,,,,,,218,,,,,,,,,218,,',
',,218,218,218,218,,218,218,218,218,,,,,218,218,,,,219,219,219,218,219',
'218,218,218,219,219,,,,219,,219,219,219,219,219,219,219,,,,,,219,219',
'219,219,219,219,219,,,219,,,,,,,219,,,219,219,219,219,219,219,219,219',
',219,219,219,,219,219,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219',
'219,,,219,,,,,,219,,,,,,,,,219,,,,,219,219,219,219,,219,219,219,219',
',,,,219,219,219,,,230,230,230,219,230,219,219,219,230,230,,,,230,,230',
'230,230,230,230,230,230,,,,,,230,230,230,230,230,230,230,,,230,,,,,',
',230,,,230,230,230,230,230,230,230,230,,230,230,230,,230,230,230,230',
'230,,,,,,,,,,,,,,,,,,,,230,,,230,,,230,230,,,230,,,,,,230,,,,,,,,,230',
',,,,230,230,230,230,,230,230,230,230,,,,,230,230,,,,233,233,233,230',
'233,230,230,230,233,233,,,,233,,233,233,233,233,233,233,233,,,,,,233',
'233,233,233,233,233,233,,,233,,,,,,,233,,,233,233,233,233,233,233,233',
'233,,233,233,233,,233,233,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,',
',233,233,,,233,,,,,,233,,,,,,,,,233,,,,,233,233,233,233,,233,233,233',
'233,,,,,233,233,,,,234,234,234,233,234,233,233,233,234,234,,,,234,,234',
'234,234,234,234,234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,',
',234,,,234,234,234,234,234,234,234,234,,234,234,234,,234,234,234,234',
'234,,,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,,234,,,,,,234,,,,,,,,,234',
',,,,234,234,234,234,,234,234,234,234,,,,,234,234,,,,235,235,235,234',
'235,234,234,234,235,235,,,,235,,235,235,235,235,235,235,235,,,,,,235',
'235,235,235,235,235,235,,,235,,,,,,,235,,,235,235,235,235,235,235,235',
'235,,235,235,235,,235,235,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,',
',235,235,,,235,,,,,,235,,,,,,,,,235,,,,,235,235,235,235,,235,235,235',
'235,,,,,235,235,,,,236,236,236,235,236,235,235,235,236,236,,,,236,,236',
'236,236,236,236,236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,',
',236,,,236,236,236,236,236,236,236,236,,236,236,236,,236,236,236,236',
'236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,,236',
',,,,236,236,236,236,,236,236,236,236,,,,,236,236,,,,237,237,237,236',
'237,236,236,236,237,237,,,,237,,237,237,237,237,237,237,237,,,,,,237',
'237,237,237,237,237,237,,,237,,,,,,,237,,,237,237,237,237,237,237,237',
'237,,237,237,237,,237,237,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,',
',237,237,,,237,,,,,,237,,,,,,,,,237,,,,,237,237,237,237,,237,237,237',
'237,,,,,237,237,,,,238,238,238,237,238,237,237,237,238,238,,,,238,,238',
'238,238,238,238,238,238,,,,,,238,238,238,238,238,238,238,,,238,,,,,',
',238,,,238,238,238,238,238,238,238,238,,238,238,238,,238,238,238,238',
'238,,,,,,,,,,,,,,,,,,,,238,,,238,,,238,238,,,238,,,,,,238,,,,,,,,,238',
',,,,238,238,238,238,,238,238,238,238,,,,,238,238,,,,239,239,239,238',
'239,238,238,238,239,239,,,,239,,239,239,239,239,239,239,239,,,,,,239',
'239,239,239,239,239,239,,,239,,,,,,,239,,,239,239,239,239,239,239,239',
'239,,239,239,239,,239,239,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,',
',239,239,,,239,,,,,,239,,,,,,,,,239,,,,,239,239,239,239,,239,239,239',
'239,,,,,239,239,,,,240,240,240,239,240,239,239,239,240,240,,,,240,,240',
'240,240,240,240,240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,',
',240,,,240,240,240,240,240,240,240,240,,240,240,240,,240,240,240,240',
'240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240,,,240,,,,,,240,,,,,,,,,240',
',,,,240,240,240,240,,240,240,240,240,,,,,240,240,,,,241,241,241,240',
'241,240,240,240,241,241,,,,241,,241,241,241,241,241,241,241,,,,,,241',
'241,241,241,241,241,241,,,241,,,,,,,241,,,241,241,241,241,241,241,241',
'241,,241,241,241,,241,241,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,',
',241,241,,,241,,,,,,241,,,,,,,,,241,,,,,241,241,241,241,,241,241,241',
'241,,,,,241,241,,,,242,242,242,241,242,241,241,241,242,242,,,,242,,242',
'242,242,242,242,242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,',
',242,,,242,242,242,242,242,242,242,242,,242,242,242,,242,242,242,242',
'242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,,242',
',,,,242,242,242,242,,242,242,242,242,,,,,242,242,,,,243,243,243,242',
'243,242,242,242,243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243',
'243,243,243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243',
'243,,243,243,243,,243,243,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,',
',243,243,,,243,,,,,,243,,,,,,,,,243,,,,,243,243,243,243,,243,243,243',
'243,,,,,243,243,,,,244,244,244,243,244,243,243,243,244,244,,,,244,,244',
'244,244,244,244,244,244,,,,,,244,244,244,244,244,244,244,,,244,,,,,',
',244,,,244,244,244,244,244,244,244,244,,244,244,244,,244,244,244,244',
'244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,,,,244',
',,,,244,244,244,244,,244,244,244,244,,,,,244,244,,,,245,245,245,244',
'245,244,244,244,245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245',
'245,245,245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245',
'245,,245,245,245,,245,245,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,',
',245,245,,,245,,,,,,245,,,,,,,,,245,,,,,245,245,245,245,,245,245,245',
'245,,,,,245,245,,,,246,246,246,245,246,245,245,245,246,246,,,,246,,246',
'246,246,246,246,246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,',
',246,,,246,246,246,246,246,246,246,246,,246,246,246,,246,246,246,246',
'246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,,246',
',,,,246,246,246,246,,246,246,246,246,,,,,246,246,,,,247,247,247,246',
'247,246,246,246,247,247,,,,247,,247,247,247,247,247,247,247,,,,,,247',
'247,247,247,247,247,247,,,247,,,,,,,247,,,247,247,247,247,247,247,247',
'247,,247,247,247,,247,247,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,',
',247,247,,,247,,,,,,247,,,,,,,,,247,,,,,247,247,247,247,,247,247,247',
'247,,,,,247,247,,,,248,248,248,247,248,247,247,247,248,248,,,,248,,248',
'248,248,248,248,248,248,,,,,,248,248,248,248,248,248,248,,,248,,,,,',
',248,,,248,248,248,248,248,248,248,248,,248,248,248,,248,248,248,248',
'248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248,,,,,,248,,,,,,,,,248',
',,,,248,248,248,248,,248,248,248,248,,,,,248,248,,,,249,249,249,248',
'249,248,248,248,249,249,,,,249,,249,249,249,249,249,249,249,,,,,,249',
'249,249,249,249,249,249,,,249,,,,,,,249,,,249,249,249,249,249,249,249',
'249,,249,249,249,,249,249,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,',
',249,249,,,249,,,,,,249,,,,,,,,,249,,,,,249,249,249,249,,249,249,249',
'249,,,,,249,249,,,,250,250,250,249,250,249,249,249,250,250,,,,250,,250',
'250,250,250,250,250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,',
',250,,,250,250,250,250,250,250,250,250,,250,250,250,,250,250,250,250',
'250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,,250',
',,,,250,250,250,250,,250,250,250,250,,,,,250,250,,,,251,251,251,250',
'251,250,250,250,251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251',
'251,251,251,251,251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251',
'251,,251,251,251,,251,251,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,',
',251,251,,,251,,,,,,251,,,,,,,,,251,,,,,251,251,251,251,,251,251,251',
'251,,,,,251,251,,,,252,252,252,251,252,251,251,251,252,252,,,,252,,252',
'252,252,252,252,252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,',
',252,,,252,252,252,252,252,252,252,252,,252,252,252,,252,252,252,252',
'252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,,252',
',,,,252,252,252,252,,252,252,252,252,,,,,252,252,,,,253,253,253,252',
'253,252,252,252,253,253,,,,253,,253,253,253,253,253,253,253,,,,,,253',
'253,253,253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253',
'253,,253,253,253,,253,253,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,',
',253,253,,,253,,,,,,253,,,,,,,,,253,,,,,253,253,253,253,,253,253,253',
'253,,,,,253,253,,,,254,254,254,253,254,253,253,253,254,254,,,,254,,254',
'254,254,254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,',
',254,,,254,254,254,254,254,254,254,254,,254,254,254,,254,254,254,254',
'254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,,254',
',,,,254,254,254,254,,254,254,254,254,,,,,254,254,,,,255,255,255,254',
'255,254,254,254,255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255',
'255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255',
'255,,255,255,255,,255,255,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,',
',255,255,,,255,,,,,,255,,,,,,,,,255,,,,,255,255,255,255,,255,255,255',
'255,,,,,255,255,,,,256,256,256,255,256,255,255,255,256,256,,,,256,,256',
'256,256,256,256,256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,',
',256,,,256,256,256,256,256,256,256,256,,256,256,256,,256,256,256,256',
'256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,,256',
',,,,256,256,256,256,,256,256,256,256,,,,,256,256,,,,257,257,257,256',
'257,256,256,256,257,257,,,,257,,257,257,257,257,257,257,257,,,,,,257',
'257,257,257,257,257,257,,,257,,,,,,,257,,,257,257,257,257,257,257,257',
'257,,257,257,257,,257,257,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,',
',257,257,,,257,,,,,,257,,,,,,,,,257,,,,,257,257,257,257,,257,257,257',
'257,,,,,257,257,,,,258,258,258,257,258,257,257,257,258,258,,,,258,,258',
'258,258,258,258,258,258,,,,,,258,258,258,258,258,258,258,,,258,,,,,',
',258,,,258,258,258,258,258,258,258,258,,258,258,258,,258,258,258,258',
'258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,,,,,258,,,,,,,,,258',
',,,,258,258,258,258,,258,258,258,258,,,,,258,258,,,,265,265,265,258',
'265,258,258,258,265,265,,,,265,,265,265,265,265,265,265,265,,,,,,265',
'265,265,265,265,265,265,,,265,,,,,,,265,,,265,265,265,265,265,265,265',
'265,265,265,265,265,,265,265,265,265,265,,,,,,,,,,,,,,,,,,,,265,,,265',
',,265,265,,,265,,265,,265,,265,,,265,,,,,,265,,,,,265,265,265,265,,265',
'265,265,265,,,,,265,265,,,,266,266,266,265,266,265,265,265,266,266,',
',,266,,266,266,266,266,266,266,266,,,,,,266,266,266,266,266,266,266',
',,266,,,,,,,266,,,266,266,266,266,266,266,266,266,266,266,266,266,,266',
'266,266,266,266,,,,,,,,,,,,,,,,,,,,266,,,266,,,266,266,,,266,,266,,266',
',266,,,266,,,,,,266,,,,,266,266,266,266,,266,266,266,266,,,,,266,266',
',,,274,274,274,266,274,266,266,266,274,274,,,,274,,274,274,274,274,274',
'274,274,,,,,,274,274,274,274,274,274,274,,,274,,,,,,,274,,,274,274,274',
'274,274,274,274,274,274,274,274,274,,274,274,274,274,274,,,,,,,,,,,',
',,,,,,,,274,,,274,,,274,274,,,274,,274,,274,,274,,,274,,,,,,274,,,,',
'274,274,274,274,,274,274,274,274,,,,,274,274,274,,,281,281,281,274,281',
'274,274,274,281,281,,,,281,,281,281,281,281,281,281,281,,,,,,281,281',
'281,281,281,281,281,,,281,,,,,,,281,,,281,281,281,281,281,281,281,281',
',281,281,281,,281,281,281,281,281,,,,,,,,,,,,,,,,,,,,281,,,281,,,281',
'281,,,281,,,,,,281,,,,,,,,,281,,,,,281,281,281,281,,281,281,281,281',
',,,,281,281,,,,283,283,283,281,283,281,281,281,283,283,,,,283,,283,283',
'283,283,283,283,283,,,,,,283,283,283,283,283,283,283,,,283,,,,,,,283',
',,283,283,283,283,283,283,283,283,,283,283,283,,283,283,283,283,283',
',,,,,,,,,,,,,,,,,,,283,,,283,,,283,283,,,283,,,,,,283,,,,,,,,,283,,',
',,283,283,283,283,,283,283,283,283,,,,,283,283,,,,286,286,286,283,286',
'283,283,283,286,286,,,,286,,286,286,286,286,286,286,286,,,,,,286,286',
'286,286,286,286,286,,,286,,,,,,,286,,,286,286,286,286,286,286,286,286',
',286,286,286,,286,286,286,286,286,,,,,,,,,,,,,,,,,,,,286,,,286,,,286',
'286,,,286,,,,,,286,,,,,,,,,286,,,,,286,286,286,286,,286,286,286,286',
',,,,286,286,,,,287,287,287,286,287,286,286,286,287,287,,,,287,,287,287',
'287,287,287,287,287,,,,,,287,287,287,287,287,287,287,,,287,,,,,,,287',
',,287,287,287,287,287,287,287,287,,287,287,287,,287,287,287,287,287',
',,,,,,,,,,,,,,,,,,,287,,,287,,,287,287,,,287,,,,,,287,,,,,,,,,287,,',
',,287,287,287,287,,287,287,287,287,,,,,287,287,,,,,,,287,,287,287,287',
'292,292,292,292,292,,,,292,292,,,,292,,292,292,292,292,292,292,292,',
',,,,292,292,292,292,292,292,292,,,292,,,,,,292,292,,292,292,292,292',
'292,292,292,292,292,,292,292,292,,292,292,292,292,292,,,,,,,,,,,,,,',
',,,,,292,,,292,,,292,292,,,292,,292,,,,292,,,,,,,,,292,,,,,292,292,292',
'292,,292,292,292,292,,,,,292,292,,,,300,300,300,292,300,292,292,292',
'300,300,,,,300,,300,300,300,300,300,300,300,,,,,,300,300,300,300,300',
'300,300,,,300,,,,,,,300,,,300,300,300,300,300,300,300,300,,300,300,300',
',300,300,,,300,,,,,,,,,,,,,,,,,,,,300,,,300,,,300,300,,,300,,,898,,898',
'898,898,898,898,,,,,,,,,898,,300,300,300,300,,300,300,300,300,,,,,300',
'300,,,,300,,898,300,,300,300,300,317,317,317,,317,898,898,,317,317,898',
',,317,,317,317,317,317,317,317,317,,,,,,317,317,317,317,317,317,317',
',,317,,,,,,,317,,,317,317,317,317,317,317,317,317,,317,317,317,,317',
'317,,,317,,,,,,,,,,,,,,,,,,,,317,,,317,,,317,317,,,317,,,,,,,,,,,,,',
',,,,,,317,317,317,317,,317,317,317,317,,,,,317,317,,,,325,325,325,317',
'325,317,317,317,325,325,,,,325,,325,325,325,325,325,325,325,,,,,,325',
'325,325,325,325,325,325,,,325,,,,,,,325,,,325,325,325,325,325,325,325',
'325,,325,325,325,,325,325,325,325,325,,,,,,,,,,,,,,,,,,,,325,,,325,325',
',325,325,,,325,,,,,,325,,,,,,,,,325,,,,,325,325,325,325,,325,325,325',
'325,,,,,325,325,,,,342,342,342,325,342,325,325,325,342,342,,,,342,,342',
'342,342,342,342,342,342,,,,,,342,342,342,342,342,342,342,,,342,,,,,',
',342,,,342,342,342,342,342,342,342,342,,342,342,342,,342,342,342,342',
'342,,,,,,,,,,,,,,,,,,,,342,,,342,,,342,342,,,342,,,,,,342,,,,,,,,,342',
',,,,342,342,342,342,,342,342,342,342,,,,,342,342,,,,343,343,343,342',
'343,342,342,342,343,343,,,,343,,343,343,343,343,343,343,343,,,,,,343',
'343,343,343,343,343,343,,,343,,,,,,,343,,,343,343,343,343,343,343,343',
'343,,343,343,343,,343,343,343,343,343,,,,,,,,,,,,,,,,,,,,343,,,343,',
',343,343,,,343,,,,,,343,,,,,,,,,343,,,,,343,343,343,343,,343,343,343',
'343,,,,,343,343,,,,362,362,362,343,362,343,343,343,362,362,,,,362,,362',
'362,362,362,362,362,362,,,,,,362,362,362,362,362,362,362,,,362,,,,,',
',362,,,362,362,362,362,362,362,362,362,,362,362,362,,362,362,362,362',
'362,,,,,,,,,,,,,,,,,,,,362,,,362,,,362,362,,,362,,,,,,362,,,,,,,,,362',
',,,,362,362,362,362,,362,362,362,362,,,,,362,362,,,,378,378,378,362',
'378,362,362,362,378,378,,,,378,,378,378,378,378,378,378,378,,,,,,378',
'378,378,378,378,378,378,,,378,,,,,,,378,,,378,378,378,378,378,378,378',
'378,,378,378,378,,378,378,378,378,378,,,,,,,,,,,,,,,,,,,,378,,,378,',
',378,378,,,378,,,,,,378,,,,,,,,,378,,,,,378,378,378,378,,378,378,378',
'378,,,,,378,378,,,,406,406,406,378,406,378,378,378,406,406,,,,406,,406',
'406,406,406,406,406,406,,,,,,406,406,406,406,406,406,406,,,406,,,,,',
',406,,,406,406,406,406,406,406,406,406,,406,406,406,,406,406,406,406',
'406,,,,,,,,,,,,,,,,,,,,406,,,406,,,406,406,,,406,,,,,,406,,,,,,,,,406',
',,,,406,406,406,406,,406,406,406,406,,,,,406,406,,,,449,449,449,406',
'449,406,406,406,449,449,,,,449,,449,449,449,449,449,449,449,,,,,,449',
'449,449,449,449,449,449,,,449,,,,,,,449,,,449,449,449,449,449,449,449',
'449,449,449,449,449,,449,449,449,449,449,,,,,,,,,,,,,,,,,,,,449,,,449',
',,449,449,,,449,,449,,449,,449,,,449,,,,,,449,,,,,449,449,449,449,,449',
'449,449,449,,,,,449,449,,,,451,451,451,449,451,449,449,449,451,451,',
',,451,,451,451,451,451,451,451,451,,,,,,451,451,451,451,451,451,451',
',,451,,,,,,,451,,,451,451,451,451,451,451,451,451,,451,451,451,,451',
'451,451,451,451,,,,,,,,,,,,,,,,,,,,451,,,451,,,451,451,,,451,,,,,,451',
',,,,,,,,451,,,,,451,451,451,451,,451,451,451,451,,,,,451,451,,,,452',
'452,452,451,452,451,451,451,452,452,,,,452,,452,452,452,452,452,452',
'452,,,,,,452,452,452,452,452,452,452,,,452,,,,,,,452,,,452,452,452,452',
'452,452,452,452,,452,452,452,,452,452,452,452,452,,,,,,,,,,,,,,,,,,',
',452,,,452,,,452,452,,,452,,,,,,452,,,,,,,,,452,,,,,452,452,452,452',
',452,452,452,452,,,,,452,452,,,,453,453,453,452,453,452,452,452,453',
'453,,,,453,,453,453,453,453,453,453,453,,,,,,453,453,453,453,453,453',
'453,,,453,,,,,,,453,,,453,453,453,453,453,453,453,453,,453,453,453,',
'453,453,453,453,453,,,,,,,,,,,,,,,,,,,,453,,,453,,,453,453,,,453,,,',
',,453,,,,,,,,,453,,,,,453,453,453,453,,453,453,453,453,,,,,453,453,',
',,493,493,493,453,493,453,453,453,493,493,,,,493,,493,493,493,493,493',
'493,493,,,,,,493,493,493,493,493,493,493,,,493,,,,,,,493,,,493,493,493',
'493,493,493,493,493,493,493,493,493,,493,493,493,493,493,,,,,,,,,,,',
',,,,,,,,493,,,493,,,493,493,,,493,,493,,493,,493,,,493,,,,,,493,,,,',
'493,493,493,493,,493,493,493,493,,,,,493,493,,,,495,495,495,493,495',
'493,493,493,495,495,,,,495,,495,495,495,495,495,495,495,,,,,,495,495',
'495,495,495,495,495,,,495,,,,,,,495,,,495,495,495,495,495,495,495,495',
'495,495,495,495,,495,495,495,495,495,,,,,,,,,,,,,,,,,,,,495,,,495,,',
'495,495,,,495,,,,495,,495,,,495,,,,,,495,,,,,495,495,495,495,,495,495',
'495,495,,,,,495,495,,,,497,497,497,495,497,495,495,495,497,497,,,,497',
',497,497,497,497,497,497,497,,,,,,497,497,497,497,497,497,497,,,497',
',,,,,,497,,,497,497,497,497,497,497,497,497,,497,497,497,,497,497,497',
'497,497,,,,,,,,,,,,,,,,,,,,497,,,497,,,497,497,,,497,,,,,,497,,,,,,',
',,497,,,,,497,497,497,497,,497,497,497,497,,,,,497,497,,,,,,,497,,497',
'497,497,503,503,503,503,503,,,,503,503,,,,503,,503,503,503,503,503,503',
'503,,,,,,503,503,503,503,503,503,503,,,503,,,,,,503,503,503,503,503',
'503,503,503,503,503,503,503,,503,503,503,,503,503,503,503,503,,,,,,',
',,,,,,,,,,,,,503,,,503,,,503,503,,,503,,503,,,,503,,,,,,,,,503,,,,,503',
'503,503,503,,503,503,503,503,,,,,503,503,,,,,,503,503,,503,503,503,511',
'511,511,,511,,,,511,511,,,,511,,511,511,511,511,511,511,511,,,,,,511',
'511,511,511,511,511,511,,,511,,,,,,,511,,,511,511,511,511,511,511,511',
'511,,511,511,511,,511,511,,,511,,,,,,,,,,,,,,,,,,,,511,,,511,,,511,511',
',,511,,,,,,,,,,,,,,,,,,,,511,511,511,511,,511,511,511,511,,,,,511,511',
',,,513,513,513,511,513,511,511,511,513,513,,,,513,,513,513,513,513,513',
'513,513,,,,,,513,513,513,513,513,513,513,,,513,,,,,,,513,,,513,513,513',
'513,513,513,513,513,513,513,513,513,,513,513,513,513,513,,,,,,,,,,,',
',,,,,,,,513,,,513,,,513,513,,,513,,513,,513,,513,,,513,,,,,,513,,,,',
'513,513,513,513,,513,513,513,513,,,,,513,513,,,,519,519,519,513,519',
'513,513,513,519,519,,,,519,,519,519,519,519,519,519,519,,,,,,519,519',
'519,519,519,519,519,,,519,,,,,,,519,,,519,519,519,519,519,519,519,519',
',519,519,519,,519,519,,,519,,,,,,,,,,,,,,,,,,,,519,,,519,,,519,519,',
',519,,,,,,,,,,,,,,,,,,,,519,519,519,519,,519,519,519,519,,,,,519,519',
',,,522,522,522,519,522,519,519,519,522,522,,,,522,,522,522,522,522,522',
'522,522,,,,,,522,522,522,522,522,522,522,,,522,,,,,,,522,,,522,522,522',
'522,522,522,522,522,,522,522,522,,522,522,522,522,522,,,,,,,,,,,,,,',
',,,,,522,,,522,,,522,522,,,522,,,,,,522,,,,,,,,,522,,,,,522,522,522',
'522,,522,522,522,522,,,,,522,522,,,,523,523,523,522,523,522,522,522',
'523,523,,,,523,,523,523,523,523,523,523,523,,,,,,523,523,523,523,523',
'523,523,,,523,,,,,,,523,,,523,523,523,523,523,523,523,523,,523,523,523',
',523,523,523,523,523,,,,,,,,,,,,,,,,,,,,523,,,523,,,523,523,,,523,,',
',,,523,,,,,,,,,523,,,,,523,523,523,523,,523,523,523,523,,,,,523,523',
',,,527,527,527,523,527,523,523,523,527,527,,,,527,,527,527,527,527,527',
'527,527,,,,,,527,527,527,527,527,527,527,,,527,,,,,,,527,,,527,527,527',
'527,527,527,527,527,,527,527,527,,527,527,527,527,527,,,,,,,,,,,,,,',
',,,,,527,,,527,,,527,527,,,527,,,,,,527,,,,,,,,,527,,,,,527,527,527',
'527,,527,527,527,527,,,,,527,527,,,,533,533,533,527,533,527,527,527',
'533,533,,,,533,,533,533,533,533,533,533,533,,,,,,533,533,533,533,533',
'533,533,,,533,,,,,,,533,,,533,533,533,533,533,533,533,533,533,533,533',
'533,,533,533,533,533,533,,,,,,,,,,,,,,,,,,,,533,,,533,,,533,533,,,533',
',533,,,,533,,,533,,,,,,533,,,,,533,533,533,533,,533,533,533,533,,,,',
'533,533,,,,536,536,536,533,536,533,533,533,536,536,,,,536,,536,536,536',
'536,536,536,536,,,,,,536,536,536,536,536,536,536,,,536,,,,,,,536,,,536',
'536,536,536,536,536,536,536,536,536,536,536,,536,536,536,536,536,,,',
',,,,,,,,,,,,,,,,536,,,536,,,536,536,,,536,,,,,,536,,,536,,,,,,536,,',
',,536,536,536,536,,536,536,536,536,,,,,536,536,,,,561,561,561,536,561',
'536,536,536,561,561,,,,561,,561,561,561,561,561,561,561,,,,,,561,561',
'561,561,561,561,561,,,561,,,,,,,561,,,561,561,561,561,561,561,561,561',
',561,561,561,,561,561,561,561,561,,,,,,,,,,,,,,,,,,,,561,,,561,,,561',
'561,,,561,,,,,,561,,,,,,,,,561,,,,,561,561,561,561,,561,561,561,561',
',,,,561,561,,,,581,581,581,561,581,561,561,561,581,581,,,,581,,581,581',
'581,581,581,581,581,,,,,,581,581,581,581,581,581,581,,,581,,,,,,,581',
',,581,581,581,581,581,581,581,581,,581,581,581,,581,581,581,581,581',
',,,,,,,,,,,,,,,,,,,581,,,581,,,581,581,,,581,,581,,,,581,,,,,,,,,581',
',,,,581,581,581,581,,581,581,581,581,,,,,581,581,,,,582,582,582,581',
'582,581,581,581,582,582,,,,582,,582,582,582,582,582,582,582,,,,,,582',
'582,582,582,582,582,582,,,582,,,,,,,582,,,582,582,582,582,582,582,582',
'582,582,582,582,582,,582,582,582,582,582,,,,,,,,,,,,,,,,,,,,582,,,582',
',,582,582,,,582,,582,,582,,582,,,582,,,,,,582,,,,,582,582,582,582,,582',
'582,582,582,,,,,582,582,,,,592,592,592,582,592,582,582,582,592,592,',
',,592,,592,592,592,592,592,592,592,,,,,,592,592,592,592,592,592,592',
',,592,,,,,,,592,,,592,592,592,592,592,592,592,592,592,592,592,592,,592',
'592,592,592,592,,,,,,,,,,,,,,,,,,,,592,,,592,,,592,592,,,592,,592,,592',
',592,,,592,,,,,,592,,,,,592,592,592,592,,592,592,592,592,,,,,592,592',
',,,624,624,624,592,624,592,592,592,624,624,,,,624,,624,624,624,624,624',
'624,624,,,,,,624,624,624,624,624,624,624,,,624,,,,,,,624,,,624,624,624',
'624,624,624,624,624,,624,624,624,,624,624,624,624,624,,,,,,,,,,,,,,',
',,,,,624,,,624,,,624,624,,,624,,624,,,,624,,,,,,,,,624,,,,,624,624,624',
'624,,624,624,624,624,,,,,624,624,,,,625,625,625,624,625,624,624,624',
'625,625,,,,625,,625,625,625,625,625,625,625,,,,,,625,625,625,625,625',
'625,625,,,625,,,,,,,625,,,625,625,625,625,625,625,625,625,,625,625,625',
',625,625,625,625,625,,,,,,,,,,,,,,,,,,,,625,,,625,,,625,625,,,625,,',
',,,625,,,,,,,,,625,,,,,625,625,625,625,,625,625,625,625,,,,,625,625',
',,,626,626,626,625,626,625,625,625,626,626,,,,626,,626,626,626,626,626',
'626,626,,,,,,626,626,626,626,626,626,626,,,626,,,,,,,626,,,626,626,626',
'626,626,626,626,626,626,626,626,626,,626,626,626,626,626,,,,,,,,,,,',
',,,,,,,,626,,,626,,,626,626,,,626,,626,,626,,626,,,626,,,,,,626,,,,',
'626,626,626,626,,626,626,626,626,,,,,626,626,,,,,,,626,,626,626,626',
'629,629,629,629,629,,,,629,629,,,,629,,629,629,629,629,629,629,629,',
',,,,629,629,629,629,629,629,629,,,629,,,,,,629,629,,629,629,629,629',
'629,629,629,629,629,,629,629,629,,629,629,629,629,629,,,,,,,,,,,,,,',
',,,,,629,,,629,,,629,629,,,629,,629,,,,629,,,,,,,,,629,,,,,629,629,629',
'629,,629,629,629,629,,,,,629,629,,,,630,630,630,629,630,629,629,629',
'630,630,,,,630,,630,630,630,630,630,630,630,,,,,,630,630,630,630,630',
'630,630,,,630,,,,,,,630,,,630,630,630,630,630,630,630,630,,630,630,630',
',630,630,630,630,630,,,,,,,,,,,,,,,,,,,,630,,,630,,,630,630,,,630,,',
',,,630,,,,,,,,,630,,,,,630,630,630,630,,630,630,630,630,,,,,630,630',
',,,633,633,633,630,633,630,630,630,633,633,,,,633,,633,633,633,633,633',
'633,633,,,,,,633,633,633,633,633,633,633,,,633,,,,,,,633,,,633,633,633',
'633,633,633,633,633,633,633,633,633,,633,633,633,633,633,,,,,,,,,,,',
',,,,,,,,633,,,633,,,633,633,,,633,,633,,633,,633,,,633,,,,,,633,,,,',
'633,633,633,633,,633,633,633,633,,,,,633,633,,,,634,634,634,633,634',
'633,633,633,634,634,,,,634,,634,634,634,634,634,634,634,,,,,,634,634',
'634,634,634,634,634,,,634,,,,,,,634,,,634,634,634,634,634,634,634,634',
'634,634,634,634,,634,634,634,634,634,,,,,,,,,,,,,,,,,,,,634,,,634,,',
'634,634,,,634,,,,634,,634,,,634,,,,,,634,,,,,634,634,634,634,,634,634',
'634,634,,,,,634,634,,,,635,635,635,634,635,634,634,634,635,635,,,,635',
',635,635,635,635,635,635,635,,,,,,635,635,635,635,635,635,635,,,635',
',,,,,,635,,,635,635,635,635,635,635,635,635,,635,635,635,,635,635,635',
'635,635,,,,,,,,,,,,,,,,,,,,635,,,635,,,635,635,,,635,,,,,,635,,,,,,',
',,635,,,,,635,635,635,635,,635,635,635,635,,,,,635,635,,,,636,636,636',
'635,636,635,635,635,636,636,,,,636,,636,636,636,636,636,636,636,,,,',
',636,636,636,636,636,636,636,,,636,,,,,,,636,,,636,636,636,636,636,636',
'636,636,,636,636,636,,636,636,636,636,636,,,,,,,,,,,,,,,,,,,,636,,,636',
',,636,636,,,636,,,,,,636,,,,,,,,,636,,,,,636,636,636,636,,636,636,636',
'636,,,,,636,636,,,,640,640,640,636,640,636,636,636,640,640,,,,640,,640',
'640,640,640,640,640,640,,,,,,640,640,640,640,640,640,640,,,640,,,,,',
',640,,,640,640,640,640,640,640,640,640,,640,640,640,,640,640,640,640',
'640,,,,,,,,,,,,,,,,,,,,640,,,640,,,640,640,,,640,,,,,,640,,,,,,,,,640',
',,,,640,640,640,640,,640,640,640,640,,,,,640,640,,,,641,641,641,640',
'641,640,640,640,641,641,,,,641,,641,641,641,641,641,641,641,,,,,,641',
'641,641,641,641,641,641,,,641,,,,,,,641,,,641,641,641,641,641,641,641',
'641,,641,641,641,,641,641,641,641,641,,,,,,,,,,,,,,,,,,,,641,,,641,',
',641,641,,,641,,,,,,641,,,,,,,,,641,,,,,641,641,641,641,,641,641,641',
'641,,,,,641,641,,,,665,665,665,641,665,641,641,641,665,665,,,,665,,665',
'665,665,665,665,665,665,,,,,,665,665,665,665,665,665,665,,,665,,,,,',
',665,,,665,665,665,665,665,665,665,665,,665,665,665,,665,665,665,665',
'665,,,,,,,,,,,,,,,,,,,,665,,,665,,,665,665,,,665,,,,,,665,,,,,,,,,665',
',,,,665,665,665,665,,665,665,665,665,,,,,665,665,,,,668,668,668,665',
'668,665,665,665,668,668,,,,668,,668,668,668,668,668,668,668,,,,,,668',
'668,668,668,668,668,668,,,668,,,,,,,668,,,668,668,668,668,668,668,668',
'668,,668,668,668,,668,668,668,668,668,,,,,,,,,,,,,,,,,,,,668,,,668,',
',668,668,,,668,,,,,,668,,,,,,,,,668,,,,,668,668,668,668,,668,668,668',
'668,,,,,668,668,,,,672,672,672,668,672,668,668,668,672,672,,,,672,,672',
'672,672,672,672,672,672,,,,,,672,672,672,672,672,672,672,,,672,,,,,',
',672,,,672,672,672,672,672,672,672,672,,672,672,672,,672,672,,,672,',
',,,,,,,,,,,,,,,,,,672,,,672,,,672,672,,,672,,,,,,,,,,,,,,,,,,,,672,672',
'672,672,,672,672,672,672,,,,,672,672,,,,683,683,683,672,683,672,672',
'672,683,683,,,,683,,683,683,683,683,683,683,683,,,,,,683,683,683,683',
'683,683,683,,,683,,,,,,,683,,,683,683,683,683,683,683,683,683,,683,683',
'683,,683,683,,,683,,,,,,,,,,,,,,,,,,,,683,,,683,,,683,683,,,683,,,,',
',,,,,,,,,,,,,,,683,683,683,683,,683,683,683,683,,,,,683,683,,,,688,688',
'688,683,688,683,683,683,688,688,,,,688,,688,688,688,688,688,688,688',
',,,,,688,688,688,688,688,688,688,,,688,,,,,,,688,,,688,688,688,688,688',
'688,688,688,,688,688,688,,688,688,688,688,688,,,,,,,,,,,,,,,,,,,,688',
',,688,,,688,688,,,688,,688,,,,688,,,,,,,,,688,,,,,688,688,688,688,,688',
'688,688,688,,,,,688,688,,,,705,705,705,688,705,688,688,688,705,705,',
',,705,,705,705,705,705,705,705,705,,,,,,705,705,705,705,705,705,705',
',,705,,,,,,,705,,,705,705,705,705,705,705,705,705,,705,705,705,,705',
'705,705,705,705,,,,,,,,,,,,,,,,,,,,705,,,705,,,705,705,,,705,,,,,,705',
',,,,,,,,705,,,,,705,705,705,705,,705,705,705,705,,,,,705,705,,,,731',
'731,731,705,731,705,705,705,731,731,,,,731,,731,731,731,731,731,731',
'731,,,,,,731,731,731,731,731,731,731,,,731,,,,,,,731,,,731,731,731,731',
'731,731,731,731,,731,731,731,,731,731,731,731,731,,,,,,,,,,,,,,,,,,',
',731,,,731,,,731,731,,,731,,,,,,731,,,,,,,,,731,,,,,731,731,731,731',
',731,731,731,731,,,,,731,731,,,,737,737,737,731,737,731,731,731,737',
'737,,,,737,,737,737,737,737,737,737,737,,,,,,737,737,737,737,737,737',
'737,,,737,,,,,,,737,,,737,737,737,737,737,737,737,737,,737,737,737,',
'737,737,737,737,737,,,,,,,,,,,,,,,,,,,,737,,,737,,,737,737,,,737,,,',
',,737,,,,,,,,,737,,,,,737,737,737,737,,737,737,737,737,,,,,737,737,',
',,759,759,759,737,759,737,737,737,759,759,,,,759,,759,759,759,759,759',
'759,759,,,,,,759,759,759,759,759,759,759,,,759,,,,,,,759,,,759,759,759',
'759,759,759,759,759,,759,759,759,,759,759,759,759,759,,,,,,,,,,,,,,',
',,,,,759,,,759,,,759,759,,,759,,,,,,759,,,,,,,,,759,,,,,759,759,759',
'759,,759,759,759,759,,,,,759,759,,,,767,767,767,759,767,759,759,759',
'767,767,,,,767,,767,767,767,767,767,767,767,,,,,,767,767,767,767,767',
'767,767,,,767,,,,,,,767,,,767,767,767,767,767,767,767,767,,767,767,767',
',767,767,767,767,767,,,,,,,,,,,,,,,,,,,,767,,,767,,,767,767,,,767,,',
',,,767,,,,,,,,,767,,,,,767,767,767,767,,767,767,767,767,,,,,767,767',
',,,780,780,780,767,780,767,767,767,780,780,,,,780,,780,780,780,780,780',
'780,780,,,,,,780,780,780,780,780,780,780,,,780,,,,,,,780,,,780,780,780',
'780,780,780,780,780,,780,780,780,,780,780,780,780,780,,,,,,,,,,,,,,',
',,,,,780,,,780,,,780,780,,,780,,,,,,780,,,,,,,,,780,,,,,780,780,780',
'780,,780,780,780,780,,,,,780,780,,,,781,781,781,780,781,780,780,780',
'781,781,,,,781,,781,781,781,781,781,781,781,,,,,,781,781,781,781,781',
'781,781,,,781,,,,,,,781,,,781,781,781,781,781,781,781,781,,781,781,781',
',781,781,781,781,781,,,,,,,,,,,,,,,,,,,,781,,,781,,,781,781,,,781,,',
',,,781,,,,,,,,,781,,,,,781,781,781,781,,781,781,781,781,,,,,781,781',
',,,782,782,782,781,782,781,781,781,782,782,,,,782,,782,782,782,782,782',
'782,782,,,,,,782,782,782,782,782,782,782,,,782,,,,,,,782,,,782,782,782',
'782,782,782,782,782,,782,782,782,,782,782,782,782,782,,,,,,,,,,,,,,',
',,,,,782,,,782,,,782,782,,,782,,,,,,782,,,,,,,,,782,,,,,782,782,782',
'782,,782,782,782,782,,,,,782,782,,,,783,783,783,782,783,782,782,782',
'783,783,,,,783,,783,783,783,783,783,783,783,,,,,,783,783,783,783,783',
'783,783,,,783,,,,,,,783,,,783,783,783,783,783,783,783,783,,783,783,783',
',783,783,783,783,783,,,,,,,,,,,,,,,,,,,,783,,,783,,,783,783,,,783,,',
',,,783,,,,,,,,,783,,,,,783,783,783,783,,783,783,783,783,,,,,783,783',
',,,785,785,785,783,785,783,783,783,785,785,,,,785,,785,785,785,785,785',
'785,785,,,,,,785,785,785,785,785,785,785,,,785,,,,,,,785,,,785,785,785',
'785,785,785,785,785,,785,785,785,,785,785,785,785,785,,,,,,,,,,,,,,',
',,,,,785,,,785,,,785,785,,,785,,,,,,785,,,,,,,,,785,,,,,785,785,785',
'785,,785,785,785,785,,,,,785,785,,,,838,838,838,785,838,785,785,785',
'838,838,,,,838,,838,838,838,838,838,838,838,,,,,,838,838,838,838,838',
'838,838,,,838,,,,,,,838,,,838,838,838,838,838,838,838,838,,838,838,838',
',838,838,838,838,838,,,,,,,,,,,,,,,,,,,,838,,,838,,,838,838,,,838,,',
',,,838,,,,,,,,,838,,,,,838,838,838,838,,838,838,838,838,,,,,838,838',
',,,843,843,843,838,843,838,838,838,843,843,,,,843,,843,843,843,843,843',
'843,843,,,,,,843,843,843,843,843,843,843,,,843,,,,,,,843,,,843,843,843',
'843,843,843,843,843,,843,843,843,,843,843,843,843,843,,,,,,,,,,,,,,',
',,,,,843,,,843,,,843,843,,,843,,843,,,,843,,,,,,,,,843,,,,,843,843,843',
'843,,843,843,843,843,,,,,843,843,,,,861,861,861,843,861,843,843,843',
'861,861,,,,861,,861,861,861,861,861,861,861,,,,,,861,861,861,861,861',
'861,861,,,861,,,,,,,861,,,861,861,861,861,861,861,861,861,861,861,861',
'861,,861,861,861,861,861,,,,,,,,,,,,,,,,,,,,861,,,861,,,861,861,,,861',
',,,861,,861,,,861,,,,,,861,,,,,861,861,861,861,,861,861,861,861,,,,',
'861,861,,,,862,862,862,861,862,861,861,861,862,862,,,,862,,862,862,862',
'862,862,862,862,,,,,,862,862,862,862,862,862,862,,,862,,,,,,,862,,,862',
'862,862,862,862,862,862,862,,862,862,862,,862,862,862,862,862,,,,,,',
',,,,,,,,,,,,,862,,,862,,,862,862,,,862,,,,,,862,,,,,,,,,862,,,,,862',
'862,862,862,,862,862,862,862,,,,,862,862,,,,876,876,876,862,876,862',
'862,862,876,876,,,,876,,876,876,876,876,876,876,876,,,,,,876,876,876',
'876,876,876,876,,,876,,,,,,,876,,,876,876,876,876,876,876,876,876,,876',
'876,876,,876,876,,,876,,,,,,,,,,,,,,,,,,,,876,,,876,,,876,876,,,876',
',,,,,,,,,,,,,,,,,,,876,876,876,876,,876,876,876,876,,,,,876,876,,,,885',
'885,885,876,885,876,876,876,885,885,,,,885,,885,885,885,885,885,885',
'885,,,,,,885,885,885,885,885,885,885,,,885,,,,,,,885,,,885,885,885,885',
'885,885,885,885,,885,885,885,,885,885,,,885,,,,,,,,,,,,,,,,,,,,885,',
',885,,,885,885,,,885,,,,,,,,,,,,,,,,,,,,885,885,885,885,,885,885,885',
'885,,,,,885,885,,,,934,934,934,885,934,885,885,885,934,934,,,,934,,934',
'934,934,934,934,934,934,,,,,,934,934,934,934,934,934,934,,,934,,,,,',
',934,,,934,934,934,934,934,934,934,934,,934,934,934,,934,934,,,934,',
',,,,,,,,,,,,,,,,,,934,,,934,,,934,934,,,934,,,,,,,,,,,,,,,,,,,,934,934',
'934,934,,934,934,934,934,,,,,934,934,,,,982,982,982,934,982,934,934',
'934,982,982,,,,982,,982,982,982,982,982,982,982,,,,,,982,982,982,982',
'982,982,982,,,982,,,,,,,982,,,982,982,982,982,982,982,982,982,982,982',
'982,982,,982,982,982,982,982,,,,,,,,,,,,,,,,,,,,982,,,982,,,982,982',
',,982,,982,,982,,982,,,982,,,,,,982,,,,,982,982,982,982,,982,982,982',
'982,,,,,982,982,,,,,,,982,,982,982,982,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8',
'8,8,8,8,8,8,8,8,8,,,,8,8,8,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,8,8,8,,8',
',,,,,,,8,8,,8,8,8,8,8,8,8,,,8,8,,,,8,8,8,8,,,,,,,,,,,,,,8,8,,8,8,8,8',
'8,8,8,8,8,8,8,8,,,8,8,,,,,,,,,,,,,,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9',
'9,9,9,9,9,9,9,9,,,,9,9,9,9,9,9,9,9,9,9,,,,,,9,9,9,9,9,9,9,9,9,,,9,,',
',,,,,9,9,,9,9,9,9,9,9,9,,,9,9,,,,9,9,9,9,,,,,,,,,,,,,,9,9,,9,9,9,9,9',
'9,9,9,9,9,9,9,,,9,9,,,,,,,,,,,,,,9,397,397,397,397,397,397,397,397,397',
'397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,,,,397,397',
'397,397,397,397,397,397,397,397,,,,,,397,397,397,397,397,397,397,397',
'397,,,397,,,,,,,,397,397,,397,397,397,397,397,397,397,,,397,397,,,,397',
'397,397,397,,,,,,,,,,,,,,397,397,,397,397,397,397,397,397,397,397,397',
'397,397,397,,,397,397,,,,,,,,,,,,,,397,621,621,621,621,621,621,621,621',
'621,621,621,621,621,621,621,621,621,621,621,621,621,621,621,621,,,,621',
'621,621,621,621,621,621,621,621,621,,,,,,621,621,621,621,621,621,621',
'621,621,,,621,,,,,,,,621,621,,621,621,621,621,621,621,621,,,621,621',
',,,621,621,621,621,,,,,,,,,,,,,,621,621,,621,621,621,621,621,621,621',
'621,621,621,621,621,,,621,621,,,,,,,,,,,,,,621,71,71,71,71,71,71,71',
'71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,,,,71,71,71,71,71',
'71,71,71,71,71,,,,,,71,71,71,71,71,71,71,71,71,71,71,71,,71,,,,,,71',
'71,,71,71,71,71,71,71,71,,,71,71,,,,71,71,71,71,,,,,,71,,,,,,,,71,71',
',71,71,71,71,71,71,71,71,71,71,71,71,,,71,743,743,743,743,743,743,743',
'743,743,743,743,743,743,743,743,743,743,743,743,743,743,743,743,743',
',,,743,743,743,743,743,743,743,743,743,743,,,,,,743,743,743,743,743',
'743,743,743,743,,,743,,,,,,,,743,743,,743,743,743,743,743,743,743,,',
'743,743,,,,743,743,743,743,,,,,,,,,,,,,,743,743,,743,743,743,743,743',
'743,743,743,743,743,743,743,213,213,743,,213,,,,,,,,213,213,,213,213',
'213,213,213,213,213,,,213,213,,,,213,213,213,213,,,,,,213,,,,,,,,213',
'213,,213,213,213,213,213,213,213,213,213,213,213,213,214,214,213,,214',
',,,,,,,214,214,,214,214,214,214,214,214,214,,,214,214,,,,214,214,214',
'214,,,,,,214,,,,,,,,214,214,,214,214,214,214,214,214,214,214,214,214',
'214,214,261,261,214,,261,,,,,,,,261,261,,261,261,261,261,261,261,261',
',,261,261,,,,261,261,261,261,,,,,,,,,,,,,,261,261,,261,261,261,261,261',
'261,261,261,261,261,261,261,447,447,261,,447,,,,,,,,447,447,,447,447',
'447,447,447,447,447,,,447,447,,,,447,447,447,447,,,,,,447,,,,,,,,447',
'447,,447,447,447,447,447,447,447,447,447,447,447,447,448,448,447,,448',
',,,,,,,448,448,,448,448,448,448,448,448,448,,,448,448,,,,448,448,448',
'448,,,,,,448,,,,,,,,448,448,,448,448,448,448,448,448,448,448,448,448',
'448,448,514,514,448,,514,,,,,,,,514,514,,514,514,514,514,514,514,514',
',,514,514,,,,514,514,514,514,,,,,,514,,,,,,,,514,514,,514,514,514,514',
'514,514,514,514,514,514,514,514,515,515,514,,515,,,,,,,,515,515,,515',
'515,515,515,515,515,515,,,515,515,,,,515,515,515,515,,,,,,515,,,,,,',
',515,515,,515,515,515,515,515,515,515,515,515,515,515,515,524,524,515',
',524,,,,,,,,524,524,,524,524,524,524,524,524,524,,,524,524,,,,524,524',
'524,524,,,,,,524,,,,,,,,524,524,,524,524,524,524,524,524,524,524,524',
'524,524,524,525,525,524,,525,,,,,,,,525,525,,525,525,525,525,525,525',
'525,,,525,525,,,,525,525,525,525,,,,,,525,,,,,,,,525,525,,525,525,525',
'525,525,525,525,525,525,525,525,525,583,583,525,,583,,,,,,,,583,583',
',583,583,583,583,583,583,583,,,583,583,,,,583,583,583,583,,,,,,583,',
',,,,,,583,583,,583,583,583,583,583,583,583,583,583,583,583,583,584,584',
'583,,584,,,,,,,,584,584,,584,584,584,584,584,584,584,,,584,584,,,,584',
'584,584,584,,,,,,584,,,,,,,,584,584,,584,584,584,584,584,584,584,584',
'584,584,584,584,590,590,584,,590,,,,,,,,590,590,,590,590,590,590,590',
'590,590,,,590,590,,,,590,590,590,590,,,,,,590,,,,,,,,590,590,,590,590',
'590,590,590,590,590,590,590,590,590,590,591,591,590,,591,,,,,,,,591',
'591,,591,591,591,591,591,591,591,,,591,591,,,,591,591,591,591,,,,,,591',
',,,,,,,591,591,,591,591,591,591,591,591,591,591,591,591,591,591,627',
'627,591,,627,,,,,,,,627,627,,627,627,627,627,627,627,627,,,627,627,',
',,627,627,627,627,,,,,,627,,,,,,,,627,627,,627,627,627,627,627,627,627',
'627,627,627,627,627,628,628,627,,628,,,,,,,,628,628,,628,628,628,628',
'628,628,628,,,628,628,,,,628,628,628,628,,,,,,628,,,,,,,,628,628,,628',
'628,628,628,628,628,628,628,628,628,628,628,979,979,628,,979,,,,,,,',
'979,979,,979,979,979,979,979,979,979,,,979,979,,,,979,979,979,979,,',
',,,979,,,,,,,,979,979,,979,979,979,979,979,979,979,979,979,979,979,979',
'983,983,979,,983,,,,,,,,983,983,,983,983,983,983,983,983,983,,,983,983',
',,,983,983,983,983,,,,,,983,,,,,,,,983,983,,983,983,983,983,983,983',
'983,983,983,983,983,983,984,984,983,,984,,,,,,,,984,984,,984,984,984',
'984,984,984,984,,,984,984,,,,984,984,984,984,,,,,,984,,,,,,,,984,984',
',984,984,984,984,984,984,984,984,984,984,984,984,,338,984,338,338,338',
'338,338,,541,,541,541,541,541,541,338,,,,,,,,541,,699,,699,699,699,699',
'699,,,,,,338,338,,699,,,,,541,338,338,338,338,,,,338,541,541,541,541',
',,,541,699,,701,,701,701,701,701,701,699,699,699,699,,,,699,701,,741',
',741,741,741,741,741,,742,,742,742,742,742,742,741,,,,,701,,,742,,,',
',,701,701,701,701,,,,701,741,,,,,,,,742,741,741,741,741,,,,741,742,742',
'742,742,,,892,742,892,892,892,892,892,,926,,926,926,926,926,926,892',
',,,,,,,926,,928,,928,928,928,928,928,,,,,,892,,,928,,,,,926,892,892',
'892,892,,,,892,926,926,926,926,,,,926,928,,930,,930,930,930,930,930',
'928,928,928,928,,,,928,930,,990,,990,990,990,990,990,,1001,,1001,1001',
'1001,1001,1001,990,,,,,930,,,1001,,,,,,,,930,930,,,,930,990,,,,,,,,1001',
',,990,990,,,,990,1001,1001,1001,1001,,,1003,1001,1003,1003,1003,1003',
'1003,1005,,1005,1005,1005,1005,1005,1007,1003,1007,1007,1007,1007,1007',
'1030,1005,1030,1030,1030,1030,1030,,1007,,,,,,,1030,1003,,,,,,,1005',
',,,1003,1003,,1007,,1003,,1005,1005,,1030,,1005,,1007,1007,,,,1007,',
'1030,1030,,,,1030' ]
        racc_action_check = arr = ::Array.new(25362, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  1853,    10,   nil,    81,   nil,  5912,   909,   -79, 23169, 23297,
   -59,   nil,   -86,   -80,   346,   107,   574,   -81,   nil,   -71,
  6043,  1711,   176,   nil,   -62,   nil,    -8,   958,  1068,  6174,
  6305,  6436,   nil,  1993,  6567,  6698,   nil,   101,   282,   352,
   193,   332,  6837,  6968,  7099,   137,   576,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1178,   nil,  7238,  7369,
  7500,     4,   nil,  7631,  7762,   nil,   nil,  7893,  8032,  8163,
  8294, 23681,   nil,   nil,   nil,   nil,   nil,   141,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     0,   nil,   nil,   112,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   276,
   nil,  8433,   nil,   nil,   nil,   nil,  8572,  8703,  8834,  8965,
  9104,  2133,   nil,   303,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   169,   nil,  2273,  9235,  9366,  9497,
  9628,  9759,  9890, 23855, 23916,   nil,   nil, 10021, 10152, 10283,
   nil,   nil,   682,   -54,   138,   262,   166,   176,   235,   nil,
 10414,  2413,   250, 10545, 10676, 10807, 10938, 11069, 11200, 11331,
 11462, 11593, 11724, 11855, 11986, 12117, 12248, 12379, 12510, 12641,
 12772, 12903, 13034, 13165, 13296, 13427, 13558, 13689, 13820,   nil,
   nil, 23977,   nil,   nil,   249, 13951, 14082,   nil,   nil,   nil,
   nil,   nil,   nil,   nil, 14213,   nil,  2133,   nil,   221,   251,
   nil, 14344,   308, 14475,   nil,   nil, 14606, 14737,   nil,   nil,
   216,   nil, 14876,  1396,   287,   271,  2553,   300,   368,   337,
 15007,  2693,   686,   718,   771,   426,   794,   nil,   394,   366,
    33,   nil,   nil,   nil,   421,   360,   387, 15146,   nil,   472,
   460,   834,   nil,   462,   nil, 15277,  2833,  1561,   400,   nil,
   -69,   368,   453,   452,   421,   501,   nil,   nil, 24954,   620,
    -1,    11, 15408, 15539,   228,   579,   467,   -18,    11,   837,
   555,    25,   595,   nil,   nil,   342,   434,   -21,   nil,   870,
   nil,   522, 15670,   nil,   nil,   nil,   194,   230,   379,   413,
   486,   510,   523,   577,   578,   nil,   582,   nil, 15801,   nil,
   272,   456,   459,   465,   497,   -41,   -35,   501,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   529, 23425,   nil,   nil,
   nil,   nil,   535,   nil,   nil,   517, 15932,   531,   nil,   nil,
   525,   nil,   930,   197,   641,   nil,   nil,  1853,   nil,   nil,
   nil,   nil,   nil,  1993,   559,   nil,   560,   563,   481,   506,
  1314,   nil,   nil,   nil,   222,   334,   610,   nil,   nil,  1446,
  1582,   nil,   nil,   nil,   -35,   nil,   611, 24038, 24099, 16063,
   217, 16194, 16325, 16456,  2833,  2973,   642,   772,   637,   639,
   663,   667,  1667,  4513,   666,  3113,  1397,  1531,  3253,  3393,
  3533,  3673,  3813,  3953,  4093,   915,  1240,  4233,  4373,  2273,
   nil,  1718,   nil,   nil,   nil,   nil,   608,   nil,   nil,   nil,
   613,   nil,   nil, 16587,   nil, 16718,   nil, 16849,   nil,   363,
   nil,   nil,   nil, 16988,  1604,  2973,   622,   625,   nil,   nil,
   629, 17127,   635, 17258, 24160, 24221,  1006,   678,   nil, 17389,
   643,   nil, 17520, 17651, 24282, 24343,  2413, 17782,   770,   769,
   669,   713,   nil, 17913,   nil,   nil, 18044,   nil,   nil,   nil,
   nil, 24962,   nil,   672,   675,   nil,   676,   680,   682,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   675,  1278,   nil,
   nil, 18175,   nil,   nil,   nil,   779,   nil,   nil,   nil,   780,
   nil,   nil,   781,  3113,   825,   nil,  3253,    62,   147,   827,
   841, 18306, 18437, 24404, 24465,    27,   nil,   nil,  1038,   nil,
 24526, 24587, 18568,   nil,   nil,   250,  3393,   763,   nil,   -33,
   nil,   nil,   nil,   832,   nil,   nil,   nil,   734,   nil,   nil,
   388,   nil,   390,   nil,   nil,   720,   nil,   724,   nil,   nil,
   nil, 23553,   nil,   728, 18699, 18830, 18961, 24648, 24709, 19100,
 19231,   552,   778, 19362, 19493, 19624, 19755,   777,   nil,   nil,
 19886, 20017,   780,   nil,   nil,   nil,   301,   343,   466,   604,
   747,   749,   873,   nil,   856,     6,   nil,   nil,   775,   -54,
   897,   nil,   774,   nil,   828, 20148,   nil,   nil, 20279,   nil,
   804,   -83, 20410,   787,   nil,   792,   123,   180,   834,   248,
  1040,   836,   808, 20541,   nil,   894,   214,   948, 20672,   nil,
   nil,   nil,   503,    37,   834,   780,   nil,   nil,   626, 24979,
   nil, 25018,   nil,  1377,   nil, 20803,   nil,  1314,   nil,   840,
   335,   845,   nil,   nil,   nil,   nil,   747,   nil,   964,   nil,
   nil,   nil,   nil,   971,   nil,    26,   852,    68,    93,   151,
   185, 20934,   717,  1146,   nil,   860,  3533, 21065,   nil,   982,
  3673, 25035, 25043, 23794,   nil,   nil,   nil,   nil,   nil,   nil,
  3813,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   859, 21196,
   866,   374,   443,   714,   826,   nil,  2553, 21327,   nil,   870,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
 21458, 21589, 21720, 21851,   520, 21982,   nil,   -53,   nil,   nil,
   896,   nil,   nil,   889,   nil,  3953,   nil,   nil,   nil,   nil,
   nil,   877,   236,   nil,   nil,  1003,   nil,  4093,   882,   929,
   nil,   nil,   nil,   nil,   nil,   nil,   887,   948,   910,   nil,
   nil,   nil,   911,   913,   nil,   916,   917,   nil,   920,   nil,
   nil,   925,  1413,   924,   951,   nil,  1050,   nil, 22113,  1053,
  4233,  4373,   nil, 22244,  4513,   152,   181,   nil,  1064,   298,
  4653,   nil,  1065,   948,   327,   nil,   952,   953,   549,   nil,
   nil, 22375, 22506,  2693,  4793,   nil,   954,   959,   nil,   963,
   964,   965,   nil,   992,   972,   960, 22637,   nil,   nil,   nil,
   nil,  4933,   nil,   nil,    32, 22768,   nil,  5073,  5213,  1242,
   nil,   nil, 25095,   nil,  6745,   nil,  8341,   nil, 15054,   nil,
   nil,   nil,   nil,   398,  1307,   973,   nil,    33,   nil,  1103,
  1104,   nil,    85,   nil,   nil,   nil,  1105,   nil,   nil,   nil,
  1027,   nil,   nil,  1203,   nil,   nil, 25103,   nil, 25120,   nil,
 25159,   nil,   nil,  1009, 22899,  1116,  1064,   nil,  5353,    34,
    35,  1148,  1065,    36,   nil,  1008,  1114,   504,   nil,   nil,
   nil,   992,   993,   994,   995,   997,  1439,   999,  1511,  5493,
   nil,   nil,   nil,   nil,   nil,  5633,   nil,  5773,  1016,   nil,
   nil,  1020,  1021,  1023,  1026,   nil,  1027,   nil,  1150, 24770,
   nil,  1156, 23030, 24831, 24892,    42,   nil,   nil,   nil,  1319,
 25176,   nil,   nil,   nil,   nil,  1647,  1032,   760,  1158,  1160,
   nil, 25184,   nil, 25236,   nil, 25243,   nil, 25250,   nil,   nil,
  1083,  1094,   nil,  1054,    98,   102,   111,   138,   nil,  1055,
  1056,   nil,   nil,   nil,  1063,  1064,  1069,  1074,   145,   nil,
 25257,   nil,   nil,   nil,   nil,  1075,   nil ]

racc_action_default = [
    -3,  -604,    -1,  -590,    -4,  -604,    -7,  -604,  -604,  -604,
  -604,   -29,  -604,  -604,   -33,  -604,  -604,  -281,   -45,  -592,
  -604,   -50,   -52,   -53,   -54,   -58,  -258,  -258,  -258,  -294,
  -329,  -330,   -70,   -11,   -74,   -82,   -84,  -604,  -494,  -495,
  -604,  -604,  -604,  -604,  -604,  -592,  -237,  -272,  -273,  -274,
  -275,  -276,  -277,  -278,  -279,  -280,  -578,  -283,  -287,  -603,
  -568,  -302,  -390,  -604,  -604,  -307,  -310,  -590,  -604,  -604,
  -604,  -604,  -331,  -332,  -435,  -436,  -437,  -438,  -439,  -460,
  -442,  -443,  -462,  -464,  -447,  -452,  -456,  -458,  -474,  -462,
  -476,  -478,  -479,  -480,  -481,  -576,  -483,  -484,  -577,  -486,
  -487,  -488,  -489,  -490,  -491,  -492,  -493,  -498,  -499,  -604,
    -2,  -591,  -599,  -600,  -601,    -6,  -604,  -604,  -604,  -604,
  -604,    -3,   -17,  -604,  -113,  -114,  -115,  -116,  -117,  -118,
  -119,  -120,  -121,  -125,  -126,  -127,  -128,  -129,  -130,  -131,
  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,  -140,  -141,
  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -149,  -150,  -151,
  -152,  -153,  -154,  -155,  -156,  -157,  -158,  -159,  -160,  -161,
  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,  -170,  -171,
  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,  -180,  -181,
  -182,  -183,  -184,  -185,  -186,  -187,  -188,  -189,  -190,  -191,
  -192,  -193,  -194,  -195,   -22,  -122,   -11,  -604,  -604,  -604,
  -604,  -604,  -248,  -604,  -604,  -588,  -589,  -604,  -604,  -592,
  -593,   -49,  -604,  -494,  -495,  -604,  -281,  -604,  -604,  -229,
  -604,   -11,  -604,  -604,  -604,  -604,  -604,  -604,  -604,  -604,
  -604,  -604,  -604,  -604,  -604,  -604,  -604,  -604,  -604,  -604,
  -604,  -604,  -604,  -604,  -604,  -604,  -604,  -604,  -604,  -399,
  -401,  -604,  -586,  -587,   -59,  -248,  -604,  -301,  -405,  -414,
  -416,   -65,  -411,   -66,  -592,   -67,  -238,  -253,  -262,  -262,
  -257,  -604,  -263,  -604,  -460,  -570,  -604,  -604,   -68,   -69,
  -590,   -12,  -604,   -15,  -604,   -72,   -11,  -592,  -604,   -75,
   -78,   -11,   -90,   -91,  -604,  -604,   -98,  -294,  -297,  -592,
  -604,  -329,  -330,  -333,  -412,  -604,   -80,  -604,   -86,  -291,
  -477,  -604,  -214,  -215,  -230,  -604,   -11,  -285,  -592,  -239,
  -596,  -596,  -604,  -604,  -596,  -604,  -303,  -304,  -526,   -51,
  -604,  -604,  -604,  -604,  -590,  -604,  -591,  -494,  -495,  -604,
  -604,  -281,  -604,  -343,  -344,  -108,  -109,  -604,  -111,  -604,
  -281,  -502,  -604,  -494,  -495,  -322,  -113,  -114,  -155,  -156,
  -157,  -173,  -178,  -185,  -188,  -324,  -604,  -566,  -604,  -440,
  -604,  -604,  -604,  -604,  -604,  -604,  -604,  -604,  1037,    -5,
  -602,   -23,   -24,   -25,   -26,   -27,  -604,  -604,   -19,   -20,
   -21,  -123,  -604,   -30,   -32,  -268,  -604,  -604,  -267,   -31,
  -604,   -34,  -604,  -281,   -42,   -44,  -196,  -243,  -263,   -46,
   -47,   -35,  -197,  -243,  -592,  -249,  -262,  -262,  -579,  -580,
  -258,  -409,  -581,  -582,  -580,  -579,  -258,  -408,  -410,  -581,
  -582,   -41,  -204,   -48,  -592,  -300,  -604,  -604,  -604,  -248,
  -291,  -604,  -604,  -604,  -205,  -206,  -207,  -208,  -209,  -210,
  -211,  -212,  -216,  -217,  -218,  -219,  -220,  -221,  -222,  -223,
  -224,  -225,  -226,  -227,  -228,  -231,  -232,  -233,  -234,  -592,
  -420,  -258,  -579,  -580,   -56,   -60,  -592,  -259,  -418,  -420,
  -592,  -296,  -254,  -604,  -255,  -604,  -260,  -604,  -264,  -604,
  -573,  -575,   -10,  -591,   -14,    -3,  -592,   -71,  -289,   -87,
   -76,  -604,  -592,  -248,  -604,  -604,   -97,  -604,  -477,  -604,
   -83,   -88,  -604,  -604,  -604,  -604,  -235,  -604,  -427,  -604,
  -592,  -604,  -240,  -598,  -597,  -242,  -598,  -292,  -293,  -569,
  -391,  -526,  -394,  -565,  -565,  -509,  -511,  -511,  -511,  -525,
  -527,  -528,  -529,  -530,  -531,  -532,  -533,  -534,  -604,  -536,
  -538,  -540,  -545,  -547,  -548,  -550,  -555,  -557,  -558,  -560,
  -561,  -562,  -604,   -11,  -334,  -335,   -11,  -604,  -604,  -604,
  -604,  -604,  -248,  -604,  -604,  -291,  -315,  -108,  -109,  -110,
  -604,  -604,  -248,  -318,  -500,  -604,   -11,  -504,  -326,  -592,
  -441,  -461,  -466,  -604,  -468,  -444,  -463,  -604,  -465,  -446,
  -604,  -449,  -604,  -451,  -454,  -604,  -455,  -604,  -475,    -8,
   -18,  -604,   -28,  -271,  -604,  -604,  -248,  -604,  -604,  -604,
  -604,  -413,  -604,  -250,  -252,  -604,  -604,   -61,  -247,  -406,
  -604,  -604,   -63,  -407,  -299,  -594,  -579,  -580,  -579,  -580,
  -592,  -604,  -604,  -421,   -55,  -402,  -418,  -245,  -604,  -379,
  -604,  -295,  -262,  -261,  -265,  -604,  -571,  -572,  -604,   -13,
  -604,   -73,  -604,   -79,   -85,  -592,  -579,  -580,  -246,  -583,
   -96,  -604,   -81,  -604,  -203,  -213,  -592,  -603,  -603,  -284,
  -286,  -288,  -596,  -604,  -592,  -604,  -507,  -508,  -604,  -604,
  -518,  -604,  -521,  -604,  -523,  -604,  -345,  -604,  -347,  -349,
  -356,  -592,  -539,  -549,  -559,  -563,  -603,  -336,  -603,  -308,
  -337,  -338,  -311,  -604,  -314,  -604,  -592,  -579,  -580,  -583,
  -290,  -604,  -108,  -109,  -112,  -592,   -11,  -604,  -320,  -604,
   -11,  -526,  -526,  -604,  -567,  -467,  -470,  -471,  -472,  -473,
   -11,  -445,  -448,  -450,  -453,  -457,  -459,  -124,  -269,  -604,
  -592,  -579,  -580,  -580,  -579,   -43,  -244,  -604,  -595,  -262,
   -37,  -199,   -38,  -200,   -62,   -39,  -202,   -40,  -201,   -64,
  -604,  -604,  -604,  -604,  -413,  -604,  -400,  -379,  -404,  -403,
  -604,  -415,  -380,  -592,  -382,   -11,  -417,  -256,  -266,  -574,
   -16,   -77,  -413,   -89,  -298,  -603,  -341,   -11,  -428,  -603,
  -429,  -430,  -241,  -392,  -395,  -397,  -384,  -604,  -565,  -546,
  -564,  -510,  -511,  -511,  -537,  -511,  -511,  -556,  -511,  -534,
  -551,  -592,  -604,  -354,  -604,  -535,  -604,  -339,  -604,  -604,
   -11,   -11,  -313,  -604,   -11,  -413,  -604,  -413,  -604,  -604,
   -11,  -323,  -604,  -592,  -604,  -327,  -604,  -270,  -413,   -36,
  -198,  -251,  -604,  -236,   -11,   -57,  -565,  -565,  -361,  -363,
  -363,  -363,  -378,  -604,  -592,  -534,  -542,  -543,  -553,  -419,
    -9,   -11,  -434,  -342,  -604,  -604,  -432,   -11,   -11,  -604,
  -393,  -506,  -604,  -514,  -604,  -516,  -604,  -519,  -604,  -522,
  -524,  -346,  -348,  -352,  -604,  -357,  -305,  -604,  -306,  -604,
  -604,  -265,  -603,  -316,  -319,  -501,  -604,  -325,  -503,  -505,
  -504,  -469,  -422,  -604,  -359,  -360,  -369,  -371,  -604,  -374,
  -604,  -376,  -381,  -604,  -604,  -541,  -604,  -433,   -11,  -494,
  -495,  -604,  -604,  -281,  -431,  -604,  -604,  -592,  -386,  -388,
  -389,  -511,  -511,  -511,  -511,  -350,  -604,  -355,  -604,   -11,
  -309,  -312,  -423,  -424,  -425,   -11,  -321,   -11,  -565,  -544,
  -362,  -363,  -363,  -363,  -363,  -554,  -363,  -383,  -552,  -604,
  -291,  -427,  -248,  -604,  -604,  -291,  -396,  -398,  -385,  -604,
  -604,  -512,  -515,  -517,  -520,  -604,  -353,  -603,  -604,  -604,
  -358,  -604,  -366,  -604,  -368,  -604,  -372,  -604,  -375,  -377,
  -290,  -583,  -426,  -592,  -579,  -580,  -583,  -290,  -387,  -511,
  -351,  -340,  -317,  -328,  -363,  -363,  -363,  -363,  -413,  -513,
  -604,  -364,  -367,  -370,  -373,  -363,  -365 ]

clist = [
'218,260,277,277,277,375,424,2,213,494,127,127,299,329,122,205,262,687',
'16,298,430,436,580,16,130,130,325,336,132,132,408,409,261,529,663,6',
'663,542,222,740,6,549,114,111,278,278,278,222,222,222,316,16,304,304',
'268,272,380,340,341,486,666,344,313,313,485,532,535,110,481,539,836',
'573,576,127,330,557,16,824,264,271,273,222,222,696,697,222,349,359,359',
'279,279,279,320,327,719,722,313,313,313,520,589,666,295,275,288,289',
'114,827,817,658,391,392,393,394,297,711,902,870,805,331,334,631,975',
'795,905,115,361,365,396,16,1,345,948,950,222,222,222,222,16,16,381,652',
'606,608,611,611,6,387,606,839,660,610,612,880,669,395,6,494,204,354',
'404,397,221,656,621,332,655,377,333,337,352,593,376,326,663,663,530',
'328,342,840,343,841,731,965,736,277,850,596,597,743,920,872,402,874',
'957,975,947,540,813,666,338,693,887,888,480,488,489,873,787,962,809',
'884,379,382,447,383,440,298,384,385,386,745,407,407,16,222,412,222,222',
'412,222,389,1018,950,750,412,222,222,277,277,694,431,902,650,549,737',
'996,277,822,16,971,864,819,969,430,436,723,,823,421,825,499,706,,831',
'441,,,,339,339,,,339,,,824,790,557,,,278,298,222,222,1020,,298,933,278',
'517,,222,673,,521,514,,827,,,682,,739,824,,,675,,531,16,,,524,16,510',
',,304,16,,678,339,339,339,339,279,504,313,114,503,678,,734,279,304,577',
'578,268,,487,583,272,963,16,313,,784,490,403,414,1021,871,414,502,,',
',891,414,222,222,967,913,,295,518,,262,,295,753,802,753,,,726,506,,',
'222,,512,114,598,824,735,,,,678,,797,,,13,222,,678,127,13,,663,620,627',
'632,924,925,579,,,706,,130,833,419,420,132,,,760,,277,845,443,444,666',
'812,13,,,,847,,430,436,557,774,557,,853,854,779,848,549,549,,852,,,440',
'951,,13,801,,844,858,638,415,651,26,415,353,643,,26,222,415,,1012,,',
',,431,,,557,557,,26,637,,,972,277,973,642,521,26,26,26,,26,,,521,,797',
',,,,,,13,,1000,638,,810,670,,,13,13,440,,26,,16,,16,26,26,,440,26,304',
'875,222,,654,,445,706,304,706,313,6,,431,,,222,,313,339,339,,,431,662',
',277,,916,,716,1024,,718,,,277,,,595,,,,26,,,,,26,26,26,26,26,26,,599',
',440,,,964,491,16,440,692,16,,725,,,277,222,13,,410,,,410,955,706,,222',
'431,410,507,16,938,720,720,,431,,789,,127,,,13,757,,557,440,632,,788',
'738,,,130,959,,,132,811,412,222,,,16,,,521,,,412,412,431,632,,412,412',
'706,803,706,875,765,875,,26,26,26,26,26,26,26,999,816,,855,26,26,26',
',,770,772,,,13,775,777,304,13,26,769,,,13,,,706,313,304,,407,,,638,632',
',643,1028,313,,335,,,632,,,,,13,,,,846,26,26,,,,849,,686,,26,856,,875',
',,632,,,,127,,,,222,,,,26,16,222,,26,16,882,644,,26,886,,,,414,16,,',
',,818,816,,1013,414,414,,,879,414,414,,412,,26,,,678,,,883,,,,,700,702',
'704,,657,26,26,,661,,422,,,15,,16,442,859,15,,,,,,671,26,,16,909,910',
'674,,912,,907,,,,,,,26,,,,,15,,690,,,,922,,,,,816,222,,16,16,405,418',
'16,,,,,937,16,15,,867,,945,946,,415,,,,,,16,,,720,415,415,915,,,415',
'415,919,935,,,,13,16,13,,,941,313,16,16,,,414,26,,,313,,744,,,,,,,15',
',981,,,,988,,,15,15,983,496,,498,339,,500,501,,,339,,997,,,,,,998,978',
',,277,16,,876,,,,313,,26,,26,,13,,,13,,,26,,,16,,,,440,,16,,16,440,',
'26,,,13,,,632,,,,,,222,968,804,,867,,867,,867,,,431,,,,,,15,415,15,410',
',15,,13,,,835,15,,410,410,,,26,410,410,26,,,,,15,26,339,,,,442,,422',
',,26,,,,26,,623,820,,,820,,,,,,,,,,,893,895,,897,899,867,900,867,,867',
',867,26,26,876,,26,876,,876,,876,26,26,,,,26,26,15,,,,15,867,,,,15,',
',,,,,684,,,,,,,,,,,,13,,,,13,,15,,,,,,,,13,664,901,335,,667,,,,,,,,868',
',,,410,,,,876,,876,918,876,,876,,826,,828,,,,,,,17,,,664,,17,335,13',
',26,,,876,,26,26,,,26,13,991,992,993,994,,,,,26,,,712,,17,306,306,,',
',,,,,,,26,,,,771,773,418,13,13,776,778,13,,17,,,,13,,,,,,351,360,360',
',,26,,,13,,,,,,,869,,26,,,1029,,,,,13,758,,,944,,13,13,,,664,335,820',
',,868,,868,17,868,,,,26,,26,26,17,17,26,,,,,,26,,,15,,15,,798,,,799',
',,,26,,,,,,,,13,,,,,,,,808,26,,,,,,26,26,,,,,13,,,,830,,13,,13,,860',
'952,868,953,868,954,868,,868,,,,,771,773,778,776,,,,15,,,15,,17,,413',
',,413,868,,,,26,413,974,,976,,,,15,927,929,931,,857,,17,,,,,,26,,,,',
',26,,26,,,,,,,,15,,,,15,,,26,,,15,15,,,,15,15,,,,,,,860,,,,1019,,,,',
',,,,,,1025,17,1026,,1027,17,,,,306,17,,,,,,,,,,,,911,,,38,306,,,1035',
'38,,,,,17,1002,1004,1006,1008,335,1009,,,,,,,,,,,,,,,,,38,302,302,,',
',,,,,,,,,,15,,,,15,,,,,,38,,,,15,,1031,1032,1033,1034,347,363,363,363',
',,,1036,,,,15,,,,,,,,,,,,,,,,,,,,,,,,,,,,15,,,,38,,,,,,,,15,38,38,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,15,15,,,15,,,,,,15,,,,,,,,,,,,,,15,,,,,',
',,,,,17,,17,,,,15,,306,,,,15,15,,,306,,,38,,,,,,,,,,,,,,,,,,,,,,,,,38',
',,,,,,,,,,,,,,,,,,15,,,,,,,17,,,17,,,,,,,,,,,15,,,,,,15,,15,17,,,,,',
',749,,,,,38,,,,38,,,,302,38,,,,,39,,,413,,39,,17,,,,302,,413,413,,,',
'413,413,38,,,,,,,,,,,,,39,303,303,,,,,,,,,,,,,,,306,,,,,,,,39,,,306',
',,,,,,348,364,364,364,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,39,,,17',
',,,17,,39,39,,,,,,,17,,,,,,,,,,,,,,,,,413,,,,,,,,,,,,,,,,,,,,,,,,,,',
',17,,,,,,,,,,,,17,,,,,,,,,,,,38,,38,,,,,,302,39,,,,,,,302,,,,,17,17',
',,17,,,,,,17,,,39,,,,,,,,,,,17,,,,,,,,,,,,360,,,,,17,,,,943,,17,17,38',
',,38,,,,,,,,,,,,,,,,,,,,38,,39,,,,39,,,,303,39,,,,,,,,,,,360,,,,17,303',
',,,,,38,,,39,,,,,,,,,,,17,,,,,,17,,17,,,,,,,,,,,,,,,,,,,,,302,,,,,,',
',,,,302,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,38',
',,,,,,,,,38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,229,,,,,,,,,276,276,276,',
'38,,,,,,,,,322,323,324,38,,39,,39,,,,,,303,,,,276,276,,,303,,,,,,,,',
',,,,,,38,38,,,38,,,,,,38,,,,,,,,,,,,,,38,,,,,,,,,,,,363,,,39,,38,39',
',,939,,38,38,,,,,,,,,,,,,,39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,363,39,',
',38,,,,,,,,,,,,,,,,,,,,,38,,,,,,38,,38,,276,417,,,423,276,,,,303,423',
',,,,,,,,,303,,,229,,,454,455,456,457,458,459,460,461,462,463,464,465',
'466,467,468,469,470,471,472,473,474,475,476,477,478,479,,,,,,,276,276',
',,,,,,,276,,,,,,39,276,,276,39,,276,276,,,,,,,39,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,526,,,,,,,,,,,,,,39,,,,,,,,,,,,39,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,39,39,,,39,,,,,,39,,,,,,,,,,,,276,,39,,,,,,,,,,,,364,,,,,39',
',,,940,,39,39,,,,,,,,,,,,,,,,,276,,423,423,423,,,,,,,,,,,,,,,,,,,,,',
',,,364,,,,39,,,,,,,,,,,276,,276,,276,,,,,,39,,,,,,39,,39,,276,,,,,,',
',,423,685,,,,,,,,,,276,,,276,,,,,,,,,,,,,,,,,,,,,,,,,276,,,,,,,,,,,',
',,,,,,,,276,276,,,,,,,,,,276,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276,423',
'276,,,,766,,,276,276,423,423,,,,423,423,,,,,,,,,,,,,,,,,,,,,,,,276,',
',276,,,,,,,,,,,,,,,,,,,,276,,,,,,,,,,,,,,,,,276,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276,,,,,,,,423,,,,,,,,,,,,,423,423',
'423,423,,863,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,276,,,,,,,,,,,,,,,,,,276,423,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,276' ]
        racc_goto_table = arr = ::Array.new(3244, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'33,141,35,35,35,58,29,2,31,76,59,59,51,70,15,15,31,10,28,9,39,39,95',
'28,62,62,33,89,63,63,22,22,38,8,77,7,77,140,28,99,7,170,98,6,71,71,71',
'28,28,28,52,28,28,28,74,74,158,17,17,29,185,17,67,67,41,72,72,4,39,72',
'93,92,92,59,71,175,28,176,40,40,40,28,28,123,123,28,28,28,28,73,73,73',
'66,7,94,94,67,67,67,53,56,185,47,46,46,46,98,181,132,42,17,17,17,17',
'48,118,116,128,11,73,73,30,182,130,119,5,57,57,2,28,1,4,134,135,28,28',
'28,28,28,28,159,144,163,163,163,163,7,159,163,11,144,162,162,12,14,7',
'7,76,16,19,23,25,20,44,64,69,75,87,88,91,96,97,100,101,77,77,102,103',
'104,105,106,107,108,109,110,35,111,112,113,114,115,120,9,126,119,182',
'133,136,137,185,138,139,142,143,145,147,148,132,151,152,153,154,157',
'160,31,161,59,9,164,165,166,167,71,71,28,28,28,28,28,28,28,5,134,135',
'168,28,28,28,35,35,140,74,116,29,170,169,119,35,174,28,128,130,178,179',
'39,39,95,,129,26,129,158,117,,118,26,,,,24,24,,,24,,,176,42,175,,,71',
'9,28,28,119,,9,132,71,33,,28,53,,51,31,,181,,,53,,8,176,,,29,,33,28',
',,31,28,52,,,28,28,,39,24,24,24,24,73,7,67,98,6,39,,56,73,28,17,17,74',
',46,31,74,11,28,67,,30,46,20,20,93,129,20,4,,,,123,20,28,28,99,94,,47',
'66,,31,,47,163,30,163,,,29,48,,,28,,48,98,38,176,29,,,,39,,76,,,21,28',
',39,59,21,,77,15,31,33,123,123,4,,,117,,62,117,24,24,63,,,29,,35,30',
'24,24,185,72,21,,,,30,,39,39,175,41,175,,140,140,41,8,170,170,,8,,,59',
'129,,21,53,,92,30,74,18,33,43,18,21,74,,43,28,18,,10,,,,,74,,,175,175',
',43,40,,,129,35,129,40,51,43,43,43,,43,,,51,,76,,,,,,,21,,123,74,,22',
'2,,,21,21,59,,43,,28,,28,43,43,,59,43,28,175,28,,40,,49,117,28,117,67',
'7,,74,,,28,,67,24,24,,,74,73,,35,,8,,9,129,,9,,,35,,,24,,,,43,,,,,43',
'43,43,43,43,43,,24,,59,,,95,49,28,59,73,28,,71,,,35,28,21,,21,,,21,117',
'117,,28,74,21,49,28,92,98,98,,74,,89,,59,,,21,15,,175,59,33,,141,98',
',,62,92,,,63,70,28,28,,,28,,,51,,,28,28,74,33,,28,28,117,51,117,175',
'7,175,,43,43,43,43,43,43,43,8,33,,58,43,43,43,,,26,26,,,21,26,26,28',
'21,43,73,,,21,,,117,67,28,,71,,,74,33,,74,30,67,,68,,,33,,,,,21,,,,17',
'43,43,,,,17,,24,,43,9,,175,,,33,,,,59,,,,28,,,,43,28,28,,43,28,70,49',
',43,70,,,,20,28,,,,,122,33,,29,20,20,,,9,20,20,,28,,43,,,39,,,9,,,,',
'173,173,173,,49,43,43,,49,,65,,,27,,28,65,26,27,,,,,,49,43,,28,9,9,49',
',9,,17,,,,,,,43,,,,,27,,49,,,,9,,,,,33,28,,28,28,68,68,28,,,,,9,28,27',
',122,,9,9,,18,,,,,,28,,,98,18,18,98,,,18,18,98,28,,,,21,28,21,,,28,67',
'28,28,,,20,43,,,67,,49,,,,,,,27,,9,,,,33,,,27,27,31,68,,68,24,,68,68',
',,24,,9,,,,,,9,28,,,35,28,,177,,,,67,,43,,43,,21,,,21,,,43,,,28,,,,59',
',28,,28,59,,43,,,21,,,33,,,,,,28,122,49,,122,,122,,122,,,74,,,,,,27',
'18,27,21,,27,,21,,,49,27,,21,21,,,43,21,21,43,,,,,27,43,24,,,,65,,65',
',,43,,,,43,,68,124,,,124,,,,,,,,,,,173,173,,173,173,122,173,122,,122',
',122,43,43,177,,43,177,,177,,177,43,43,,,,43,43,27,,,,27,122,,,,27,',
',,,,,65,,,,,,,,,,,,21,,,,21,,27,,,,,,,,21,68,49,68,,68,,,,,,,,124,,',
',21,,,,177,,177,49,177,,177,,127,,127,,,,,,,32,,,68,,32,68,21,,43,,',
'177,,43,43,,,43,21,173,173,173,173,,,,,43,,,68,,32,32,32,,,,,,,,,,43',
',,,65,65,68,21,21,65,65,21,,32,,,,21,,,,,,32,32,32,,,43,,,21,,,,,,,127',
',43,,,173,,,,,21,68,,,21,,21,21,,,68,68,124,,,124,,124,32,124,,,,43',
',43,43,32,32,43,,,,,,43,,,27,,27,,68,,,68,,,,43,,,,,,,,21,,,,,,,,68',
'43,,,,,,43,43,,,,,21,,,,68,,21,,21,,65,127,124,127,124,127,124,,124',
',,,,65,65,65,65,,,,27,,,27,,32,,32,,,32,124,,,,43,32,127,,127,,,,27',
'125,125,125,,68,,32,,,,,,43,,,,,,43,,43,,,,,,,,27,,,,27,,,43,,,27,27',
',,,27,27,,,,,,,65,,,,127,,,,,,,,,,,127,32,127,,127,32,,,,32,32,,,,,',
',,,,,,68,,,54,32,,,127,54,,,,,32,125,125,125,125,68,125,,,,,,,,,,,,',
',,,,54,54,54,,,,,,,,,,,,,27,,,,27,,,,,,54,,,,27,,125,125,125,125,54',
'54,54,54,,,,125,,,,27,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,54,,,,,,,,27',
'54,54,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,27,,,27,,,,,,27,,,,,,,,,,,,,',
'27,,,,,,,,,,,32,,32,,,,27,,32,,,,27,27,,,32,,,54,,,,,,,,,,,,,,,,,,,',
',,,,,54,,,,,,,,,,,,,,,,,,,27,,,,,,,32,,,32,,,,,,,,,,,27,,,,,,27,,27',
'32,,,,,,,32,,,,,54,,,,54,,,,54,54,,,,,55,,,32,,55,,32,,,,54,,32,32,',
',,32,32,54,,,,,,,,,,,,,55,55,55,,,,,,,,,,,,,,,32,,,,,,,,55,,,32,,,,',
',,55,55,55,55,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,55,,,32,,,,32,',
'55,55,,,,,,,32,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,32,,,,',
',,,,,,,32,,,,,,,,,,,,54,,54,,,,,,54,55,,,,,,,54,,,,,32,32,,,32,,,,,',
'32,,,55,,,,,,,,,,,32,,,,,,,,,,,,32,,,,,32,,,,32,,32,32,54,,,54,,,,,',
',,,,,,,,,,,,,,54,,55,,,,55,,,,55,55,,,,,,,,,,,32,,,,32,55,,,,,,54,,',
'55,,,,,,,,,,,32,,,,,,32,,32,,,,,,,,,,,,,,,,,,,,,54,,,,,,,,,,,54,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,54,,,,54,,,,,,,,,,54',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,34,34,34,,54,,,,,,,,,34,34',
'34,54,,55,,55,,,,,,55,,,,34,34,,,55,,,,,,,,,,,,,,,54,54,,,54,,,,,,54',
',,,,,,,,,,,,,54,,,,,,,,,,,,54,,,55,,54,55,,,54,,54,54,,,,,,,,,,,,,,55',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,54,55,,,54,,,,,,,,,,,,,,,,,,,,,54,,,',
',,54,,54,,34,34,,,34,34,,,,55,34,,,,,,,,,,55,,,34,,,34,34,34,34,34,34',
'34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,,,,,,,34',
'34,,,,,,,,34,,,,,,55,34,,34,55,,34,34,,,,,,,55,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,34,,,,,,,,,,,,,,55,,,,,,,,,,,,55,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,55,55,,,55,,,,,,55,,,,,,,,,,,,34,,55,,,,,,,,,,,,55,,,,,55,,,,55',
',55,55,,,,,,,,,,,,,,,,,34,,34,34,34,,,,,,,,,,,,,,,,,,,,,,,,,55,,,,55',
',,,,,,,,,,34,,34,,34,,,,,,55,,,,,,55,,55,,34,,,,,,,,,34,34,,,,,,,,,',
'34,,,34,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,34,34,,,,,,,,',
',34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,34,34,,,,34,,,34,34,34,34,,,,34',
'34,,,,,,,,,,,,,,,,,,,,,,,,34,,,34,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,',
',,,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,,',
',,34,,,,,,,,,,,,,34,34,34,34,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,34,34,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34' ]
        racc_goto_check = arr = ::Array.new(3244, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   130,     7,   nil,    64,   120,    40,    35,  -293,   -14,
  -511,  -569,  -652,   nil,  -349,     6,   149,    -6,   251,    91,
   142,   395,  -177,   -47,   206,    39,    48,   811,    18,  -206,
  -303,    -8,  1183,   -19,  2261,   -27,   nil,   nil,     8,  -193,
    52,  -200,  -379,   461,  -321,   nil,    74,    69,    81,   316,
   nil,   -22,    15,  -218,  1499,  1805,  -257,    57,   -66,     2,
   nil,   nil,    16,    20,  -237,   597,    51,    28,   653,   106,
   -46,    15,  -265,    60,    28,  -315,  -270,  -459,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    96,   108,   -34,
   nil,   107,  -269,  -646,  -483,  -323,   102,  -190,    39,  -558,
   101,   116,  -151,   119,   113,  -540,   114,  -541,  -404,  -730,
  -409,  -552,  -178,  -187,  -409,  -665,  -716,  -296,  -443,  -710,
  -602,   nil,    78,  -460,   365,   539,  -600,   473,  -676,  -441,
  -536,   nil,  -586,  -693,  -757,  -756,  -141,  -495,   138,  -339,
  -301,   -21,  -612,  -612,  -339,   -55,   nil,   -64,   -64,   nil,
   nil,  -445,  -703,  -478,  -598,   nil,   nil,   135,   -23,    58,
   130,   131,  -232,  -239,   133,   133,   133,  -382,  -370,  -349,
  -297,   nil,   nil,   252,  -451,  -263,  -622,   165,  -443,  -670,
   nil,  -594,  -806,   nil,   nil,  -435 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   346,   293,   nil,   528,
   nil,   837,   nil,   290,   291,   nil,   nil,   nil,    11,    12,
    18,   227,   nil,   nil,    14,   nil,   411,   228,   321,   nil,
   nil,   591,   226,   446,    21,    22,    23,    24,   nil,   681,
   nil,   nil,   nil,   310,   nil,    25,   425,    32,   nil,   nil,
    34,    37,    36,   nil,   223,   224,   358,   nil,   129,   433,
   128,   131,    75,    76,   nil,   416,    90,    46,   282,   nil,
   806,   426,   nil,   427,   438,   639,   492,   280,   266,    47,
    48,    49,    50,    51,    52,    53,    54,    55,   nil,   267,
    61,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   574,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   708,   556,   nil,   709,
   970,   866,   544,   nil,   545,   nil,   nil,   546,   nil,   548,
   nil,   792,   nil,   nil,   nil,   554,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   437,   nil,   nil,   659,
   653,   nil,   nil,   nil,   nil,    74,    77,    78,   nil,   nil,
   nil,   nil,   nil,   601,   nil,   nil,   nil,   nil,   nil,   nil,
   821,   742,   543,   nil,   547,   829,   559,   561,   562,   877,
   565,   566,   878,   569,   572,   285 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 146, :_reduce_none,
  2, 147, :_reduce_2,
  0, 148, :_reduce_3,
  1, 148, :_reduce_4,
  3, 148, :_reduce_5,
  2, 148, :_reduce_6,
  1, 150, :_reduce_none,
  4, 150, :_reduce_8,
  4, 153, :_reduce_9,
  2, 154, :_reduce_10,
  0, 158, :_reduce_11,
  1, 158, :_reduce_12,
  3, 158, :_reduce_13,
  2, 158, :_reduce_14,
  1, 159, :_reduce_none,
  4, 159, :_reduce_16,
  0, 170, :_reduce_17,
  4, 152, :_reduce_18,
  3, 152, :_reduce_19,
  3, 152, :_reduce_20,
  3, 152, :_reduce_21,
  2, 152, :_reduce_22,
  3, 152, :_reduce_23,
  3, 152, :_reduce_24,
  3, 152, :_reduce_25,
  3, 152, :_reduce_26,
  3, 152, :_reduce_27,
  4, 152, :_reduce_28,
  1, 152, :_reduce_none,
  3, 152, :_reduce_30,
  3, 152, :_reduce_31,
  3, 152, :_reduce_32,
  1, 152, :_reduce_none,
  3, 163, :_reduce_34,
  3, 163, :_reduce_35,
  6, 163, :_reduce_36,
  5, 163, :_reduce_37,
  5, 163, :_reduce_38,
  5, 163, :_reduce_39,
  5, 163, :_reduce_40,
  3, 163, :_reduce_41,
  1, 171, :_reduce_none,
  3, 171, :_reduce_43,
  1, 171, :_reduce_none,
  1, 169, :_reduce_none,
  3, 169, :_reduce_46,
  3, 169, :_reduce_47,
  3, 169, :_reduce_48,
  2, 169, :_reduce_49,
  1, 169, :_reduce_none,
  1, 162, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 181, :_reduce_none,
  4, 181, :_reduce_55,
  0, 189, :_reduce_56,
  4, 186, :_reduce_57,
  1, 188, :_reduce_none,
  2, 180, :_reduce_59,
  3, 180, :_reduce_60,
  4, 180, :_reduce_61,
  5, 180, :_reduce_62,
  4, 180, :_reduce_63,
  5, 180, :_reduce_64,
  2, 180, :_reduce_65,
  2, 180, :_reduce_66,
  2, 180, :_reduce_67,
  2, 180, :_reduce_68,
  2, 180, :_reduce_69,
  1, 164, :_reduce_70,
  3, 164, :_reduce_71,
  1, 193, :_reduce_72,
  3, 193, :_reduce_73,
  1, 192, :_reduce_none,
  2, 192, :_reduce_75,
  3, 192, :_reduce_76,
  5, 192, :_reduce_77,
  2, 192, :_reduce_78,
  4, 192, :_reduce_79,
  2, 192, :_reduce_80,
  4, 192, :_reduce_81,
  1, 192, :_reduce_82,
  3, 192, :_reduce_83,
  1, 196, :_reduce_none,
  3, 196, :_reduce_85,
  2, 195, :_reduce_86,
  3, 195, :_reduce_87,
  1, 198, :_reduce_88,
  3, 198, :_reduce_89,
  1, 197, :_reduce_90,
  1, 197, :_reduce_91,
  4, 197, :_reduce_92,
  3, 197, :_reduce_93,
  3, 197, :_reduce_94,
  3, 197, :_reduce_95,
  3, 197, :_reduce_96,
  2, 197, :_reduce_97,
  1, 197, :_reduce_98,
  1, 166, :_reduce_99,
  1, 166, :_reduce_100,
  4, 166, :_reduce_101,
  3, 166, :_reduce_102,
  3, 166, :_reduce_103,
  3, 166, :_reduce_104,
  3, 166, :_reduce_105,
  2, 166, :_reduce_106,
  1, 166, :_reduce_107,
  1, 201, :_reduce_108,
  1, 201, :_reduce_none,
  2, 202, :_reduce_110,
  1, 202, :_reduce_111,
  3, 202, :_reduce_112,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 206, :_reduce_118,
  1, 206, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 161, :_reduce_122,
  0, 209, :_reduce_123,
  4, 161, :_reduce_124,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  3, 179, :_reduce_196,
  3, 179, :_reduce_197,
  6, 179, :_reduce_198,
  5, 179, :_reduce_199,
  5, 179, :_reduce_200,
  5, 179, :_reduce_201,
  5, 179, :_reduce_202,
  4, 179, :_reduce_203,
  3, 179, :_reduce_204,
  3, 179, :_reduce_205,
  3, 179, :_reduce_206,
  3, 179, :_reduce_207,
  3, 179, :_reduce_208,
  3, 179, :_reduce_209,
  3, 179, :_reduce_210,
  3, 179, :_reduce_211,
  3, 179, :_reduce_212,
  4, 179, :_reduce_213,
  2, 179, :_reduce_214,
  2, 179, :_reduce_215,
  3, 179, :_reduce_216,
  3, 179, :_reduce_217,
  3, 179, :_reduce_218,
  3, 179, :_reduce_219,
  3, 179, :_reduce_220,
  3, 179, :_reduce_221,
  3, 179, :_reduce_222,
  3, 179, :_reduce_223,
  3, 179, :_reduce_224,
  3, 179, :_reduce_225,
  3, 179, :_reduce_226,
  3, 179, :_reduce_227,
  3, 179, :_reduce_228,
  2, 179, :_reduce_229,
  2, 179, :_reduce_230,
  3, 179, :_reduce_231,
  3, 179, :_reduce_232,
  3, 179, :_reduce_233,
  3, 179, :_reduce_234,
  3, 179, :_reduce_235,
  6, 179, :_reduce_236,
  1, 179, :_reduce_none,
  1, 213, :_reduce_none,
  1, 214, :_reduce_none,
  2, 214, :_reduce_none,
  4, 214, :_reduce_241,
  2, 214, :_reduce_242,
  1, 210, :_reduce_none,
  3, 210, :_reduce_244,
  3, 219, :_reduce_245,
  0, 220, :_reduce_246,
  1, 220, :_reduce_none,
  0, 174, :_reduce_248,
  1, 174, :_reduce_none,
  2, 174, :_reduce_none,
  4, 174, :_reduce_251,
  2, 174, :_reduce_252,
  1, 191, :_reduce_253,
  2, 191, :_reduce_254,
  2, 191, :_reduce_255,
  4, 191, :_reduce_256,
  1, 191, :_reduce_257,
  0, 223, :_reduce_258,
  2, 185, :_reduce_259,
  2, 222, :_reduce_260,
  2, 221, :_reduce_261,
  0, 221, :_reduce_262,
  1, 216, :_reduce_263,
  2, 216, :_reduce_264,
  3, 216, :_reduce_265,
  4, 216, :_reduce_266,
  1, 168, :_reduce_267,
  1, 168, :_reduce_none,
  3, 167, :_reduce_269,
  4, 167, :_reduce_270,
  2, 167, :_reduce_271,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_282,
  0, 246, :_reduce_283,
  4, 212, :_reduce_284,
  0, 247, :_reduce_285,
  4, 212, :_reduce_286,
  0, 248, :_reduce_287,
  4, 212, :_reduce_288,
  3, 212, :_reduce_289,
  3, 212, :_reduce_290,
  2, 212, :_reduce_291,
  3, 212, :_reduce_292,
  3, 212, :_reduce_293,
  1, 212, :_reduce_294,
  4, 212, :_reduce_295,
  3, 212, :_reduce_296,
  1, 212, :_reduce_297,
  5, 212, :_reduce_298,
  4, 212, :_reduce_299,
  3, 212, :_reduce_300,
  2, 212, :_reduce_301,
  1, 212, :_reduce_none,
  2, 212, :_reduce_303,
  2, 212, :_reduce_304,
  6, 212, :_reduce_305,
  6, 212, :_reduce_306,
  0, 249, :_reduce_307,
  0, 250, :_reduce_308,
  7, 212, :_reduce_309,
  0, 251, :_reduce_310,
  0, 252, :_reduce_311,
  7, 212, :_reduce_312,
  5, 212, :_reduce_313,
  4, 212, :_reduce_314,
  0, 253, :_reduce_315,
  0, 254, :_reduce_316,
  9, 212, :_reduce_317,
  0, 255, :_reduce_318,
  6, 212, :_reduce_319,
  0, 256, :_reduce_320,
  7, 212, :_reduce_321,
  0, 257, :_reduce_322,
  5, 212, :_reduce_323,
  0, 258, :_reduce_324,
  6, 212, :_reduce_325,
  0, 259, :_reduce_326,
  0, 260, :_reduce_327,
  9, 212, :_reduce_328,
  1, 212, :_reduce_329,
  1, 212, :_reduce_330,
  1, 212, :_reduce_331,
  1, 212, :_reduce_332,
  1, 173, :_reduce_none,
  1, 237, :_reduce_none,
  1, 237, :_reduce_none,
  2, 237, :_reduce_336,
  1, 239, :_reduce_none,
  1, 239, :_reduce_none,
  1, 238, :_reduce_none,
  5, 238, :_reduce_340,
  1, 156, :_reduce_none,
  2, 156, :_reduce_342,
  1, 241, :_reduce_none,
  1, 241, :_reduce_none,
  1, 261, :_reduce_345,
  3, 261, :_reduce_346,
  1, 264, :_reduce_347,
  3, 264, :_reduce_348,
  1, 263, :_reduce_none,
  4, 263, :_reduce_350,
  6, 263, :_reduce_351,
  3, 263, :_reduce_352,
  5, 263, :_reduce_353,
  2, 263, :_reduce_354,
  4, 263, :_reduce_355,
  1, 263, :_reduce_356,
  3, 263, :_reduce_357,
  4, 265, :_reduce_358,
  2, 265, :_reduce_359,
  2, 265, :_reduce_360,
  1, 265, :_reduce_361,
  2, 270, :_reduce_362,
  0, 270, :_reduce_363,
  6, 271, :_reduce_364,
  8, 271, :_reduce_365,
  4, 271, :_reduce_366,
  6, 271, :_reduce_367,
  4, 271, :_reduce_368,
  2, 271, :_reduce_none,
  6, 271, :_reduce_370,
  2, 271, :_reduce_371,
  4, 271, :_reduce_372,
  6, 271, :_reduce_373,
  2, 271, :_reduce_374,
  4, 271, :_reduce_375,
  2, 271, :_reduce_376,
  4, 271, :_reduce_377,
  1, 271, :_reduce_none,
  0, 275, :_reduce_379,
  1, 275, :_reduce_380,
  3, 276, :_reduce_381,
  1, 276, :_reduce_382,
  4, 276, :_reduce_383,
  1, 277, :_reduce_384,
  4, 277, :_reduce_385,
  1, 278, :_reduce_386,
  3, 278, :_reduce_387,
  1, 279, :_reduce_388,
  1, 279, :_reduce_none,
  0, 283, :_reduce_390,
  0, 284, :_reduce_391,
  4, 236, :_reduce_392,
  4, 281, :_reduce_393,
  1, 281, :_reduce_394,
  0, 287, :_reduce_395,
  4, 282, :_reduce_396,
  0, 288, :_reduce_397,
  4, 282, :_reduce_398,
  0, 290, :_reduce_399,
  4, 286, :_reduce_400,
  2, 182, :_reduce_401,
  4, 182, :_reduce_402,
  5, 182, :_reduce_403,
  5, 182, :_reduce_404,
  2, 235, :_reduce_405,
  4, 235, :_reduce_406,
  4, 235, :_reduce_407,
  3, 235, :_reduce_408,
  3, 235, :_reduce_409,
  3, 235, :_reduce_410,
  2, 235, :_reduce_411,
  1, 235, :_reduce_412,
  4, 235, :_reduce_413,
  0, 292, :_reduce_414,
  4, 234, :_reduce_415,
  0, 293, :_reduce_416,
  4, 234, :_reduce_417,
  0, 294, :_reduce_418,
  3, 187, :_reduce_419,
  0, 295, :_reduce_420,
  0, 296, :_reduce_421,
  4, 289, :_reduce_422,
  5, 240, :_reduce_423,
  1, 297, :_reduce_424,
  1, 297, :_reduce_none,
  6, 155, :_reduce_426,
  0, 155, :_reduce_427,
  1, 298, :_reduce_428,
  1, 298, :_reduce_none,
  1, 298, :_reduce_none,
  2, 299, :_reduce_431,
  1, 299, :_reduce_none,
  2, 157, :_reduce_433,
  1, 157, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 225, :_reduce_438,
  1, 301, :_reduce_439,
  2, 301, :_reduce_440,
  3, 302, :_reduce_441,
  1, 302, :_reduce_442,
  1, 302, :_reduce_443,
  3, 226, :_reduce_444,
  4, 227, :_reduce_445,
  3, 228, :_reduce_446,
  0, 306, :_reduce_447,
  3, 306, :_reduce_448,
  1, 307, :_reduce_449,
  2, 307, :_reduce_450,
  3, 230, :_reduce_451,
  0, 309, :_reduce_452,
  3, 309, :_reduce_453,
  3, 229, :_reduce_454,
  3, 231, :_reduce_455,
  0, 310, :_reduce_456,
  3, 310, :_reduce_457,
  0, 311, :_reduce_458,
  3, 311, :_reduce_459,
  0, 303, :_reduce_460,
  2, 303, :_reduce_461,
  0, 304, :_reduce_462,
  2, 304, :_reduce_463,
  0, 305, :_reduce_464,
  2, 305, :_reduce_465,
  1, 308, :_reduce_466,
  2, 308, :_reduce_467,
  0, 313, :_reduce_468,
  4, 308, :_reduce_469,
  1, 312, :_reduce_470,
  1, 312, :_reduce_471,
  1, 312, :_reduce_472,
  1, 312, :_reduce_none,
  1, 207, :_reduce_474,
  3, 208, :_reduce_475,
  1, 300, :_reduce_476,
  2, 300, :_reduce_477,
  1, 211, :_reduce_478,
  1, 211, :_reduce_479,
  1, 211, :_reduce_480,
  1, 211, :_reduce_481,
  1, 199, :_reduce_482,
  1, 199, :_reduce_483,
  1, 199, :_reduce_484,
  1, 199, :_reduce_485,
  1, 199, :_reduce_486,
  1, 200, :_reduce_487,
  1, 200, :_reduce_488,
  1, 200, :_reduce_489,
  1, 200, :_reduce_490,
  1, 200, :_reduce_491,
  1, 200, :_reduce_492,
  1, 200, :_reduce_493,
  1, 232, :_reduce_494,
  1, 232, :_reduce_495,
  1, 172, :_reduce_496,
  1, 172, :_reduce_497,
  1, 177, :_reduce_498,
  1, 177, :_reduce_499,
  0, 314, :_reduce_500,
  4, 242, :_reduce_501,
  0, 242, :_reduce_502,
  3, 244, :_reduce_503,
  0, 316, :_reduce_504,
  3, 244, :_reduce_505,
  4, 315, :_reduce_506,
  2, 315, :_reduce_507,
  2, 315, :_reduce_508,
  1, 315, :_reduce_509,
  2, 318, :_reduce_510,
  0, 318, :_reduce_511,
  6, 285, :_reduce_512,
  8, 285, :_reduce_513,
  4, 285, :_reduce_514,
  6, 285, :_reduce_515,
  4, 285, :_reduce_516,
  6, 285, :_reduce_517,
  2, 285, :_reduce_518,
  4, 285, :_reduce_519,
  6, 285, :_reduce_520,
  2, 285, :_reduce_521,
  4, 285, :_reduce_522,
  2, 285, :_reduce_523,
  4, 285, :_reduce_524,
  1, 285, :_reduce_525,
  0, 285, :_reduce_526,
  1, 280, :_reduce_527,
  1, 280, :_reduce_528,
  1, 280, :_reduce_529,
  1, 280, :_reduce_530,
  1, 262, :_reduce_none,
  1, 262, :_reduce_532,
  1, 320, :_reduce_533,
  1, 321, :_reduce_534,
  3, 321, :_reduce_535,
  1, 272, :_reduce_536,
  3, 272, :_reduce_537,
  1, 322, :_reduce_538,
  2, 323, :_reduce_539,
  1, 323, :_reduce_540,
  2, 324, :_reduce_541,
  1, 324, :_reduce_542,
  1, 266, :_reduce_543,
  3, 266, :_reduce_544,
  1, 317, :_reduce_545,
  3, 317, :_reduce_546,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  2, 267, :_reduce_549,
  1, 267, :_reduce_550,
  3, 326, :_reduce_551,
  3, 327, :_reduce_552,
  1, 273, :_reduce_553,
  3, 273, :_reduce_554,
  1, 319, :_reduce_555,
  3, 319, :_reduce_556,
  1, 328, :_reduce_none,
  1, 328, :_reduce_none,
  2, 274, :_reduce_559,
  1, 274, :_reduce_560,
  1, 329, :_reduce_none,
  1, 329, :_reduce_none,
  2, 269, :_reduce_563,
  2, 268, :_reduce_564,
  0, 268, :_reduce_565,
  1, 245, :_reduce_none,
  3, 245, :_reduce_567,
  0, 233, :_reduce_568,
  2, 233, :_reduce_none,
  1, 218, :_reduce_570,
  3, 218, :_reduce_571,
  3, 330, :_reduce_572,
  2, 330, :_reduce_573,
  4, 330, :_reduce_574,
  2, 330, :_reduce_575,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 291, :_reduce_none,
  1, 291, :_reduce_none,
  1, 291, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 176, :_reduce_588,
  1, 176, :_reduce_589,
  0, 149, :_reduce_none,
  1, 149, :_reduce_none,
  0, 178, :_reduce_none,
  1, 178, :_reduce_none,
  2, 194, :_reduce_594,
  2, 175, :_reduce_595,
  0, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 243, :_reduce_599,
  1, 243, :_reduce_none,
  1, 151, :_reduce_none,
  2, 151, :_reduce_none,
  0, 215, :_reduce_603 ]

racc_reduce_n = 604

racc_shift_n = 1037

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tDSTAR => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSYMBOLS_BEG => 122,
  :tQSYMBOLS_BEG => 123,
  :tSTRING_DBEG => 124,
  :tSTRING_DVAR => 125,
  :tSTRING_END => 126,
  :tSTRING_DEND => 127,
  :tSTRING => 128,
  :tSYMBOL => 129,
  :tNL => 130,
  :tEH => 131,
  :tCOLON => 132,
  :tCOMMA => 133,
  :tSPACE => 134,
  :tSEMI => 135,
  :tLAMBDA => 136,
  :tLAMBEG => 137,
  :tCHARACTER => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tANDDOT => 142,
  :tEQL => 143,
  :tLOWEST => 144 }

racc_nt_base = 145

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tANDDOT",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@1",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@2",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@3",
  "arg_rhs",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@4",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@5",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@20",
  "@21",
  "f_args",
  "do_block",
  "@22",
  "@23",
  "do_body",
  "@24",
  "operation3",
  "@25",
  "@26",
  "@27",
  "@28",
  "@29",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@30",
  "@31",
  "args_tail",
  "@32",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_3(val, _values, result)
                      result = []
                    
    result
end

def _reduce_4(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_5(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = @builder.preexe(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_9(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_.nil?
                        diagnostic :warning, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_10(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_11(val, _values, result)
                      result = []
                    
    result
end

def _reduce_12(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_13(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_14(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 15 omitted

def _reduce_16(val, _values, result)
                      diagnostic :error, :begin_in_method, nil, val[0]
                    
    result
end

def _reduce_17(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_18(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_21(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_22(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_27(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_28(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_31(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_32(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 33 omitted

def _reduce_34(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_35(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_37(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_39(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_40(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_41(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 42 omitted

def _reduce_43(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

# reduce 44 omitted

# reduce 45 omitted

def _reduce_46(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_47(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_48(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_49(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

def _reduce_55(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_56(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_57(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

# reduce 58 omitted

def _reduce_59(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_60(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_61(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_62(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_63(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_64(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_65(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_66(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_67(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_68(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_69(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_70(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_71(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_72(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_73(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 74 omitted

def _reduce_75(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_76(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_77(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_78(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_79(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_80(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_81(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_82(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_83(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 84 omitted

def _reduce_85(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_87(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_88(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_89(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_91(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_92(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_93(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_94(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_95(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_96(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_97(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_98(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_99(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_100(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_101(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_102(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_103(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_104(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_105(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_106(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_107(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_108(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 109 omitted

def _reduce_110(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_111(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_112(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

def _reduce_118(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

def _reduce_122(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_123(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_124(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

def _reduce_196(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_197(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_198(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_202(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_203(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    val[1], val[2], val[3]))
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_230(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_236(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

def _reduce_241(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_242(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

# reduce 243 omitted

def _reduce_244(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_245(val, _values, result)
                      result = val
                    
    result
end

def _reduce_246(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 247 omitted

def _reduce_248(val, _values, result)
                      result = []
                    
    result
end

# reduce 249 omitted

# reduce 250 omitted

def _reduce_251(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_252(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_253(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_255(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_256(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_257(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_258(val, _values, result)
                      # When branch gets invoked by RACC's lookahead
                      # and command args start with '[' or '('
                      # we need to put `true` to the cmdarg stack
                      # **before** `false` pushed by lexer
                      #   m [], n
                      #     ^
                      # Right here we have cmdarg [...0] because
                      # lexer pushed it on '['
                      # We need to modify cmdarg stack to [...10]
                      #
                      # For all other cases (like `m n` or `m n, []`) we simply put 1 to the stack
                      # and later lexer pushes corresponding bits on top of it.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACK || last_token == :tLPAREN_ARG

                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.push(true)
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.push(true)
                      end
                    
    result
end

def _reduce_259(val, _values, result)
                      # call_args can be followed by tLBRACE_ARG (that does cmdarg.push(0) in the lexer)
                      # but the push must be done after cmdarg.pop() in the parser.
                      # So this code does cmdarg.pop() to pop 0 pushed by tLBRACE_ARG,
                      # cmdarg.pop() to pop 1 pushed by command_args,
                      # and cmdarg.push(0) to restore back the flag set by tLBRACE_ARG.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACE_ARG
                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.pop
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.pop
                      end

                      result = val[1]
                    
    result
end

def _reduce_260(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_261(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = []
                    
    result
end

def _reduce_263(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_264(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_266(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_267(val, _values, result)
                      result = @builder.array(nil, val[0], nil)
                    
    result
end

# reduce 268 omitted

def _reduce_269(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_271(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

def _reduce_282(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_283(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_284(val, _values, result)
                      @lexer.cmdarg.pop

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
end

def _reduce_285(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_286(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[3])
                    
    result
end

def _reduce_287(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_288(val, _values, result)
                      result = @builder.begin(val[0], nil, val[3])
                    
    result
end

def _reduce_289(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_290(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_291(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_292(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_293(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_294(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_295(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_296(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_297(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_298(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_299(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_300(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_301(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 302 omitted

def _reduce_303(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_304(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_305(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_306(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_307(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_308(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_309(val, _values, result)
                      result = @builder.loop(:while, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_310(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_311(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_312(val, _values, result)
                      result = @builder.loop(:until, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_313(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_314(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_315(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_316(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_317(val, _values, result)
                      result = @builder.for(val[0], val[1],
                                            val[2], val[4],
                                            val[5], val[7], val[8])
                    
    result
end

def _reduce_318(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @context.push(:class)
                    
    result
end

def _reduce_319(val, _values, result)
                      unless @context.class_definition_allowed?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @lexer.cmdarg.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_320(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @context.push(:sclass)
                    
    result
end

def _reduce_321(val, _values, result)
                      result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @lexer.cmdarg.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_322(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_323(val, _values, result)
                      unless @context.module_definition_allowed?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @lexer.cmdarg.pop
                      @static_env.unextend
                    
    result
end

def _reduce_324(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @context.push(:def)
                    
    result
end

def _reduce_325(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      @lexer.cmdarg.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_326(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_327(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @context.push(:defs)
                    
    result
end

def _reduce_328(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      @lexer.cmdarg.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_329(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_330(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_331(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_332(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 333 omitted

# reduce 334 omitted

# reduce 335 omitted

def _reduce_336(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

def _reduce_340(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 341 omitted

def _reduce_342(val, _values, result)
                      result = val
                    
    result
end

# reduce 343 omitted

# reduce 344 omitted

def _reduce_345(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_346(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_347(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_348(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 349 omitted

def _reduce_350(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2], val[3]))
                    
    result
end

def _reduce_351(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2], val[3])).
                                  concat(val[5])
                    
    result
end

def _reduce_352(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2]))
                    
    result
end

def _reduce_353(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_354(val, _values, result)
                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_355(val, _values, result)
                      result = [ @builder.restarg(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_356(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

def _reduce_357(val, _values, result)
                      result = [ @builder.restarg(val[0]),
                                 *val[2] ]
                    
    result
end

def _reduce_358(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_359(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_360(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_361(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_362(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_363(val, _values, result)
                      result = []
                    
    result
end

def _reduce_364(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_365(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_366(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_367(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_368(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 369 omitted

def _reduce_370(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_371(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_372(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_373(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_374(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_375(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_376(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_377(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 378 omitted

def _reduce_379(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_380(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_381(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_382(val, _values, result)
                      result = @builder.args(val[0], [], val[0])
                    
    result
end

def _reduce_383(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_384(val, _values, result)
                      result = []
                    
    result
end

def _reduce_385(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_386(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_387(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_388(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 389 omitted

def _reduce_390(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_391(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_392(val, _values, result)
                      @lexer.cmdarg.pop

                      result = [ val[1], val[3] ]

                      @static_env.unextend
                    
    result
end

def _reduce_393(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_394(val, _values, result)
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_395(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_396(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_397(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_398(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_399(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_400(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_401(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_402(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_403(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_404(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_405(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_406(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_407(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_408(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_409(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_410(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_411(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_412(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_413(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_414(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_415(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_416(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_417(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_418(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_419(val, _values, result)
                      result = [ val[1], val[2] ]

                      @static_env.unextend
                    
    result
end

def _reduce_420(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_421(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_422(val, _values, result)
                      result = [ val[2], val[3] ]

                      @static_env.unextend
                      @lexer.cmdarg.pop
                    
    result
end

def _reduce_423(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_424(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 425 omitted

def _reduce_426(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_427(val, _values, result)
                      result = []
                    
    result
end

def _reduce_428(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 429 omitted

# reduce 430 omitted

def _reduce_431(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 432 omitted

def _reduce_433(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 434 omitted

# reduce 435 omitted

# reduce 436 omitted

# reduce 437 omitted

def _reduce_438(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_439(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_440(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_441(val, _values, result)
                      string = @builder.string_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_442(val, _values, result)
                      string = @builder.string(val[0])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_443(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_444(val, _values, result)
                      string = @builder.xstring_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_445(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_446(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_447(val, _values, result)
                      result = []
                    
    result
end

def _reduce_448(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_449(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_450(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_451(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_452(val, _values, result)
                      result = []
                    
    result
end

def _reduce_453(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_454(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_455(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_456(val, _values, result)
                      result = []
                    
    result
end

def _reduce_457(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_458(val, _values, result)
                      result = []
                    
    result
end

def _reduce_459(val, _values, result)
                      result = val[0] << @builder.symbol_internal(val[1])
                    
    result
end

def _reduce_460(val, _values, result)
                      result = []
                    
    result
end

def _reduce_461(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_462(val, _values, result)
                      result = []
                    
    result
end

def _reduce_463(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_464(val, _values, result)
                      result = []
                    
    result
end

def _reduce_465(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_466(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_467(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_468(val, _values, result)
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                    
    result
end

def _reduce_469(val, _values, result)
                      @lexer.cmdarg.pop
                      @lexer.cond.pop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_470(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_471(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_472(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 473 omitted

def _reduce_474(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_475(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_476(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_477(val, _values, result)
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], val[1])
                      else
                        result = @builder.unary_num(val[0], val[1])
                      end
                    
    result
end

def _reduce_478(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_479(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_480(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.rational(val[0])
                    
    result
end

def _reduce_481(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.complex(val[0])
                    
    result
end

def _reduce_482(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_484(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_485(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_486(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_487(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_488(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_489(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_490(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_491(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_492(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_493(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_494(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_495(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_496(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_497(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_498(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_499(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_500(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_501(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_502(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_503(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_504(val, _values, result)
                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_505(val, _values, result)
                      @lexer.in_kwarg = val[0]
                      result = @builder.args(nil, val[1], nil)
                    
    result
end

def _reduce_506(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_507(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_508(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_509(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_510(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_511(val, _values, result)
                      result = []
                    
    result
end

def _reduce_512(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_513(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_514(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_515(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_516(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_517(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_518(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_519(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_520(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_521(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_522(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_523(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_524(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_525(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_526(val, _values, result)
                      result = []
                    
    result
end

def _reduce_527(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_528(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_529(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_530(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 531 omitted

def _reduce_532(val, _values, result)
                      @static_env.declare val[0][0]

                      result = val[0]
                    
    result
end

def _reduce_533(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_534(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_535(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_536(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_537(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_538(val, _values, result)
                      check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      result = val[0]
                    
    result
end

def _reduce_539(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_540(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_541(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_542(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_543(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_544(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_545(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_546(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 547 omitted

# reduce 548 omitted

def _reduce_549(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
end

def _reduce_550(val, _values, result)
                      result = [ @builder.kwrestarg(val[0]) ]
                    
    result
end

def _reduce_551(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_552(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_553(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_554(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_555(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_556(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 557 omitted

# reduce 558 omitted

def _reduce_559(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_560(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 561 omitted

# reduce 562 omitted

def _reduce_563(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_564(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_565(val, _values, result)
                      result = []
                    
    result
end

# reduce 566 omitted

def _reduce_567(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_568(val, _values, result)
                      result = []
                    
    result
end

# reduce 569 omitted

def _reduce_570(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_571(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_572(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_573(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

def _reduce_574(val, _values, result)
                      result = @builder.pair_quoted(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_575(val, _values, result)
                      result = @builder.kwsplat(val[0], val[1])
                    
    result
end

# reduce 576 omitted

# reduce 577 omitted

# reduce 578 omitted

# reduce 579 omitted

# reduce 580 omitted

# reduce 581 omitted

# reduce 582 omitted

# reduce 583 omitted

# reduce 584 omitted

# reduce 585 omitted

# reduce 586 omitted

# reduce 587 omitted

def _reduce_588(val, _values, result)
                      result = [:dot, val[0][1]]
                    
    result
end

def _reduce_589(val, _values, result)
                      result = [:anddot, val[0][1]]
                    
    result
end

# reduce 590 omitted

# reduce 591 omitted

# reduce 592 omitted

# reduce 593 omitted

def _reduce_594(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_595(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 596 omitted

# reduce 597 omitted

# reduce 598 omitted

def _reduce_599(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 600 omitted

# reduce 601 omitted

# reduce 602 omitted

def _reduce_603(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby24
  end   # module Parser
